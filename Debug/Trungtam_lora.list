
Trungtam_lora.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008b24  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000142c  08008c38  08008c38  00018c38  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a064  0800a064  000201e8  2**0
                  CONTENTS
  4 .ARM          00000000  0800a064  0800a064  000201e8  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a064  0800a064  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a064  0800a064  0001a064  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a068  0800a068  0001a068  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  0800a06c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000198  200001e8  0800a254  000201e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000380  0800a254  00020380  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009815  00000000  00000000  00020211  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001dad  00000000  00000000  00029a26  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000aa0  00000000  00000000  0002b7d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009c0  00000000  00000000  0002c278  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001883a  00000000  00000000  0002cc38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000af8c  00000000  00000000  00045472  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00086d1a  00000000  00000000  000503fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d7118  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003f5c  00000000  00000000  000d7168  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e8 	.word	0x200001e8
 800012c:	00000000 	.word	0x00000000
 8000130:	08008c1c 	.word	0x08008c1c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001ec 	.word	0x200001ec
 800014c:	08008c1c 	.word	0x08008c1c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_d2lz>:
 8000b68:	b538      	push	{r3, r4, r5, lr}
 8000b6a:	4605      	mov	r5, r0
 8000b6c:	460c      	mov	r4, r1
 8000b6e:	2200      	movs	r2, #0
 8000b70:	2300      	movs	r3, #0
 8000b72:	4628      	mov	r0, r5
 8000b74:	4621      	mov	r1, r4
 8000b76:	f7ff ff21 	bl	80009bc <__aeabi_dcmplt>
 8000b7a:	b928      	cbnz	r0, 8000b88 <__aeabi_d2lz+0x20>
 8000b7c:	4628      	mov	r0, r5
 8000b7e:	4621      	mov	r1, r4
 8000b80:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000b84:	f000 b80a 	b.w	8000b9c <__aeabi_d2ulz>
 8000b88:	4628      	mov	r0, r5
 8000b8a:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8000b8e:	f000 f805 	bl	8000b9c <__aeabi_d2ulz>
 8000b92:	4240      	negs	r0, r0
 8000b94:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b98:	bd38      	pop	{r3, r4, r5, pc}
 8000b9a:	bf00      	nop

08000b9c <__aeabi_d2ulz>:
 8000b9c:	b5d0      	push	{r4, r6, r7, lr}
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	4b0b      	ldr	r3, [pc, #44]	; (8000bd0 <__aeabi_d2ulz+0x34>)
 8000ba2:	4606      	mov	r6, r0
 8000ba4:	460f      	mov	r7, r1
 8000ba6:	f7ff fc97 	bl	80004d8 <__aeabi_dmul>
 8000baa:	f7ff ff6d 	bl	8000a88 <__aeabi_d2uiz>
 8000bae:	4604      	mov	r4, r0
 8000bb0:	f7ff fc18 	bl	80003e4 <__aeabi_ui2d>
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	4b07      	ldr	r3, [pc, #28]	; (8000bd4 <__aeabi_d2ulz+0x38>)
 8000bb8:	f7ff fc8e 	bl	80004d8 <__aeabi_dmul>
 8000bbc:	4602      	mov	r2, r0
 8000bbe:	460b      	mov	r3, r1
 8000bc0:	4630      	mov	r0, r6
 8000bc2:	4639      	mov	r1, r7
 8000bc4:	f7ff fad0 	bl	8000168 <__aeabi_dsub>
 8000bc8:	f7ff ff5e 	bl	8000a88 <__aeabi_d2uiz>
 8000bcc:	4621      	mov	r1, r4
 8000bce:	bdd0      	pop	{r4, r6, r7, pc}
 8000bd0:	3df00000 	.word	0x3df00000
 8000bd4:	41f00000 	.word	0x41f00000

08000bd8 <HAL_GPIO_EXTI_Callback>:
void configureGPRS(void);
void sendDataToThingSpeak(float tem, float hum, int i);
void Lora_setup(void);

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b082      	sub	sp, #8
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	4603      	mov	r3, r0
 8000be0:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == DIO0_Pin)
 8000be2:	88fb      	ldrh	r3, [r7, #6]
 8000be4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000be8:	f040 80c9 	bne.w	8000d7e <HAL_GPIO_EXTI_Callback+0x1a6>
	{
		LoRa_receive(&myLoRa, Rxbuffer, 10);
 8000bec:	220a      	movs	r2, #10
 8000bee:	496b      	ldr	r1, [pc, #428]	; (8000d9c <HAL_GPIO_EXTI_Callback+0x1c4>)
 8000bf0:	486b      	ldr	r0, [pc, #428]	; (8000da0 <HAL_GPIO_EXTI_Callback+0x1c8>)
 8000bf2:	f002 ffeb 	bl	8003bcc <LoRa_receive>
		if(Rxbuffer[0] == 0x01)
 8000bf6:	4b69      	ldr	r3, [pc, #420]	; (8000d9c <HAL_GPIO_EXTI_Callback+0x1c4>)
 8000bf8:	781b      	ldrb	r3, [r3, #0]
 8000bfa:	2b01      	cmp	r3, #1
 8000bfc:	d15d      	bne.n	8000cba <HAL_GPIO_EXTI_Callback+0xe2>
		{
			if (Rxbuffer[1] == 0x02)  // Temp
 8000bfe:	4b67      	ldr	r3, [pc, #412]	; (8000d9c <HAL_GPIO_EXTI_Callback+0x1c4>)
 8000c00:	785b      	ldrb	r3, [r3, #1]
 8000c02:	2b02      	cmp	r3, #2
 8000c04:	d159      	bne.n	8000cba <HAL_GPIO_EXTI_Callback+0xe2>
			{
				Data16_Temp[0] = Rxbuffer[2]<<8 | Rxbuffer[3];
 8000c06:	4b65      	ldr	r3, [pc, #404]	; (8000d9c <HAL_GPIO_EXTI_Callback+0x1c4>)
 8000c08:	789b      	ldrb	r3, [r3, #2]
 8000c0a:	021b      	lsls	r3, r3, #8
 8000c0c:	b21a      	sxth	r2, r3
 8000c0e:	4b63      	ldr	r3, [pc, #396]	; (8000d9c <HAL_GPIO_EXTI_Callback+0x1c4>)
 8000c10:	78db      	ldrb	r3, [r3, #3]
 8000c12:	b21b      	sxth	r3, r3
 8000c14:	4313      	orrs	r3, r2
 8000c16:	b21b      	sxth	r3, r3
 8000c18:	b29a      	uxth	r2, r3
 8000c1a:	4b62      	ldr	r3, [pc, #392]	; (8000da4 <HAL_GPIO_EXTI_Callback+0x1cc>)
 8000c1c:	801a      	strh	r2, [r3, #0]
				Data16_Temp[1] = Rxbuffer[4]<<8 | Rxbuffer[5];
 8000c1e:	4b5f      	ldr	r3, [pc, #380]	; (8000d9c <HAL_GPIO_EXTI_Callback+0x1c4>)
 8000c20:	791b      	ldrb	r3, [r3, #4]
 8000c22:	021b      	lsls	r3, r3, #8
 8000c24:	b21a      	sxth	r2, r3
 8000c26:	4b5d      	ldr	r3, [pc, #372]	; (8000d9c <HAL_GPIO_EXTI_Callback+0x1c4>)
 8000c28:	795b      	ldrb	r3, [r3, #5]
 8000c2a:	b21b      	sxth	r3, r3
 8000c2c:	4313      	orrs	r3, r2
 8000c2e:	b21b      	sxth	r3, r3
 8000c30:	b29a      	uxth	r2, r3
 8000c32:	4b5c      	ldr	r3, [pc, #368]	; (8000da4 <HAL_GPIO_EXTI_Callback+0x1cc>)
 8000c34:	805a      	strh	r2, [r3, #2]
				Data32_Temp = Data16_Temp[1]<<16 | Data16_Temp[0];
 8000c36:	4b5b      	ldr	r3, [pc, #364]	; (8000da4 <HAL_GPIO_EXTI_Callback+0x1cc>)
 8000c38:	885b      	ldrh	r3, [r3, #2]
 8000c3a:	041b      	lsls	r3, r3, #16
 8000c3c:	4a59      	ldr	r2, [pc, #356]	; (8000da4 <HAL_GPIO_EXTI_Callback+0x1cc>)
 8000c3e:	8812      	ldrh	r2, [r2, #0]
 8000c40:	4313      	orrs	r3, r2
 8000c42:	461a      	mov	r2, r3
 8000c44:	4b58      	ldr	r3, [pc, #352]	; (8000da8 <HAL_GPIO_EXTI_Callback+0x1d0>)
 8000c46:	601a      	str	r2, [r3, #0]
				Temp1 = unpack754_32(Data32_Temp);
 8000c48:	4b57      	ldr	r3, [pc, #348]	; (8000da8 <HAL_GPIO_EXTI_Callback+0x1d0>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	f003 fb1d 	bl	800428c <unpack754_32>
 8000c52:	4603      	mov	r3, r0
 8000c54:	4a55      	ldr	r2, [pc, #340]	; (8000dac <HAL_GPIO_EXTI_Callback+0x1d4>)
 8000c56:	6013      	str	r3, [r2, #0]
				Data16_Humi[0] = Rxbuffer[6]<<8 | Rxbuffer[7];
 8000c58:	4b50      	ldr	r3, [pc, #320]	; (8000d9c <HAL_GPIO_EXTI_Callback+0x1c4>)
 8000c5a:	799b      	ldrb	r3, [r3, #6]
 8000c5c:	021b      	lsls	r3, r3, #8
 8000c5e:	b21a      	sxth	r2, r3
 8000c60:	4b4e      	ldr	r3, [pc, #312]	; (8000d9c <HAL_GPIO_EXTI_Callback+0x1c4>)
 8000c62:	79db      	ldrb	r3, [r3, #7]
 8000c64:	b21b      	sxth	r3, r3
 8000c66:	4313      	orrs	r3, r2
 8000c68:	b21b      	sxth	r3, r3
 8000c6a:	b29a      	uxth	r2, r3
 8000c6c:	4b50      	ldr	r3, [pc, #320]	; (8000db0 <HAL_GPIO_EXTI_Callback+0x1d8>)
 8000c6e:	801a      	strh	r2, [r3, #0]
				Data16_Humi[1] = Rxbuffer[8]<<8 | Rxbuffer[9];
 8000c70:	4b4a      	ldr	r3, [pc, #296]	; (8000d9c <HAL_GPIO_EXTI_Callback+0x1c4>)
 8000c72:	7a1b      	ldrb	r3, [r3, #8]
 8000c74:	021b      	lsls	r3, r3, #8
 8000c76:	b21a      	sxth	r2, r3
 8000c78:	4b48      	ldr	r3, [pc, #288]	; (8000d9c <HAL_GPIO_EXTI_Callback+0x1c4>)
 8000c7a:	7a5b      	ldrb	r3, [r3, #9]
 8000c7c:	b21b      	sxth	r3, r3
 8000c7e:	4313      	orrs	r3, r2
 8000c80:	b21b      	sxth	r3, r3
 8000c82:	b29a      	uxth	r2, r3
 8000c84:	4b4a      	ldr	r3, [pc, #296]	; (8000db0 <HAL_GPIO_EXTI_Callback+0x1d8>)
 8000c86:	805a      	strh	r2, [r3, #2]
				Data32_Humi = Data16_Humi[1]<<16 | Data16_Humi[0];
 8000c88:	4b49      	ldr	r3, [pc, #292]	; (8000db0 <HAL_GPIO_EXTI_Callback+0x1d8>)
 8000c8a:	885b      	ldrh	r3, [r3, #2]
 8000c8c:	041b      	lsls	r3, r3, #16
 8000c8e:	4a48      	ldr	r2, [pc, #288]	; (8000db0 <HAL_GPIO_EXTI_Callback+0x1d8>)
 8000c90:	8812      	ldrh	r2, [r2, #0]
 8000c92:	4313      	orrs	r3, r2
 8000c94:	461a      	mov	r2, r3
 8000c96:	4b47      	ldr	r3, [pc, #284]	; (8000db4 <HAL_GPIO_EXTI_Callback+0x1dc>)
 8000c98:	601a      	str	r2, [r3, #0]
				Humi1 = unpack754_32(Data32_Humi);
 8000c9a:	4b46      	ldr	r3, [pc, #280]	; (8000db4 <HAL_GPIO_EXTI_Callback+0x1dc>)
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	f003 faf4 	bl	800428c <unpack754_32>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	4a44      	ldr	r2, [pc, #272]	; (8000db8 <HAL_GPIO_EXTI_Callback+0x1e0>)
 8000ca8:	6013      	str	r3, [r2, #0]
				sendDataToThingSpeak(Temp1, Humi1, 1);
 8000caa:	4b40      	ldr	r3, [pc, #256]	; (8000dac <HAL_GPIO_EXTI_Callback+0x1d4>)
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	4a42      	ldr	r2, [pc, #264]	; (8000db8 <HAL_GPIO_EXTI_Callback+0x1e0>)
 8000cb0:	6811      	ldr	r1, [r2, #0]
 8000cb2:	2201      	movs	r2, #1
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	f000 fb3f 	bl	8001338 <sendDataToThingSpeak>
			}
		}
		if(Rxbuffer[0] == 0x02)
 8000cba:	4b38      	ldr	r3, [pc, #224]	; (8000d9c <HAL_GPIO_EXTI_Callback+0x1c4>)
 8000cbc:	781b      	ldrb	r3, [r3, #0]
 8000cbe:	2b02      	cmp	r3, #2
 8000cc0:	d15d      	bne.n	8000d7e <HAL_GPIO_EXTI_Callback+0x1a6>
		{
			if (Rxbuffer[1] == 0x02)  // Temp
 8000cc2:	4b36      	ldr	r3, [pc, #216]	; (8000d9c <HAL_GPIO_EXTI_Callback+0x1c4>)
 8000cc4:	785b      	ldrb	r3, [r3, #1]
 8000cc6:	2b02      	cmp	r3, #2
 8000cc8:	d159      	bne.n	8000d7e <HAL_GPIO_EXTI_Callback+0x1a6>
			{
				Data16_Temp[0] = Rxbuffer[2]<<8 | Rxbuffer[3];
 8000cca:	4b34      	ldr	r3, [pc, #208]	; (8000d9c <HAL_GPIO_EXTI_Callback+0x1c4>)
 8000ccc:	789b      	ldrb	r3, [r3, #2]
 8000cce:	021b      	lsls	r3, r3, #8
 8000cd0:	b21a      	sxth	r2, r3
 8000cd2:	4b32      	ldr	r3, [pc, #200]	; (8000d9c <HAL_GPIO_EXTI_Callback+0x1c4>)
 8000cd4:	78db      	ldrb	r3, [r3, #3]
 8000cd6:	b21b      	sxth	r3, r3
 8000cd8:	4313      	orrs	r3, r2
 8000cda:	b21b      	sxth	r3, r3
 8000cdc:	b29a      	uxth	r2, r3
 8000cde:	4b31      	ldr	r3, [pc, #196]	; (8000da4 <HAL_GPIO_EXTI_Callback+0x1cc>)
 8000ce0:	801a      	strh	r2, [r3, #0]
				Data16_Temp[1] = Rxbuffer[4]<<8 | Rxbuffer[5];
 8000ce2:	4b2e      	ldr	r3, [pc, #184]	; (8000d9c <HAL_GPIO_EXTI_Callback+0x1c4>)
 8000ce4:	791b      	ldrb	r3, [r3, #4]
 8000ce6:	021b      	lsls	r3, r3, #8
 8000ce8:	b21a      	sxth	r2, r3
 8000cea:	4b2c      	ldr	r3, [pc, #176]	; (8000d9c <HAL_GPIO_EXTI_Callback+0x1c4>)
 8000cec:	795b      	ldrb	r3, [r3, #5]
 8000cee:	b21b      	sxth	r3, r3
 8000cf0:	4313      	orrs	r3, r2
 8000cf2:	b21b      	sxth	r3, r3
 8000cf4:	b29a      	uxth	r2, r3
 8000cf6:	4b2b      	ldr	r3, [pc, #172]	; (8000da4 <HAL_GPIO_EXTI_Callback+0x1cc>)
 8000cf8:	805a      	strh	r2, [r3, #2]
				Data32_Temp = Data16_Temp[1]<<16 | Data16_Temp[0];
 8000cfa:	4b2a      	ldr	r3, [pc, #168]	; (8000da4 <HAL_GPIO_EXTI_Callback+0x1cc>)
 8000cfc:	885b      	ldrh	r3, [r3, #2]
 8000cfe:	041b      	lsls	r3, r3, #16
 8000d00:	4a28      	ldr	r2, [pc, #160]	; (8000da4 <HAL_GPIO_EXTI_Callback+0x1cc>)
 8000d02:	8812      	ldrh	r2, [r2, #0]
 8000d04:	4313      	orrs	r3, r2
 8000d06:	461a      	mov	r2, r3
 8000d08:	4b27      	ldr	r3, [pc, #156]	; (8000da8 <HAL_GPIO_EXTI_Callback+0x1d0>)
 8000d0a:	601a      	str	r2, [r3, #0]
				Temp2 = unpack754_32(Data32_Temp);
 8000d0c:	4b26      	ldr	r3, [pc, #152]	; (8000da8 <HAL_GPIO_EXTI_Callback+0x1d0>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	4618      	mov	r0, r3
 8000d12:	f003 fabb 	bl	800428c <unpack754_32>
 8000d16:	4603      	mov	r3, r0
 8000d18:	4a28      	ldr	r2, [pc, #160]	; (8000dbc <HAL_GPIO_EXTI_Callback+0x1e4>)
 8000d1a:	6013      	str	r3, [r2, #0]
				Data16_Humi[0] = Rxbuffer[6]<<8 | Rxbuffer[7];
 8000d1c:	4b1f      	ldr	r3, [pc, #124]	; (8000d9c <HAL_GPIO_EXTI_Callback+0x1c4>)
 8000d1e:	799b      	ldrb	r3, [r3, #6]
 8000d20:	021b      	lsls	r3, r3, #8
 8000d22:	b21a      	sxth	r2, r3
 8000d24:	4b1d      	ldr	r3, [pc, #116]	; (8000d9c <HAL_GPIO_EXTI_Callback+0x1c4>)
 8000d26:	79db      	ldrb	r3, [r3, #7]
 8000d28:	b21b      	sxth	r3, r3
 8000d2a:	4313      	orrs	r3, r2
 8000d2c:	b21b      	sxth	r3, r3
 8000d2e:	b29a      	uxth	r2, r3
 8000d30:	4b1f      	ldr	r3, [pc, #124]	; (8000db0 <HAL_GPIO_EXTI_Callback+0x1d8>)
 8000d32:	801a      	strh	r2, [r3, #0]
				Data16_Humi[1] = Rxbuffer[8]<<8 | Rxbuffer[9];
 8000d34:	4b19      	ldr	r3, [pc, #100]	; (8000d9c <HAL_GPIO_EXTI_Callback+0x1c4>)
 8000d36:	7a1b      	ldrb	r3, [r3, #8]
 8000d38:	021b      	lsls	r3, r3, #8
 8000d3a:	b21a      	sxth	r2, r3
 8000d3c:	4b17      	ldr	r3, [pc, #92]	; (8000d9c <HAL_GPIO_EXTI_Callback+0x1c4>)
 8000d3e:	7a5b      	ldrb	r3, [r3, #9]
 8000d40:	b21b      	sxth	r3, r3
 8000d42:	4313      	orrs	r3, r2
 8000d44:	b21b      	sxth	r3, r3
 8000d46:	b29a      	uxth	r2, r3
 8000d48:	4b19      	ldr	r3, [pc, #100]	; (8000db0 <HAL_GPIO_EXTI_Callback+0x1d8>)
 8000d4a:	805a      	strh	r2, [r3, #2]
				Data32_Humi = Data16_Humi[1]<<16 | Data16_Humi[0];
 8000d4c:	4b18      	ldr	r3, [pc, #96]	; (8000db0 <HAL_GPIO_EXTI_Callback+0x1d8>)
 8000d4e:	885b      	ldrh	r3, [r3, #2]
 8000d50:	041b      	lsls	r3, r3, #16
 8000d52:	4a17      	ldr	r2, [pc, #92]	; (8000db0 <HAL_GPIO_EXTI_Callback+0x1d8>)
 8000d54:	8812      	ldrh	r2, [r2, #0]
 8000d56:	4313      	orrs	r3, r2
 8000d58:	461a      	mov	r2, r3
 8000d5a:	4b16      	ldr	r3, [pc, #88]	; (8000db4 <HAL_GPIO_EXTI_Callback+0x1dc>)
 8000d5c:	601a      	str	r2, [r3, #0]
				Humi2 = unpack754_32(Data32_Humi);
 8000d5e:	4b15      	ldr	r3, [pc, #84]	; (8000db4 <HAL_GPIO_EXTI_Callback+0x1dc>)
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	4618      	mov	r0, r3
 8000d64:	f003 fa92 	bl	800428c <unpack754_32>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	4a15      	ldr	r2, [pc, #84]	; (8000dc0 <HAL_GPIO_EXTI_Callback+0x1e8>)
 8000d6c:	6013      	str	r3, [r2, #0]
				sendDataToThingSpeak(Temp2, Humi2, 3);
 8000d6e:	4b13      	ldr	r3, [pc, #76]	; (8000dbc <HAL_GPIO_EXTI_Callback+0x1e4>)
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	4a13      	ldr	r2, [pc, #76]	; (8000dc0 <HAL_GPIO_EXTI_Callback+0x1e8>)
 8000d74:	6811      	ldr	r1, [r2, #0]
 8000d76:	2203      	movs	r2, #3
 8000d78:	4618      	mov	r0, r3
 8000d7a:	f000 fadd 	bl	8001338 <sendDataToThingSpeak>
			}
		}
	}
	if (GPIO_Pin == GPIO_PIN_4)
 8000d7e:	88fb      	ldrh	r3, [r7, #6]
 8000d80:	2b10      	cmp	r3, #16
 8000d82:	d106      	bne.n	8000d92 <HAL_GPIO_EXTI_Callback+0x1ba>
	{
		a = 1 - a;
 8000d84:	4b0f      	ldr	r3, [pc, #60]	; (8000dc4 <HAL_GPIO_EXTI_Callback+0x1ec>)
 8000d86:	781b      	ldrb	r3, [r3, #0]
 8000d88:	f1c3 0301 	rsb	r3, r3, #1
 8000d8c:	b2da      	uxtb	r2, r3
 8000d8e:	4b0d      	ldr	r3, [pc, #52]	; (8000dc4 <HAL_GPIO_EXTI_Callback+0x1ec>)
 8000d90:	701a      	strb	r2, [r3, #0]
	}


}
 8000d92:	bf00      	nop
 8000d94:	3708      	adds	r7, #8
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	20000328 	.word	0x20000328
 8000da0:	200002f8 	.word	0x200002f8
 8000da4:	20000338 	.word	0x20000338
 8000da8:	20000340 	.word	0x20000340
 8000dac:	20000348 	.word	0x20000348
 8000db0:	20000334 	.word	0x20000334
 8000db4:	2000033c 	.word	0x2000033c
 8000db8:	20000344 	.word	0x20000344
 8000dbc:	20000350 	.word	0x20000350
 8000dc0:	2000034c 	.word	0x2000034c
 8000dc4:	20000324 	.word	0x20000324

08000dc8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b084      	sub	sp, #16
 8000dcc:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000dce:	f000 fdd3 	bl	8001978 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000dd2:	f000 f8b9 	bl	8000f48 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000dd6:	f000 f989 	bl	80010ec <MX_GPIO_Init>
  MX_SPI1_Init();
 8000dda:	f000 f8f1 	bl	8000fc0 <MX_SPI1_Init>
  MX_SPI2_Init();
 8000dde:	f000 f925 	bl	800102c <MX_SPI2_Init>
  MX_USART2_UART_Init();
 8000de2:	f000 f959 	bl	8001098 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  configureGPRS();
 8000de6:	f000 fa5b 	bl	80012a0 <configureGPRS>
  Lora_setup();
 8000dea:	f000 fa1b 	bl	8001224 <Lora_setup>
  LoRa_init(&myLoRa);
 8000dee:	484a      	ldr	r0, [pc, #296]	; (8000f18 <main+0x150>)
 8000df0:	f002 ff4c 	bl	8003c8c <LoRa_init>
  LoRa_startReceiving(&myLoRa);
 8000df4:	4848      	ldr	r0, [pc, #288]	; (8000f18 <main+0x150>)
 8000df6:	f002 fedd 	bl	8003bb4 <LoRa_startReceiving>
  ST7735_Init();
 8000dfa:	f003 fa23 	bl	8004244 <ST7735_Init>
  ST7735_FillScreen(ST7735_WHITE);
 8000dfe:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000e02:	f003 fa0d 	bl	8004220 <ST7735_FillScreen>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if (a == 1)
 8000e06:	4b45      	ldr	r3, [pc, #276]	; (8000f1c <main+0x154>)
 8000e08:	781b      	ldrb	r3, [r3, #0]
 8000e0a:	2b01      	cmp	r3, #1
 8000e0c:	d13f      	bne.n	8000e8e <main+0xc6>
	  {
		  	ST7735_WriteString(20, 0,"Station 1" , Font_11x18, ST7735_BLACK, ST7735_WHITE);
 8000e0e:	4b44      	ldr	r3, [pc, #272]	; (8000f20 <main+0x158>)
 8000e10:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e14:	9202      	str	r2, [sp, #8]
 8000e16:	2200      	movs	r2, #0
 8000e18:	9201      	str	r2, [sp, #4]
 8000e1a:	685a      	ldr	r2, [r3, #4]
 8000e1c:	9200      	str	r2, [sp, #0]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	4a40      	ldr	r2, [pc, #256]	; (8000f24 <main+0x15c>)
 8000e22:	2100      	movs	r1, #0
 8000e24:	2014      	movs	r0, #20
 8000e26:	f003 f935 	bl	8004094 <ST7735_WriteString>
		  	sprintf(lcd_Send,"Temp:%.2f oC",Temp1);
 8000e2a:	4b3f      	ldr	r3, [pc, #252]	; (8000f28 <main+0x160>)
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	4618      	mov	r0, r3
 8000e30:	f7ff fafa 	bl	8000428 <__aeabi_f2d>
 8000e34:	4602      	mov	r2, r0
 8000e36:	460b      	mov	r3, r1
 8000e38:	493c      	ldr	r1, [pc, #240]	; (8000f2c <main+0x164>)
 8000e3a:	483d      	ldr	r0, [pc, #244]	; (8000f30 <main+0x168>)
 8000e3c:	f004 f922 	bl	8005084 <siprintf>
		  	ST7735_WriteString(0, 30,lcd_Send , Font_11x18, ST7735_BLACK, ST7735_WHITE);
 8000e40:	4b37      	ldr	r3, [pc, #220]	; (8000f20 <main+0x158>)
 8000e42:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e46:	9202      	str	r2, [sp, #8]
 8000e48:	2200      	movs	r2, #0
 8000e4a:	9201      	str	r2, [sp, #4]
 8000e4c:	685a      	ldr	r2, [r3, #4]
 8000e4e:	9200      	str	r2, [sp, #0]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	4a37      	ldr	r2, [pc, #220]	; (8000f30 <main+0x168>)
 8000e54:	211e      	movs	r1, #30
 8000e56:	2000      	movs	r0, #0
 8000e58:	f003 f91c 	bl	8004094 <ST7735_WriteString>
		  	sprintf(lcd_Send,"Humi:%.2f ppm",Humi1);
 8000e5c:	4b35      	ldr	r3, [pc, #212]	; (8000f34 <main+0x16c>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	4618      	mov	r0, r3
 8000e62:	f7ff fae1 	bl	8000428 <__aeabi_f2d>
 8000e66:	4602      	mov	r2, r0
 8000e68:	460b      	mov	r3, r1
 8000e6a:	4933      	ldr	r1, [pc, #204]	; (8000f38 <main+0x170>)
 8000e6c:	4830      	ldr	r0, [pc, #192]	; (8000f30 <main+0x168>)
 8000e6e:	f004 f909 	bl	8005084 <siprintf>
		  	ST7735_WriteString(0, 60,lcd_Send , Font_11x18, ST7735_BLACK, ST7735_WHITE);
 8000e72:	4b2b      	ldr	r3, [pc, #172]	; (8000f20 <main+0x158>)
 8000e74:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e78:	9202      	str	r2, [sp, #8]
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	9201      	str	r2, [sp, #4]
 8000e7e:	685a      	ldr	r2, [r3, #4]
 8000e80:	9200      	str	r2, [sp, #0]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	4a2a      	ldr	r2, [pc, #168]	; (8000f30 <main+0x168>)
 8000e86:	213c      	movs	r1, #60	; 0x3c
 8000e88:	2000      	movs	r0, #0
 8000e8a:	f003 f903 	bl	8004094 <ST7735_WriteString>
	  }
	  if (a == 0)
 8000e8e:	4b23      	ldr	r3, [pc, #140]	; (8000f1c <main+0x154>)
 8000e90:	781b      	ldrb	r3, [r3, #0]
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d1b7      	bne.n	8000e06 <main+0x3e>
	  {
		  	ST7735_WriteString(20, 0,"Station 2" , Font_11x18, ST7735_BLACK, ST7735_WHITE);
 8000e96:	4b22      	ldr	r3, [pc, #136]	; (8000f20 <main+0x158>)
 8000e98:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e9c:	9202      	str	r2, [sp, #8]
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	9201      	str	r2, [sp, #4]
 8000ea2:	685a      	ldr	r2, [r3, #4]
 8000ea4:	9200      	str	r2, [sp, #0]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	4a24      	ldr	r2, [pc, #144]	; (8000f3c <main+0x174>)
 8000eaa:	2100      	movs	r1, #0
 8000eac:	2014      	movs	r0, #20
 8000eae:	f003 f8f1 	bl	8004094 <ST7735_WriteString>
		  	sprintf(lcd_Send,"Temp:%.2f oC",Temp2);
 8000eb2:	4b23      	ldr	r3, [pc, #140]	; (8000f40 <main+0x178>)
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	f7ff fab6 	bl	8000428 <__aeabi_f2d>
 8000ebc:	4602      	mov	r2, r0
 8000ebe:	460b      	mov	r3, r1
 8000ec0:	491a      	ldr	r1, [pc, #104]	; (8000f2c <main+0x164>)
 8000ec2:	481b      	ldr	r0, [pc, #108]	; (8000f30 <main+0x168>)
 8000ec4:	f004 f8de 	bl	8005084 <siprintf>
		  	ST7735_WriteString(0, 30,lcd_Send , Font_11x18, ST7735_BLACK, ST7735_WHITE);
 8000ec8:	4b15      	ldr	r3, [pc, #84]	; (8000f20 <main+0x158>)
 8000eca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000ece:	9202      	str	r2, [sp, #8]
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	9201      	str	r2, [sp, #4]
 8000ed4:	685a      	ldr	r2, [r3, #4]
 8000ed6:	9200      	str	r2, [sp, #0]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	4a15      	ldr	r2, [pc, #84]	; (8000f30 <main+0x168>)
 8000edc:	211e      	movs	r1, #30
 8000ede:	2000      	movs	r0, #0
 8000ee0:	f003 f8d8 	bl	8004094 <ST7735_WriteString>
		  	sprintf(lcd_Send,"Humi:%.2f ppm",Humi2);
 8000ee4:	4b17      	ldr	r3, [pc, #92]	; (8000f44 <main+0x17c>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	4618      	mov	r0, r3
 8000eea:	f7ff fa9d 	bl	8000428 <__aeabi_f2d>
 8000eee:	4602      	mov	r2, r0
 8000ef0:	460b      	mov	r3, r1
 8000ef2:	4911      	ldr	r1, [pc, #68]	; (8000f38 <main+0x170>)
 8000ef4:	480e      	ldr	r0, [pc, #56]	; (8000f30 <main+0x168>)
 8000ef6:	f004 f8c5 	bl	8005084 <siprintf>
		  	ST7735_WriteString(0, 60,lcd_Send , Font_11x18, ST7735_BLACK, ST7735_WHITE);
 8000efa:	4b09      	ldr	r3, [pc, #36]	; (8000f20 <main+0x158>)
 8000efc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000f00:	9202      	str	r2, [sp, #8]
 8000f02:	2200      	movs	r2, #0
 8000f04:	9201      	str	r2, [sp, #4]
 8000f06:	685a      	ldr	r2, [r3, #4]
 8000f08:	9200      	str	r2, [sp, #0]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	4a08      	ldr	r2, [pc, #32]	; (8000f30 <main+0x168>)
 8000f0e:	213c      	movs	r1, #60	; 0x3c
 8000f10:	2000      	movs	r0, #0
 8000f12:	f003 f8bf 	bl	8004094 <ST7735_WriteString>
	  if (a == 1)
 8000f16:	e776      	b.n	8000e06 <main+0x3e>
 8000f18:	200002f8 	.word	0x200002f8
 8000f1c:	20000324 	.word	0x20000324
 8000f20:	2000000c 	.word	0x2000000c
 8000f24:	08008c38 	.word	0x08008c38
 8000f28:	20000348 	.word	0x20000348
 8000f2c:	08008c44 	.word	0x08008c44
 8000f30:	20000354 	.word	0x20000354
 8000f34:	20000344 	.word	0x20000344
 8000f38:	08008c54 	.word	0x08008c54
 8000f3c:	08008c64 	.word	0x08008c64
 8000f40:	20000350 	.word	0x20000350
 8000f44:	2000034c 	.word	0x2000034c

08000f48 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b090      	sub	sp, #64	; 0x40
 8000f4c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f4e:	f107 0318 	add.w	r3, r7, #24
 8000f52:	2228      	movs	r2, #40	; 0x28
 8000f54:	2100      	movs	r1, #0
 8000f56:	4618      	mov	r0, r3
 8000f58:	f003 fa1a 	bl	8004390 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f5c:	1d3b      	adds	r3, r7, #4
 8000f5e:	2200      	movs	r2, #0
 8000f60:	601a      	str	r2, [r3, #0]
 8000f62:	605a      	str	r2, [r3, #4]
 8000f64:	609a      	str	r2, [r3, #8]
 8000f66:	60da      	str	r2, [r3, #12]
 8000f68:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f6a:	2302      	movs	r3, #2
 8000f6c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f6e:	2301      	movs	r3, #1
 8000f70:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f72:	2310      	movs	r3, #16
 8000f74:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000f76:	2300      	movs	r3, #0
 8000f78:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f7a:	f107 0318 	add.w	r3, r7, #24
 8000f7e:	4618      	mov	r0, r3
 8000f80:	f001 f842 	bl	8002008 <HAL_RCC_OscConfig>
 8000f84:	4603      	mov	r3, r0
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d001      	beq.n	8000f8e <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000f8a:	f000 fac3 	bl	8001514 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f8e:	230f      	movs	r3, #15
 8000f90:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000f92:	2300      	movs	r3, #0
 8000f94:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f96:	2300      	movs	r3, #0
 8000f98:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000fa2:	1d3b      	adds	r3, r7, #4
 8000fa4:	2100      	movs	r1, #0
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	f001 fab0 	bl	800250c <HAL_RCC_ClockConfig>
 8000fac:	4603      	mov	r3, r0
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d001      	beq.n	8000fb6 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000fb2:	f000 faaf 	bl	8001514 <Error_Handler>
  }
}
 8000fb6:	bf00      	nop
 8000fb8:	3740      	adds	r7, #64	; 0x40
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}
	...

08000fc0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000fc4:	4b17      	ldr	r3, [pc, #92]	; (8001024 <MX_SPI1_Init+0x64>)
 8000fc6:	4a18      	ldr	r2, [pc, #96]	; (8001028 <MX_SPI1_Init+0x68>)
 8000fc8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000fca:	4b16      	ldr	r3, [pc, #88]	; (8001024 <MX_SPI1_Init+0x64>)
 8000fcc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000fd0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000fd2:	4b14      	ldr	r3, [pc, #80]	; (8001024 <MX_SPI1_Init+0x64>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000fd8:	4b12      	ldr	r3, [pc, #72]	; (8001024 <MX_SPI1_Init+0x64>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000fde:	4b11      	ldr	r3, [pc, #68]	; (8001024 <MX_SPI1_Init+0x64>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000fe4:	4b0f      	ldr	r3, [pc, #60]	; (8001024 <MX_SPI1_Init+0x64>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000fea:	4b0e      	ldr	r3, [pc, #56]	; (8001024 <MX_SPI1_Init+0x64>)
 8000fec:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ff0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000ff2:	4b0c      	ldr	r3, [pc, #48]	; (8001024 <MX_SPI1_Init+0x64>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000ff8:	4b0a      	ldr	r3, [pc, #40]	; (8001024 <MX_SPI1_Init+0x64>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ffe:	4b09      	ldr	r3, [pc, #36]	; (8001024 <MX_SPI1_Init+0x64>)
 8001000:	2200      	movs	r2, #0
 8001002:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001004:	4b07      	ldr	r3, [pc, #28]	; (8001024 <MX_SPI1_Init+0x64>)
 8001006:	2200      	movs	r2, #0
 8001008:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800100a:	4b06      	ldr	r3, [pc, #24]	; (8001024 <MX_SPI1_Init+0x64>)
 800100c:	220a      	movs	r2, #10
 800100e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001010:	4804      	ldr	r0, [pc, #16]	; (8001024 <MX_SPI1_Init+0x64>)
 8001012:	f001 fc13 	bl	800283c <HAL_SPI_Init>
 8001016:	4603      	mov	r3, r0
 8001018:	2b00      	cmp	r3, #0
 800101a:	d001      	beq.n	8001020 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800101c:	f000 fa7a 	bl	8001514 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001020:	bf00      	nop
 8001022:	bd80      	pop	{r7, pc}
 8001024:	20000204 	.word	0x20000204
 8001028:	40013000 	.word	0x40013000

0800102c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001030:	4b17      	ldr	r3, [pc, #92]	; (8001090 <MX_SPI2_Init+0x64>)
 8001032:	4a18      	ldr	r2, [pc, #96]	; (8001094 <MX_SPI2_Init+0x68>)
 8001034:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001036:	4b16      	ldr	r3, [pc, #88]	; (8001090 <MX_SPI2_Init+0x64>)
 8001038:	f44f 7282 	mov.w	r2, #260	; 0x104
 800103c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800103e:	4b14      	ldr	r3, [pc, #80]	; (8001090 <MX_SPI2_Init+0x64>)
 8001040:	2200      	movs	r2, #0
 8001042:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001044:	4b12      	ldr	r3, [pc, #72]	; (8001090 <MX_SPI2_Init+0x64>)
 8001046:	2200      	movs	r2, #0
 8001048:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800104a:	4b11      	ldr	r3, [pc, #68]	; (8001090 <MX_SPI2_Init+0x64>)
 800104c:	2200      	movs	r2, #0
 800104e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001050:	4b0f      	ldr	r3, [pc, #60]	; (8001090 <MX_SPI2_Init+0x64>)
 8001052:	2200      	movs	r2, #0
 8001054:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001056:	4b0e      	ldr	r3, [pc, #56]	; (8001090 <MX_SPI2_Init+0x64>)
 8001058:	f44f 7200 	mov.w	r2, #512	; 0x200
 800105c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800105e:	4b0c      	ldr	r3, [pc, #48]	; (8001090 <MX_SPI2_Init+0x64>)
 8001060:	2200      	movs	r2, #0
 8001062:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001064:	4b0a      	ldr	r3, [pc, #40]	; (8001090 <MX_SPI2_Init+0x64>)
 8001066:	2200      	movs	r2, #0
 8001068:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800106a:	4b09      	ldr	r3, [pc, #36]	; (8001090 <MX_SPI2_Init+0x64>)
 800106c:	2200      	movs	r2, #0
 800106e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001070:	4b07      	ldr	r3, [pc, #28]	; (8001090 <MX_SPI2_Init+0x64>)
 8001072:	2200      	movs	r2, #0
 8001074:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001076:	4b06      	ldr	r3, [pc, #24]	; (8001090 <MX_SPI2_Init+0x64>)
 8001078:	220a      	movs	r2, #10
 800107a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800107c:	4804      	ldr	r0, [pc, #16]	; (8001090 <MX_SPI2_Init+0x64>)
 800107e:	f001 fbdd 	bl	800283c <HAL_SPI_Init>
 8001082:	4603      	mov	r3, r0
 8001084:	2b00      	cmp	r3, #0
 8001086:	d001      	beq.n	800108c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001088:	f000 fa44 	bl	8001514 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800108c:	bf00      	nop
 800108e:	bd80      	pop	{r7, pc}
 8001090:	2000025c 	.word	0x2000025c
 8001094:	40003800 	.word	0x40003800

08001098 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800109c:	4b11      	ldr	r3, [pc, #68]	; (80010e4 <MX_USART2_UART_Init+0x4c>)
 800109e:	4a12      	ldr	r2, [pc, #72]	; (80010e8 <MX_USART2_UART_Init+0x50>)
 80010a0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80010a2:	4b10      	ldr	r3, [pc, #64]	; (80010e4 <MX_USART2_UART_Init+0x4c>)
 80010a4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80010a8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80010aa:	4b0e      	ldr	r3, [pc, #56]	; (80010e4 <MX_USART2_UART_Init+0x4c>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80010b0:	4b0c      	ldr	r3, [pc, #48]	; (80010e4 <MX_USART2_UART_Init+0x4c>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80010b6:	4b0b      	ldr	r3, [pc, #44]	; (80010e4 <MX_USART2_UART_Init+0x4c>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80010bc:	4b09      	ldr	r3, [pc, #36]	; (80010e4 <MX_USART2_UART_Init+0x4c>)
 80010be:	220c      	movs	r2, #12
 80010c0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010c2:	4b08      	ldr	r3, [pc, #32]	; (80010e4 <MX_USART2_UART_Init+0x4c>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80010c8:	4b06      	ldr	r3, [pc, #24]	; (80010e4 <MX_USART2_UART_Init+0x4c>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80010ce:	4805      	ldr	r0, [pc, #20]	; (80010e4 <MX_USART2_UART_Init+0x4c>)
 80010d0:	f002 f92c 	bl	800332c <HAL_UART_Init>
 80010d4:	4603      	mov	r3, r0
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d001      	beq.n	80010de <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80010da:	f000 fa1b 	bl	8001514 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80010de:	bf00      	nop
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	200002b4 	.word	0x200002b4
 80010e8:	40004400 	.word	0x40004400

080010ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b086      	sub	sp, #24
 80010f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010f2:	f107 0308 	add.w	r3, r7, #8
 80010f6:	2200      	movs	r2, #0
 80010f8:	601a      	str	r2, [r3, #0]
 80010fa:	605a      	str	r2, [r3, #4]
 80010fc:	609a      	str	r2, [r3, #8]
 80010fe:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001100:	4b43      	ldr	r3, [pc, #268]	; (8001210 <MX_GPIO_Init+0x124>)
 8001102:	699b      	ldr	r3, [r3, #24]
 8001104:	4a42      	ldr	r2, [pc, #264]	; (8001210 <MX_GPIO_Init+0x124>)
 8001106:	f043 0304 	orr.w	r3, r3, #4
 800110a:	6193      	str	r3, [r2, #24]
 800110c:	4b40      	ldr	r3, [pc, #256]	; (8001210 <MX_GPIO_Init+0x124>)
 800110e:	699b      	ldr	r3, [r3, #24]
 8001110:	f003 0304 	and.w	r3, r3, #4
 8001114:	607b      	str	r3, [r7, #4]
 8001116:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001118:	4b3d      	ldr	r3, [pc, #244]	; (8001210 <MX_GPIO_Init+0x124>)
 800111a:	699b      	ldr	r3, [r3, #24]
 800111c:	4a3c      	ldr	r2, [pc, #240]	; (8001210 <MX_GPIO_Init+0x124>)
 800111e:	f043 0308 	orr.w	r3, r3, #8
 8001122:	6193      	str	r3, [r2, #24]
 8001124:	4b3a      	ldr	r3, [pc, #232]	; (8001210 <MX_GPIO_Init+0x124>)
 8001126:	699b      	ldr	r3, [r3, #24]
 8001128:	f003 0308 	and.w	r3, r3, #8
 800112c:	603b      	str	r3, [r7, #0]
 800112e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, NSS_Pin|RST_Pin, GPIO_PIN_SET);
 8001130:	2201      	movs	r2, #1
 8001132:	f240 4101 	movw	r1, #1025	; 0x401
 8001136:	4837      	ldr	r0, [pc, #220]	; (8001214 <MX_GPIO_Init+0x128>)
 8001138:	f000 ff36 	bl	8001fa8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_5, GPIO_PIN_RESET);
 800113c:	2200      	movs	r2, #0
 800113e:	f44f 5181 	mov.w	r1, #4128	; 0x1020
 8001142:	4834      	ldr	r0, [pc, #208]	; (8001214 <MX_GPIO_Init+0x128>)
 8001144:	f000 ff30 	bl	8001fa8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11, GPIO_PIN_RESET);
 8001148:	2200      	movs	r2, #0
 800114a:	f44f 6170 	mov.w	r1, #3840	; 0xf00
 800114e:	4832      	ldr	r0, [pc, #200]	; (8001218 <MX_GPIO_Init+0x12c>)
 8001150:	f000 ff2a 	bl	8001fa8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : NSS_Pin RST_Pin PB12 PB5 */
  GPIO_InitStruct.Pin = NSS_Pin|RST_Pin|GPIO_PIN_12|GPIO_PIN_5;
 8001154:	f241 4321 	movw	r3, #5153	; 0x1421
 8001158:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800115a:	2301      	movs	r3, #1
 800115c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800115e:	2300      	movs	r3, #0
 8001160:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001162:	2302      	movs	r3, #2
 8001164:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001166:	f107 0308 	add.w	r3, r7, #8
 800116a:	4619      	mov	r1, r3
 800116c:	4829      	ldr	r0, [pc, #164]	; (8001214 <MX_GPIO_Init+0x128>)
 800116e:	f000 fd97 	bl	8001ca0 <HAL_GPIO_Init>

  /*Configure GPIO pin : DIO0_Pin */
  GPIO_InitStruct.Pin = DIO0_Pin;
 8001172:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001176:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001178:	4b28      	ldr	r3, [pc, #160]	; (800121c <MX_GPIO_Init+0x130>)
 800117a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800117c:	2300      	movs	r3, #0
 800117e:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(DIO0_GPIO_Port, &GPIO_InitStruct);
 8001180:	f107 0308 	add.w	r3, r7, #8
 8001184:	4619      	mov	r1, r3
 8001186:	4823      	ldr	r0, [pc, #140]	; (8001214 <MX_GPIO_Init+0x128>)
 8001188:	f000 fd8a 	bl	8001ca0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 PA10 PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 800118c:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8001190:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001192:	2301      	movs	r3, #1
 8001194:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001196:	2300      	movs	r3, #0
 8001198:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800119a:	2302      	movs	r3, #2
 800119c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800119e:	f107 0308 	add.w	r3, r7, #8
 80011a2:	4619      	mov	r1, r3
 80011a4:	481c      	ldr	r0, [pc, #112]	; (8001218 <MX_GPIO_Init+0x12c>)
 80011a6:	f000 fd7b 	bl	8001ca0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 80011aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011ae:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011b0:	2303      	movs	r3, #3
 80011b2:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011b4:	f107 0308 	add.w	r3, r7, #8
 80011b8:	4619      	mov	r1, r3
 80011ba:	4817      	ldr	r0, [pc, #92]	; (8001218 <MX_GPIO_Init+0x12c>)
 80011bc:	f000 fd70 	bl	8001ca0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 80011c0:	2318      	movs	r3, #24
 80011c2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80011c4:	4b16      	ldr	r3, [pc, #88]	; (8001220 <MX_GPIO_Init+0x134>)
 80011c6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c8:	2300      	movs	r3, #0
 80011ca:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011cc:	f107 0308 	add.w	r3, r7, #8
 80011d0:	4619      	mov	r1, r3
 80011d2:	4810      	ldr	r0, [pc, #64]	; (8001214 <MX_GPIO_Init+0x128>)
 80011d4:	f000 fd64 	bl	8001ca0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 6, 0);
 80011d8:	2200      	movs	r2, #0
 80011da:	2106      	movs	r1, #6
 80011dc:	2009      	movs	r0, #9
 80011de:	f000 fd28 	bl	8001c32 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80011e2:	2009      	movs	r0, #9
 80011e4:	f000 fd41 	bl	8001c6a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 6, 0);
 80011e8:	2200      	movs	r2, #0
 80011ea:	2106      	movs	r1, #6
 80011ec:	200a      	movs	r0, #10
 80011ee:	f000 fd20 	bl	8001c32 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80011f2:	200a      	movs	r0, #10
 80011f4:	f000 fd39 	bl	8001c6a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80011f8:	2200      	movs	r2, #0
 80011fa:	2105      	movs	r1, #5
 80011fc:	2028      	movs	r0, #40	; 0x28
 80011fe:	f000 fd18 	bl	8001c32 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001202:	2028      	movs	r0, #40	; 0x28
 8001204:	f000 fd31 	bl	8001c6a <HAL_NVIC_EnableIRQ>

}
 8001208:	bf00      	nop
 800120a:	3718      	adds	r7, #24
 800120c:	46bd      	mov	sp, r7
 800120e:	bd80      	pop	{r7, pc}
 8001210:	40021000 	.word	0x40021000
 8001214:	40010c00 	.word	0x40010c00
 8001218:	40010800 	.word	0x40010800
 800121c:	10110000 	.word	0x10110000
 8001220:	10210000 	.word	0x10210000

08001224 <Lora_setup>:

/* USER CODE BEGIN 4 */
void Lora_setup(void)
{
 8001224:	b480      	push	{r7}
 8001226:	af00      	add	r7, sp, #0
	  myLoRa.CS_port         = NSS_GPIO_Port;
 8001228:	4b1a      	ldr	r3, [pc, #104]	; (8001294 <Lora_setup+0x70>)
 800122a:	4a1b      	ldr	r2, [pc, #108]	; (8001298 <Lora_setup+0x74>)
 800122c:	601a      	str	r2, [r3, #0]
	  myLoRa.CS_pin          = NSS_Pin;
 800122e:	4b19      	ldr	r3, [pc, #100]	; (8001294 <Lora_setup+0x70>)
 8001230:	2201      	movs	r2, #1
 8001232:	809a      	strh	r2, [r3, #4]
	  myLoRa.reset_port      = RST_GPIO_Port;
 8001234:	4b17      	ldr	r3, [pc, #92]	; (8001294 <Lora_setup+0x70>)
 8001236:	4a18      	ldr	r2, [pc, #96]	; (8001298 <Lora_setup+0x74>)
 8001238:	609a      	str	r2, [r3, #8]
	  myLoRa.reset_pin       = RST_Pin;
 800123a:	4b16      	ldr	r3, [pc, #88]	; (8001294 <Lora_setup+0x70>)
 800123c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001240:	819a      	strh	r2, [r3, #12]
	  myLoRa.DIO0_port       = DIO0_GPIO_Port;
 8001242:	4b14      	ldr	r3, [pc, #80]	; (8001294 <Lora_setup+0x70>)
 8001244:	4a14      	ldr	r2, [pc, #80]	; (8001298 <Lora_setup+0x74>)
 8001246:	611a      	str	r2, [r3, #16]
	  myLoRa.DIO0_pin        = DIO0_Pin;
 8001248:	4b12      	ldr	r3, [pc, #72]	; (8001294 <Lora_setup+0x70>)
 800124a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800124e:	829a      	strh	r2, [r3, #20]
	  myLoRa.hSPIx           = &hspi1;
 8001250:	4b10      	ldr	r3, [pc, #64]	; (8001294 <Lora_setup+0x70>)
 8001252:	4a12      	ldr	r2, [pc, #72]	; (800129c <Lora_setup+0x78>)
 8001254:	619a      	str	r2, [r3, #24]
	  myLoRa.frequency             = 433       ;
 8001256:	4b0f      	ldr	r3, [pc, #60]	; (8001294 <Lora_setup+0x70>)
 8001258:	f240 12b1 	movw	r2, #433	; 0x1b1
 800125c:	621a      	str	r2, [r3, #32]
	  myLoRa.spredingFactor        = SF_7      ;
 800125e:	4b0d      	ldr	r3, [pc, #52]	; (8001294 <Lora_setup+0x70>)
 8001260:	2207      	movs	r2, #7
 8001262:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	  myLoRa.bandWidth			   = BW_125KHz ;
 8001266:	4b0b      	ldr	r3, [pc, #44]	; (8001294 <Lora_setup+0x70>)
 8001268:	2207      	movs	r2, #7
 800126a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	  myLoRa.crcRate               = CR_4_5    ;
 800126e:	4b09      	ldr	r3, [pc, #36]	; (8001294 <Lora_setup+0x70>)
 8001270:	2201      	movs	r2, #1
 8001272:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	  myLoRa.power				   = POWER_20db;
 8001276:	4b07      	ldr	r3, [pc, #28]	; (8001294 <Lora_setup+0x70>)
 8001278:	22ff      	movs	r2, #255	; 0xff
 800127a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	  myLoRa.overCurrentProtection = 100       ;
 800127e:	4b05      	ldr	r3, [pc, #20]	; (8001294 <Lora_setup+0x70>)
 8001280:	2264      	movs	r2, #100	; 0x64
 8001282:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
	  myLoRa.preamble			   = 8         ;
 8001286:	4b03      	ldr	r3, [pc, #12]	; (8001294 <Lora_setup+0x70>)
 8001288:	2208      	movs	r2, #8
 800128a:	851a      	strh	r2, [r3, #40]	; 0x28
}
 800128c:	bf00      	nop
 800128e:	46bd      	mov	sp, r7
 8001290:	bc80      	pop	{r7}
 8001292:	4770      	bx	lr
 8001294:	200002f8 	.word	0x200002f8
 8001298:	40010c00 	.word	0x40010c00
 800129c:	20000204 	.word	0x20000204

080012a0 <configureGPRS>:
void configureGPRS(void)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b09a      	sub	sp, #104	; 0x68
 80012a4:	af00      	add	r7, sp, #0
  char response[50];

  sendATCommand("AT+CGATT=1\r\n", response);
 80012a6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80012aa:	4619      	mov	r1, r3
 80012ac:	481c      	ldr	r0, [pc, #112]	; (8001320 <configureGPRS+0x80>)
 80012ae:	f000 f913 	bl	80014d8 <sendATCommand>
  HAL_Delay(1000);
 80012b2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80012b6:	f000 fbc1 	bl	8001a3c <HAL_Delay>

  sendATCommand("AT+SAPBR=3,1,\"Contype\",\"GPRS\"\r\n", response);
 80012ba:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80012be:	4619      	mov	r1, r3
 80012c0:	4818      	ldr	r0, [pc, #96]	; (8001324 <configureGPRS+0x84>)
 80012c2:	f000 f909 	bl	80014d8 <sendATCommand>
  HAL_Delay(1000);
 80012c6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80012ca:	f000 fbb7 	bl	8001a3c <HAL_Delay>

  char apnCommand[50];
  sprintf(apnCommand, "AT+SAPBR=3,1,\"APN\",\"%s\"\r\n", APN);
 80012ce:	463b      	mov	r3, r7
 80012d0:	4a15      	ldr	r2, [pc, #84]	; (8001328 <configureGPRS+0x88>)
 80012d2:	4916      	ldr	r1, [pc, #88]	; (800132c <configureGPRS+0x8c>)
 80012d4:	4618      	mov	r0, r3
 80012d6:	f003 fed5 	bl	8005084 <siprintf>
  sendATCommand(apnCommand, response);
 80012da:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80012de:	463b      	mov	r3, r7
 80012e0:	4611      	mov	r1, r2
 80012e2:	4618      	mov	r0, r3
 80012e4:	f000 f8f8 	bl	80014d8 <sendATCommand>
  HAL_Delay(1000);
 80012e8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80012ec:	f000 fba6 	bl	8001a3c <HAL_Delay>

  sendATCommand("AT+SAPBR=1,1\r\n", response);
 80012f0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80012f4:	4619      	mov	r1, r3
 80012f6:	480e      	ldr	r0, [pc, #56]	; (8001330 <configureGPRS+0x90>)
 80012f8:	f000 f8ee 	bl	80014d8 <sendATCommand>
  HAL_Delay(1000);
 80012fc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001300:	f000 fb9c 	bl	8001a3c <HAL_Delay>

  sendATCommand("AT+SAPBR=2,1\r\n", response);
 8001304:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001308:	4619      	mov	r1, r3
 800130a:	480a      	ldr	r0, [pc, #40]	; (8001334 <configureGPRS+0x94>)
 800130c:	f000 f8e4 	bl	80014d8 <sendATCommand>
  HAL_Delay(1000);
 8001310:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001314:	f000 fb92 	bl	8001a3c <HAL_Delay>
}
 8001318:	bf00      	nop
 800131a:	3768      	adds	r7, #104	; 0x68
 800131c:	46bd      	mov	sp, r7
 800131e:	bd80      	pop	{r7, pc}
 8001320:	08008c70 	.word	0x08008c70
 8001324:	08008c80 	.word	0x08008c80
 8001328:	08008ca0 	.word	0x08008ca0
 800132c:	08008cac 	.word	0x08008cac
 8001330:	08008cc8 	.word	0x08008cc8
 8001334:	08008cd8 	.word	0x08008cd8

08001338 <sendDataToThingSpeak>:

void sendDataToThingSpeak(float tem, float hum, int i)
{
 8001338:	b5f0      	push	{r4, r5, r6, r7, lr}
 800133a:	f5ad 7d01 	sub.w	sp, sp, #516	; 0x204
 800133e:	af06      	add	r7, sp, #24
 8001340:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8001344:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001348:	6018      	str	r0, [r3, #0]
 800134a:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 800134e:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001352:	6019      	str	r1, [r3, #0]
 8001354:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8001358:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800135c:	601a      	str	r2, [r3, #0]
  char dataString[50];
  sprintf(dataString, "field%d=%.2f&field%d=%.2f",i,tem,i+1,hum);
 800135e:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8001362:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001366:	6818      	ldr	r0, [r3, #0]
 8001368:	f7ff f85e 	bl	8000428 <__aeabi_f2d>
 800136c:	4604      	mov	r4, r0
 800136e:	460d      	mov	r5, r1
 8001370:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8001374:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	1c5e      	adds	r6, r3, #1
 800137c:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8001380:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001384:	6818      	ldr	r0, [r3, #0]
 8001386:	f7ff f84f 	bl	8000428 <__aeabi_f2d>
 800138a:	4602      	mov	r2, r0
 800138c:	460b      	mov	r3, r1
 800138e:	f507 71f4 	add.w	r1, r7, #488	; 0x1e8
 8001392:	f5a1 71f2 	sub.w	r1, r1, #484	; 0x1e4
 8001396:	f507 70da 	add.w	r0, r7, #436	; 0x1b4
 800139a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800139e:	9602      	str	r6, [sp, #8]
 80013a0:	e9cd 4500 	strd	r4, r5, [sp]
 80013a4:	680a      	ldr	r2, [r1, #0]
 80013a6:	4943      	ldr	r1, [pc, #268]	; (80014b4 <sendDataToThingSpeak+0x17c>)
 80013a8:	f003 fe6c 	bl	8005084 <siprintf>

  char url[100];
  strcpy(url, URL);
 80013ac:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 80013b0:	4a41      	ldr	r2, [pc, #260]	; (80014b8 <sendDataToThingSpeak+0x180>)
 80013b2:	461c      	mov	r4, r3
 80013b4:	4615      	mov	r5, r2
 80013b6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80013b8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80013ba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80013bc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80013be:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80013c0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80013c2:	e895 0003 	ldmia.w	r5, {r0, r1}
 80013c6:	6020      	str	r0, [r4, #0]
 80013c8:	3404      	adds	r4, #4
 80013ca:	8021      	strh	r1, [r4, #0]
 80013cc:	3402      	adds	r4, #2
 80013ce:	0c0b      	lsrs	r3, r1, #16
 80013d0:	7023      	strb	r3, [r4, #0]
  strcat(url, dataString);
 80013d2:	f507 72da 	add.w	r2, r7, #436	; 0x1b4
 80013d6:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 80013da:	4611      	mov	r1, r2
 80013dc:	4618      	mov	r0, r3
 80013de:	f003 fe71 	bl	80050c4 <strcat>

  char response[100];
  char dataLength[10];
  sprintf(dataLength, "%d", strlen(dataString));
 80013e2:	f507 73da 	add.w	r3, r7, #436	; 0x1b4
 80013e6:	4618      	mov	r0, r3
 80013e8:	f7fe feb2 	bl	8000150 <strlen>
 80013ec:	4602      	mov	r2, r0
 80013ee:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80013f2:	4932      	ldr	r1, [pc, #200]	; (80014bc <sendDataToThingSpeak+0x184>)
 80013f4:	4618      	mov	r0, r3
 80013f6:	f003 fe45 	bl	8005084 <siprintf>

  sendATCommand("AT+HTTPINIT\r\n", response);
 80013fa:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80013fe:	4619      	mov	r1, r3
 8001400:	482f      	ldr	r0, [pc, #188]	; (80014c0 <sendDataToThingSpeak+0x188>)
 8001402:	f000 f869 	bl	80014d8 <sendATCommand>
  HAL_Delay(1000);
 8001406:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800140a:	f000 fb17 	bl	8001a3c <HAL_Delay>

  sendATCommand("AT+HTTPPARA=\"CID\",1\r\n", response);
 800140e:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001412:	4619      	mov	r1, r3
 8001414:	482b      	ldr	r0, [pc, #172]	; (80014c4 <sendDataToThingSpeak+0x18c>)
 8001416:	f000 f85f 	bl	80014d8 <sendATCommand>
  HAL_Delay(1000);
 800141a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800141e:	f000 fb0d 	bl	8001a3c <HAL_Delay>

  char urlCommand[150];
  sprintf(urlCommand, "AT+HTTPPARA=\"URL\",\"%s\"\r\n", url);
 8001422:	f507 72a8 	add.w	r2, r7, #336	; 0x150
 8001426:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800142a:	4927      	ldr	r1, [pc, #156]	; (80014c8 <sendDataToThingSpeak+0x190>)
 800142c:	4618      	mov	r0, r3
 800142e:	f003 fe29 	bl	8005084 <siprintf>
  sendATCommand(urlCommand, response);
 8001432:	f107 02ec 	add.w	r2, r7, #236	; 0xec
 8001436:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800143a:	4611      	mov	r1, r2
 800143c:	4618      	mov	r0, r3
 800143e:	f000 f84b 	bl	80014d8 <sendATCommand>
  HAL_Delay(1000);
 8001442:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001446:	f000 faf9 	bl	8001a3c <HAL_Delay>

  char dataCommand[50];
  sprintf(dataCommand, "AT+HTTPDATA=%s,5000\r\n", dataLength);
 800144a:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 800144e:	f107 0314 	add.w	r3, r7, #20
 8001452:	491e      	ldr	r1, [pc, #120]	; (80014cc <sendDataToThingSpeak+0x194>)
 8001454:	4618      	mov	r0, r3
 8001456:	f003 fe15 	bl	8005084 <siprintf>
  sendATCommand(dataCommand, response);
 800145a:	f107 02ec 	add.w	r2, r7, #236	; 0xec
 800145e:	f107 0314 	add.w	r3, r7, #20
 8001462:	4611      	mov	r1, r2
 8001464:	4618      	mov	r0, r3
 8001466:	f000 f837 	bl	80014d8 <sendATCommand>
  HAL_Delay(1000);
 800146a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800146e:	f000 fae5 	bl	8001a3c <HAL_Delay>

  sendATCommand(dataString, response);
 8001472:	f107 02ec 	add.w	r2, r7, #236	; 0xec
 8001476:	f507 73da 	add.w	r3, r7, #436	; 0x1b4
 800147a:	4611      	mov	r1, r2
 800147c:	4618      	mov	r0, r3
 800147e:	f000 f82b 	bl	80014d8 <sendATCommand>
  HAL_Delay(1000);
 8001482:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001486:	f000 fad9 	bl	8001a3c <HAL_Delay>

  sendATCommand("AT+HTTPACTION=1\r\n", response);
 800148a:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800148e:	4619      	mov	r1, r3
 8001490:	480f      	ldr	r0, [pc, #60]	; (80014d0 <sendDataToThingSpeak+0x198>)
 8001492:	f000 f821 	bl	80014d8 <sendATCommand>
  HAL_Delay(5000); // wait for HTTP response
 8001496:	f241 3088 	movw	r0, #5000	; 0x1388
 800149a:	f000 facf 	bl	8001a3c <HAL_Delay>
  sendATCommand("AT+HTTPREAD\r\n", response);
 800149e:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80014a2:	4619      	mov	r1, r3
 80014a4:	480b      	ldr	r0, [pc, #44]	; (80014d4 <sendDataToThingSpeak+0x19c>)
 80014a6:	f000 f817 	bl	80014d8 <sendATCommand>
}
 80014aa:	bf00      	nop
 80014ac:	f507 77f6 	add.w	r7, r7, #492	; 0x1ec
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014b4:	08008ce8 	.word	0x08008ce8
 80014b8:	08008d04 	.word	0x08008d04
 80014bc:	08008d3c 	.word	0x08008d3c
 80014c0:	08008d40 	.word	0x08008d40
 80014c4:	08008d50 	.word	0x08008d50
 80014c8:	08008d68 	.word	0x08008d68
 80014cc:	08008d84 	.word	0x08008d84
 80014d0:	08008d9c 	.word	0x08008d9c
 80014d4:	08008db0 	.word	0x08008db0

080014d8 <sendATCommand>:

void sendATCommand(char* command, char* response)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b082      	sub	sp, #8
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
 80014e0:	6039      	str	r1, [r7, #0]
  HAL_UART_Transmit(&huart2, (uint8_t*)command, strlen(command), 1000);
 80014e2:	6878      	ldr	r0, [r7, #4]
 80014e4:	f7fe fe34 	bl	8000150 <strlen>
 80014e8:	4603      	mov	r3, r0
 80014ea:	b29a      	uxth	r2, r3
 80014ec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014f0:	6879      	ldr	r1, [r7, #4]
 80014f2:	4807      	ldr	r0, [pc, #28]	; (8001510 <sendATCommand+0x38>)
 80014f4:	f001 ff67 	bl	80033c6 <HAL_UART_Transmit>
  HAL_UART_Receive(&huart2, (uint8_t*)response, 50, 1000);
 80014f8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014fc:	2232      	movs	r2, #50	; 0x32
 80014fe:	6839      	ldr	r1, [r7, #0]
 8001500:	4803      	ldr	r0, [pc, #12]	; (8001510 <sendATCommand+0x38>)
 8001502:	f001 fff2 	bl	80034ea <HAL_UART_Receive>
}
 8001506:	bf00      	nop
 8001508:	3708      	adds	r7, #8
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}
 800150e:	bf00      	nop
 8001510:	200002b4 	.word	0x200002b4

08001514 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001514:	b480      	push	{r7}
 8001516:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001518:	b672      	cpsid	i
}
 800151a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800151c:	e7fe      	b.n	800151c <Error_Handler+0x8>
	...

08001520 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001520:	b480      	push	{r7}
 8001522:	b085      	sub	sp, #20
 8001524:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001526:	4b15      	ldr	r3, [pc, #84]	; (800157c <HAL_MspInit+0x5c>)
 8001528:	699b      	ldr	r3, [r3, #24]
 800152a:	4a14      	ldr	r2, [pc, #80]	; (800157c <HAL_MspInit+0x5c>)
 800152c:	f043 0301 	orr.w	r3, r3, #1
 8001530:	6193      	str	r3, [r2, #24]
 8001532:	4b12      	ldr	r3, [pc, #72]	; (800157c <HAL_MspInit+0x5c>)
 8001534:	699b      	ldr	r3, [r3, #24]
 8001536:	f003 0301 	and.w	r3, r3, #1
 800153a:	60bb      	str	r3, [r7, #8]
 800153c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800153e:	4b0f      	ldr	r3, [pc, #60]	; (800157c <HAL_MspInit+0x5c>)
 8001540:	69db      	ldr	r3, [r3, #28]
 8001542:	4a0e      	ldr	r2, [pc, #56]	; (800157c <HAL_MspInit+0x5c>)
 8001544:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001548:	61d3      	str	r3, [r2, #28]
 800154a:	4b0c      	ldr	r3, [pc, #48]	; (800157c <HAL_MspInit+0x5c>)
 800154c:	69db      	ldr	r3, [r3, #28]
 800154e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001552:	607b      	str	r3, [r7, #4]
 8001554:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001556:	4b0a      	ldr	r3, [pc, #40]	; (8001580 <HAL_MspInit+0x60>)
 8001558:	685b      	ldr	r3, [r3, #4]
 800155a:	60fb      	str	r3, [r7, #12]
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001562:	60fb      	str	r3, [r7, #12]
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800156a:	60fb      	str	r3, [r7, #12]
 800156c:	4a04      	ldr	r2, [pc, #16]	; (8001580 <HAL_MspInit+0x60>)
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001572:	bf00      	nop
 8001574:	3714      	adds	r7, #20
 8001576:	46bd      	mov	sp, r7
 8001578:	bc80      	pop	{r7}
 800157a:	4770      	bx	lr
 800157c:	40021000 	.word	0x40021000
 8001580:	40010000 	.word	0x40010000

08001584 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b08a      	sub	sp, #40	; 0x28
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800158c:	f107 0318 	add.w	r3, r7, #24
 8001590:	2200      	movs	r2, #0
 8001592:	601a      	str	r2, [r3, #0]
 8001594:	605a      	str	r2, [r3, #4]
 8001596:	609a      	str	r2, [r3, #8]
 8001598:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	4a37      	ldr	r2, [pc, #220]	; (800167c <HAL_SPI_MspInit+0xf8>)
 80015a0:	4293      	cmp	r3, r2
 80015a2:	d130      	bne.n	8001606 <HAL_SPI_MspInit+0x82>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80015a4:	4b36      	ldr	r3, [pc, #216]	; (8001680 <HAL_SPI_MspInit+0xfc>)
 80015a6:	699b      	ldr	r3, [r3, #24]
 80015a8:	4a35      	ldr	r2, [pc, #212]	; (8001680 <HAL_SPI_MspInit+0xfc>)
 80015aa:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80015ae:	6193      	str	r3, [r2, #24]
 80015b0:	4b33      	ldr	r3, [pc, #204]	; (8001680 <HAL_SPI_MspInit+0xfc>)
 80015b2:	699b      	ldr	r3, [r3, #24]
 80015b4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80015b8:	617b      	str	r3, [r7, #20]
 80015ba:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015bc:	4b30      	ldr	r3, [pc, #192]	; (8001680 <HAL_SPI_MspInit+0xfc>)
 80015be:	699b      	ldr	r3, [r3, #24]
 80015c0:	4a2f      	ldr	r2, [pc, #188]	; (8001680 <HAL_SPI_MspInit+0xfc>)
 80015c2:	f043 0304 	orr.w	r3, r3, #4
 80015c6:	6193      	str	r3, [r2, #24]
 80015c8:	4b2d      	ldr	r3, [pc, #180]	; (8001680 <HAL_SPI_MspInit+0xfc>)
 80015ca:	699b      	ldr	r3, [r3, #24]
 80015cc:	f003 0304 	and.w	r3, r3, #4
 80015d0:	613b      	str	r3, [r7, #16]
 80015d2:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80015d4:	23a0      	movs	r3, #160	; 0xa0
 80015d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015d8:	2302      	movs	r3, #2
 80015da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80015dc:	2303      	movs	r3, #3
 80015de:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015e0:	f107 0318 	add.w	r3, r7, #24
 80015e4:	4619      	mov	r1, r3
 80015e6:	4827      	ldr	r0, [pc, #156]	; (8001684 <HAL_SPI_MspInit+0x100>)
 80015e8:	f000 fb5a 	bl	8001ca0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80015ec:	2340      	movs	r3, #64	; 0x40
 80015ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015f0:	2300      	movs	r3, #0
 80015f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f4:	2300      	movs	r3, #0
 80015f6:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015f8:	f107 0318 	add.w	r3, r7, #24
 80015fc:	4619      	mov	r1, r3
 80015fe:	4821      	ldr	r0, [pc, #132]	; (8001684 <HAL_SPI_MspInit+0x100>)
 8001600:	f000 fb4e 	bl	8001ca0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001604:	e036      	b.n	8001674 <HAL_SPI_MspInit+0xf0>
  else if(hspi->Instance==SPI2)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	4a1f      	ldr	r2, [pc, #124]	; (8001688 <HAL_SPI_MspInit+0x104>)
 800160c:	4293      	cmp	r3, r2
 800160e:	d131      	bne.n	8001674 <HAL_SPI_MspInit+0xf0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001610:	4b1b      	ldr	r3, [pc, #108]	; (8001680 <HAL_SPI_MspInit+0xfc>)
 8001612:	69db      	ldr	r3, [r3, #28]
 8001614:	4a1a      	ldr	r2, [pc, #104]	; (8001680 <HAL_SPI_MspInit+0xfc>)
 8001616:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800161a:	61d3      	str	r3, [r2, #28]
 800161c:	4b18      	ldr	r3, [pc, #96]	; (8001680 <HAL_SPI_MspInit+0xfc>)
 800161e:	69db      	ldr	r3, [r3, #28]
 8001620:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001624:	60fb      	str	r3, [r7, #12]
 8001626:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001628:	4b15      	ldr	r3, [pc, #84]	; (8001680 <HAL_SPI_MspInit+0xfc>)
 800162a:	699b      	ldr	r3, [r3, #24]
 800162c:	4a14      	ldr	r2, [pc, #80]	; (8001680 <HAL_SPI_MspInit+0xfc>)
 800162e:	f043 0308 	orr.w	r3, r3, #8
 8001632:	6193      	str	r3, [r2, #24]
 8001634:	4b12      	ldr	r3, [pc, #72]	; (8001680 <HAL_SPI_MspInit+0xfc>)
 8001636:	699b      	ldr	r3, [r3, #24]
 8001638:	f003 0308 	and.w	r3, r3, #8
 800163c:	60bb      	str	r3, [r7, #8]
 800163e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8001640:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8001644:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001646:	2302      	movs	r3, #2
 8001648:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800164a:	2303      	movs	r3, #3
 800164c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800164e:	f107 0318 	add.w	r3, r7, #24
 8001652:	4619      	mov	r1, r3
 8001654:	480d      	ldr	r0, [pc, #52]	; (800168c <HAL_SPI_MspInit+0x108>)
 8001656:	f000 fb23 	bl	8001ca0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 800165a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800165e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001660:	2300      	movs	r3, #0
 8001662:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001664:	2300      	movs	r3, #0
 8001666:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001668:	f107 0318 	add.w	r3, r7, #24
 800166c:	4619      	mov	r1, r3
 800166e:	4807      	ldr	r0, [pc, #28]	; (800168c <HAL_SPI_MspInit+0x108>)
 8001670:	f000 fb16 	bl	8001ca0 <HAL_GPIO_Init>
}
 8001674:	bf00      	nop
 8001676:	3728      	adds	r7, #40	; 0x28
 8001678:	46bd      	mov	sp, r7
 800167a:	bd80      	pop	{r7, pc}
 800167c:	40013000 	.word	0x40013000
 8001680:	40021000 	.word	0x40021000
 8001684:	40010800 	.word	0x40010800
 8001688:	40003800 	.word	0x40003800
 800168c:	40010c00 	.word	0x40010c00

08001690 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b088      	sub	sp, #32
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001698:	f107 0310 	add.w	r3, r7, #16
 800169c:	2200      	movs	r2, #0
 800169e:	601a      	str	r2, [r3, #0]
 80016a0:	605a      	str	r2, [r3, #4]
 80016a2:	609a      	str	r2, [r3, #8]
 80016a4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	4a1b      	ldr	r2, [pc, #108]	; (8001718 <HAL_UART_MspInit+0x88>)
 80016ac:	4293      	cmp	r3, r2
 80016ae:	d12f      	bne.n	8001710 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80016b0:	4b1a      	ldr	r3, [pc, #104]	; (800171c <HAL_UART_MspInit+0x8c>)
 80016b2:	69db      	ldr	r3, [r3, #28]
 80016b4:	4a19      	ldr	r2, [pc, #100]	; (800171c <HAL_UART_MspInit+0x8c>)
 80016b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016ba:	61d3      	str	r3, [r2, #28]
 80016bc:	4b17      	ldr	r3, [pc, #92]	; (800171c <HAL_UART_MspInit+0x8c>)
 80016be:	69db      	ldr	r3, [r3, #28]
 80016c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016c4:	60fb      	str	r3, [r7, #12]
 80016c6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016c8:	4b14      	ldr	r3, [pc, #80]	; (800171c <HAL_UART_MspInit+0x8c>)
 80016ca:	699b      	ldr	r3, [r3, #24]
 80016cc:	4a13      	ldr	r2, [pc, #76]	; (800171c <HAL_UART_MspInit+0x8c>)
 80016ce:	f043 0304 	orr.w	r3, r3, #4
 80016d2:	6193      	str	r3, [r2, #24]
 80016d4:	4b11      	ldr	r3, [pc, #68]	; (800171c <HAL_UART_MspInit+0x8c>)
 80016d6:	699b      	ldr	r3, [r3, #24]
 80016d8:	f003 0304 	and.w	r3, r3, #4
 80016dc:	60bb      	str	r3, [r7, #8]
 80016de:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80016e0:	2304      	movs	r3, #4
 80016e2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016e4:	2302      	movs	r3, #2
 80016e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80016e8:	2303      	movs	r3, #3
 80016ea:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016ec:	f107 0310 	add.w	r3, r7, #16
 80016f0:	4619      	mov	r1, r3
 80016f2:	480b      	ldr	r0, [pc, #44]	; (8001720 <HAL_UART_MspInit+0x90>)
 80016f4:	f000 fad4 	bl	8001ca0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80016f8:	2308      	movs	r3, #8
 80016fa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016fc:	2300      	movs	r3, #0
 80016fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001700:	2300      	movs	r3, #0
 8001702:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001704:	f107 0310 	add.w	r3, r7, #16
 8001708:	4619      	mov	r1, r3
 800170a:	4805      	ldr	r0, [pc, #20]	; (8001720 <HAL_UART_MspInit+0x90>)
 800170c:	f000 fac8 	bl	8001ca0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001710:	bf00      	nop
 8001712:	3720      	adds	r7, #32
 8001714:	46bd      	mov	sp, r7
 8001716:	bd80      	pop	{r7, pc}
 8001718:	40004400 	.word	0x40004400
 800171c:	40021000 	.word	0x40021000
 8001720:	40010800 	.word	0x40010800

08001724 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001724:	b480      	push	{r7}
 8001726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001728:	e7fe      	b.n	8001728 <NMI_Handler+0x4>

0800172a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800172a:	b480      	push	{r7}
 800172c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800172e:	e7fe      	b.n	800172e <HardFault_Handler+0x4>

08001730 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001730:	b480      	push	{r7}
 8001732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001734:	e7fe      	b.n	8001734 <MemManage_Handler+0x4>

08001736 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001736:	b480      	push	{r7}
 8001738:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800173a:	e7fe      	b.n	800173a <BusFault_Handler+0x4>

0800173c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800173c:	b480      	push	{r7}
 800173e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001740:	e7fe      	b.n	8001740 <UsageFault_Handler+0x4>

08001742 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001742:	b480      	push	{r7}
 8001744:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001746:	bf00      	nop
 8001748:	46bd      	mov	sp, r7
 800174a:	bc80      	pop	{r7}
 800174c:	4770      	bx	lr

0800174e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800174e:	b480      	push	{r7}
 8001750:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001752:	bf00      	nop
 8001754:	46bd      	mov	sp, r7
 8001756:	bc80      	pop	{r7}
 8001758:	4770      	bx	lr

0800175a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800175a:	b480      	push	{r7}
 800175c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800175e:	bf00      	nop
 8001760:	46bd      	mov	sp, r7
 8001762:	bc80      	pop	{r7}
 8001764:	4770      	bx	lr

08001766 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001766:	b580      	push	{r7, lr}
 8001768:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800176a:	f000 f94b 	bl	8001a04 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800176e:	bf00      	nop
 8001770:	bd80      	pop	{r7, pc}

08001772 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8001772:	b580      	push	{r7, lr}
 8001774:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8001776:	2008      	movs	r0, #8
 8001778:	f000 fc2e 	bl	8001fd8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 800177c:	bf00      	nop
 800177e:	bd80      	pop	{r7, pc}

08001780 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8001784:	2010      	movs	r0, #16
 8001786:	f000 fc27 	bl	8001fd8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 800178a:	bf00      	nop
 800178c:	bd80      	pop	{r7, pc}

0800178e <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800178e:	b580      	push	{r7, lr}
 8001790:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DIO0_Pin);
 8001792:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001796:	f000 fc1f 	bl	8001fd8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800179a:	bf00      	nop
 800179c:	bd80      	pop	{r7, pc}

0800179e <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800179e:	b480      	push	{r7}
 80017a0:	af00      	add	r7, sp, #0
  return 1;
 80017a2:	2301      	movs	r3, #1
}
 80017a4:	4618      	mov	r0, r3
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bc80      	pop	{r7}
 80017aa:	4770      	bx	lr

080017ac <_kill>:

int _kill(int pid, int sig)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b082      	sub	sp, #8
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
 80017b4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80017b6:	f002 fdc1 	bl	800433c <__errno>
 80017ba:	4603      	mov	r3, r0
 80017bc:	2216      	movs	r2, #22
 80017be:	601a      	str	r2, [r3, #0]
  return -1;
 80017c0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80017c4:	4618      	mov	r0, r3
 80017c6:	3708      	adds	r7, #8
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bd80      	pop	{r7, pc}

080017cc <_exit>:

void _exit (int status)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b082      	sub	sp, #8
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80017d4:	f04f 31ff 	mov.w	r1, #4294967295
 80017d8:	6878      	ldr	r0, [r7, #4]
 80017da:	f7ff ffe7 	bl	80017ac <_kill>
  while (1) {}    /* Make sure we hang here */
 80017de:	e7fe      	b.n	80017de <_exit+0x12>

080017e0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b086      	sub	sp, #24
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	60f8      	str	r0, [r7, #12]
 80017e8:	60b9      	str	r1, [r7, #8]
 80017ea:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017ec:	2300      	movs	r3, #0
 80017ee:	617b      	str	r3, [r7, #20]
 80017f0:	e00a      	b.n	8001808 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80017f2:	f3af 8000 	nop.w
 80017f6:	4601      	mov	r1, r0
 80017f8:	68bb      	ldr	r3, [r7, #8]
 80017fa:	1c5a      	adds	r2, r3, #1
 80017fc:	60ba      	str	r2, [r7, #8]
 80017fe:	b2ca      	uxtb	r2, r1
 8001800:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001802:	697b      	ldr	r3, [r7, #20]
 8001804:	3301      	adds	r3, #1
 8001806:	617b      	str	r3, [r7, #20]
 8001808:	697a      	ldr	r2, [r7, #20]
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	429a      	cmp	r2, r3
 800180e:	dbf0      	blt.n	80017f2 <_read+0x12>
  }

  return len;
 8001810:	687b      	ldr	r3, [r7, #4]
}
 8001812:	4618      	mov	r0, r3
 8001814:	3718      	adds	r7, #24
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}

0800181a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800181a:	b580      	push	{r7, lr}
 800181c:	b086      	sub	sp, #24
 800181e:	af00      	add	r7, sp, #0
 8001820:	60f8      	str	r0, [r7, #12]
 8001822:	60b9      	str	r1, [r7, #8]
 8001824:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001826:	2300      	movs	r3, #0
 8001828:	617b      	str	r3, [r7, #20]
 800182a:	e009      	b.n	8001840 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800182c:	68bb      	ldr	r3, [r7, #8]
 800182e:	1c5a      	adds	r2, r3, #1
 8001830:	60ba      	str	r2, [r7, #8]
 8001832:	781b      	ldrb	r3, [r3, #0]
 8001834:	4618      	mov	r0, r3
 8001836:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800183a:	697b      	ldr	r3, [r7, #20]
 800183c:	3301      	adds	r3, #1
 800183e:	617b      	str	r3, [r7, #20]
 8001840:	697a      	ldr	r2, [r7, #20]
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	429a      	cmp	r2, r3
 8001846:	dbf1      	blt.n	800182c <_write+0x12>
  }
  return len;
 8001848:	687b      	ldr	r3, [r7, #4]
}
 800184a:	4618      	mov	r0, r3
 800184c:	3718      	adds	r7, #24
 800184e:	46bd      	mov	sp, r7
 8001850:	bd80      	pop	{r7, pc}

08001852 <_close>:

int _close(int file)
{
 8001852:	b480      	push	{r7}
 8001854:	b083      	sub	sp, #12
 8001856:	af00      	add	r7, sp, #0
 8001858:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800185a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800185e:	4618      	mov	r0, r3
 8001860:	370c      	adds	r7, #12
 8001862:	46bd      	mov	sp, r7
 8001864:	bc80      	pop	{r7}
 8001866:	4770      	bx	lr

08001868 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001868:	b480      	push	{r7}
 800186a:	b083      	sub	sp, #12
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
 8001870:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001872:	683b      	ldr	r3, [r7, #0]
 8001874:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001878:	605a      	str	r2, [r3, #4]
  return 0;
 800187a:	2300      	movs	r3, #0
}
 800187c:	4618      	mov	r0, r3
 800187e:	370c      	adds	r7, #12
 8001880:	46bd      	mov	sp, r7
 8001882:	bc80      	pop	{r7}
 8001884:	4770      	bx	lr

08001886 <_isatty>:

int _isatty(int file)
{
 8001886:	b480      	push	{r7}
 8001888:	b083      	sub	sp, #12
 800188a:	af00      	add	r7, sp, #0
 800188c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800188e:	2301      	movs	r3, #1
}
 8001890:	4618      	mov	r0, r3
 8001892:	370c      	adds	r7, #12
 8001894:	46bd      	mov	sp, r7
 8001896:	bc80      	pop	{r7}
 8001898:	4770      	bx	lr

0800189a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800189a:	b480      	push	{r7}
 800189c:	b085      	sub	sp, #20
 800189e:	af00      	add	r7, sp, #0
 80018a0:	60f8      	str	r0, [r7, #12]
 80018a2:	60b9      	str	r1, [r7, #8]
 80018a4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80018a6:	2300      	movs	r3, #0
}
 80018a8:	4618      	mov	r0, r3
 80018aa:	3714      	adds	r7, #20
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bc80      	pop	{r7}
 80018b0:	4770      	bx	lr
	...

080018b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b086      	sub	sp, #24
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018bc:	4a14      	ldr	r2, [pc, #80]	; (8001910 <_sbrk+0x5c>)
 80018be:	4b15      	ldr	r3, [pc, #84]	; (8001914 <_sbrk+0x60>)
 80018c0:	1ad3      	subs	r3, r2, r3
 80018c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80018c4:	697b      	ldr	r3, [r7, #20]
 80018c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80018c8:	4b13      	ldr	r3, [pc, #76]	; (8001918 <_sbrk+0x64>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d102      	bne.n	80018d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80018d0:	4b11      	ldr	r3, [pc, #68]	; (8001918 <_sbrk+0x64>)
 80018d2:	4a12      	ldr	r2, [pc, #72]	; (800191c <_sbrk+0x68>)
 80018d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80018d6:	4b10      	ldr	r3, [pc, #64]	; (8001918 <_sbrk+0x64>)
 80018d8:	681a      	ldr	r2, [r3, #0]
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	4413      	add	r3, r2
 80018de:	693a      	ldr	r2, [r7, #16]
 80018e0:	429a      	cmp	r2, r3
 80018e2:	d207      	bcs.n	80018f4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80018e4:	f002 fd2a 	bl	800433c <__errno>
 80018e8:	4603      	mov	r3, r0
 80018ea:	220c      	movs	r2, #12
 80018ec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80018ee:	f04f 33ff 	mov.w	r3, #4294967295
 80018f2:	e009      	b.n	8001908 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80018f4:	4b08      	ldr	r3, [pc, #32]	; (8001918 <_sbrk+0x64>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80018fa:	4b07      	ldr	r3, [pc, #28]	; (8001918 <_sbrk+0x64>)
 80018fc:	681a      	ldr	r2, [r3, #0]
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	4413      	add	r3, r2
 8001902:	4a05      	ldr	r2, [pc, #20]	; (8001918 <_sbrk+0x64>)
 8001904:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001906:	68fb      	ldr	r3, [r7, #12]
}
 8001908:	4618      	mov	r0, r3
 800190a:	3718      	adds	r7, #24
 800190c:	46bd      	mov	sp, r7
 800190e:	bd80      	pop	{r7, pc}
 8001910:	20005000 	.word	0x20005000
 8001914:	00000400 	.word	0x00000400
 8001918:	20000368 	.word	0x20000368
 800191c:	20000380 	.word	0x20000380

08001920 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001920:	b480      	push	{r7}
 8001922:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001924:	bf00      	nop
 8001926:	46bd      	mov	sp, r7
 8001928:	bc80      	pop	{r7}
 800192a:	4770      	bx	lr

0800192c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800192c:	480c      	ldr	r0, [pc, #48]	; (8001960 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800192e:	490d      	ldr	r1, [pc, #52]	; (8001964 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001930:	4a0d      	ldr	r2, [pc, #52]	; (8001968 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001932:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001934:	e002      	b.n	800193c <LoopCopyDataInit>

08001936 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001936:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001938:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800193a:	3304      	adds	r3, #4

0800193c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800193c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800193e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001940:	d3f9      	bcc.n	8001936 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001942:	4a0a      	ldr	r2, [pc, #40]	; (800196c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001944:	4c0a      	ldr	r4, [pc, #40]	; (8001970 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001946:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001948:	e001      	b.n	800194e <LoopFillZerobss>

0800194a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800194a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800194c:	3204      	adds	r2, #4

0800194e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800194e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001950:	d3fb      	bcc.n	800194a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001952:	f7ff ffe5 	bl	8001920 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001956:	f002 fcf7 	bl	8004348 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800195a:	f7ff fa35 	bl	8000dc8 <main>
  bx lr
 800195e:	4770      	bx	lr
  ldr r0, =_sdata
 8001960:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001964:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8001968:	0800a06c 	.word	0x0800a06c
  ldr r2, =_sbss
 800196c:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8001970:	20000380 	.word	0x20000380

08001974 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001974:	e7fe      	b.n	8001974 <ADC1_2_IRQHandler>
	...

08001978 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800197c:	4b08      	ldr	r3, [pc, #32]	; (80019a0 <HAL_Init+0x28>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	4a07      	ldr	r2, [pc, #28]	; (80019a0 <HAL_Init+0x28>)
 8001982:	f043 0310 	orr.w	r3, r3, #16
 8001986:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001988:	2003      	movs	r0, #3
 800198a:	f000 f947 	bl	8001c1c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800198e:	2000      	movs	r0, #0
 8001990:	f000 f808 	bl	80019a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001994:	f7ff fdc4 	bl	8001520 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001998:	2300      	movs	r3, #0
}
 800199a:	4618      	mov	r0, r3
 800199c:	bd80      	pop	{r7, pc}
 800199e:	bf00      	nop
 80019a0:	40022000 	.word	0x40022000

080019a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b082      	sub	sp, #8
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80019ac:	4b12      	ldr	r3, [pc, #72]	; (80019f8 <HAL_InitTick+0x54>)
 80019ae:	681a      	ldr	r2, [r3, #0]
 80019b0:	4b12      	ldr	r3, [pc, #72]	; (80019fc <HAL_InitTick+0x58>)
 80019b2:	781b      	ldrb	r3, [r3, #0]
 80019b4:	4619      	mov	r1, r3
 80019b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80019be:	fbb2 f3f3 	udiv	r3, r2, r3
 80019c2:	4618      	mov	r0, r3
 80019c4:	f000 f95f 	bl	8001c86 <HAL_SYSTICK_Config>
 80019c8:	4603      	mov	r3, r0
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d001      	beq.n	80019d2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80019ce:	2301      	movs	r3, #1
 80019d0:	e00e      	b.n	80019f0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	2b0f      	cmp	r3, #15
 80019d6:	d80a      	bhi.n	80019ee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019d8:	2200      	movs	r2, #0
 80019da:	6879      	ldr	r1, [r7, #4]
 80019dc:	f04f 30ff 	mov.w	r0, #4294967295
 80019e0:	f000 f927 	bl	8001c32 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80019e4:	4a06      	ldr	r2, [pc, #24]	; (8001a00 <HAL_InitTick+0x5c>)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80019ea:	2300      	movs	r3, #0
 80019ec:	e000      	b.n	80019f0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80019ee:	2301      	movs	r3, #1
}
 80019f0:	4618      	mov	r0, r3
 80019f2:	3708      	adds	r7, #8
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bd80      	pop	{r7, pc}
 80019f8:	20000000 	.word	0x20000000
 80019fc:	20000008 	.word	0x20000008
 8001a00:	20000004 	.word	0x20000004

08001a04 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a04:	b480      	push	{r7}
 8001a06:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a08:	4b05      	ldr	r3, [pc, #20]	; (8001a20 <HAL_IncTick+0x1c>)
 8001a0a:	781b      	ldrb	r3, [r3, #0]
 8001a0c:	461a      	mov	r2, r3
 8001a0e:	4b05      	ldr	r3, [pc, #20]	; (8001a24 <HAL_IncTick+0x20>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	4413      	add	r3, r2
 8001a14:	4a03      	ldr	r2, [pc, #12]	; (8001a24 <HAL_IncTick+0x20>)
 8001a16:	6013      	str	r3, [r2, #0]
}
 8001a18:	bf00      	nop
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bc80      	pop	{r7}
 8001a1e:	4770      	bx	lr
 8001a20:	20000008 	.word	0x20000008
 8001a24:	2000036c 	.word	0x2000036c

08001a28 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	af00      	add	r7, sp, #0
  return uwTick;
 8001a2c:	4b02      	ldr	r3, [pc, #8]	; (8001a38 <HAL_GetTick+0x10>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
}
 8001a30:	4618      	mov	r0, r3
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bc80      	pop	{r7}
 8001a36:	4770      	bx	lr
 8001a38:	2000036c 	.word	0x2000036c

08001a3c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b084      	sub	sp, #16
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a44:	f7ff fff0 	bl	8001a28 <HAL_GetTick>
 8001a48:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a54:	d005      	beq.n	8001a62 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a56:	4b0a      	ldr	r3, [pc, #40]	; (8001a80 <HAL_Delay+0x44>)
 8001a58:	781b      	ldrb	r3, [r3, #0]
 8001a5a:	461a      	mov	r2, r3
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	4413      	add	r3, r2
 8001a60:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001a62:	bf00      	nop
 8001a64:	f7ff ffe0 	bl	8001a28 <HAL_GetTick>
 8001a68:	4602      	mov	r2, r0
 8001a6a:	68bb      	ldr	r3, [r7, #8]
 8001a6c:	1ad3      	subs	r3, r2, r3
 8001a6e:	68fa      	ldr	r2, [r7, #12]
 8001a70:	429a      	cmp	r2, r3
 8001a72:	d8f7      	bhi.n	8001a64 <HAL_Delay+0x28>
  {
  }
}
 8001a74:	bf00      	nop
 8001a76:	bf00      	nop
 8001a78:	3710      	adds	r7, #16
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd80      	pop	{r7, pc}
 8001a7e:	bf00      	nop
 8001a80:	20000008 	.word	0x20000008

08001a84 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a84:	b480      	push	{r7}
 8001a86:	b085      	sub	sp, #20
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	f003 0307 	and.w	r3, r3, #7
 8001a92:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a94:	4b0c      	ldr	r3, [pc, #48]	; (8001ac8 <__NVIC_SetPriorityGrouping+0x44>)
 8001a96:	68db      	ldr	r3, [r3, #12]
 8001a98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a9a:	68ba      	ldr	r2, [r7, #8]
 8001a9c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001aa0:	4013      	ands	r3, r2
 8001aa2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001aa8:	68bb      	ldr	r3, [r7, #8]
 8001aaa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001aac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ab0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ab4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ab6:	4a04      	ldr	r2, [pc, #16]	; (8001ac8 <__NVIC_SetPriorityGrouping+0x44>)
 8001ab8:	68bb      	ldr	r3, [r7, #8]
 8001aba:	60d3      	str	r3, [r2, #12]
}
 8001abc:	bf00      	nop
 8001abe:	3714      	adds	r7, #20
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bc80      	pop	{r7}
 8001ac4:	4770      	bx	lr
 8001ac6:	bf00      	nop
 8001ac8:	e000ed00 	.word	0xe000ed00

08001acc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001acc:	b480      	push	{r7}
 8001ace:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ad0:	4b04      	ldr	r3, [pc, #16]	; (8001ae4 <__NVIC_GetPriorityGrouping+0x18>)
 8001ad2:	68db      	ldr	r3, [r3, #12]
 8001ad4:	0a1b      	lsrs	r3, r3, #8
 8001ad6:	f003 0307 	and.w	r3, r3, #7
}
 8001ada:	4618      	mov	r0, r3
 8001adc:	46bd      	mov	sp, r7
 8001ade:	bc80      	pop	{r7}
 8001ae0:	4770      	bx	lr
 8001ae2:	bf00      	nop
 8001ae4:	e000ed00 	.word	0xe000ed00

08001ae8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	b083      	sub	sp, #12
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	4603      	mov	r3, r0
 8001af0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001af2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	db0b      	blt.n	8001b12 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001afa:	79fb      	ldrb	r3, [r7, #7]
 8001afc:	f003 021f 	and.w	r2, r3, #31
 8001b00:	4906      	ldr	r1, [pc, #24]	; (8001b1c <__NVIC_EnableIRQ+0x34>)
 8001b02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b06:	095b      	lsrs	r3, r3, #5
 8001b08:	2001      	movs	r0, #1
 8001b0a:	fa00 f202 	lsl.w	r2, r0, r2
 8001b0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001b12:	bf00      	nop
 8001b14:	370c      	adds	r7, #12
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bc80      	pop	{r7}
 8001b1a:	4770      	bx	lr
 8001b1c:	e000e100 	.word	0xe000e100

08001b20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b20:	b480      	push	{r7}
 8001b22:	b083      	sub	sp, #12
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	4603      	mov	r3, r0
 8001b28:	6039      	str	r1, [r7, #0]
 8001b2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	db0a      	blt.n	8001b4a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	b2da      	uxtb	r2, r3
 8001b38:	490c      	ldr	r1, [pc, #48]	; (8001b6c <__NVIC_SetPriority+0x4c>)
 8001b3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b3e:	0112      	lsls	r2, r2, #4
 8001b40:	b2d2      	uxtb	r2, r2
 8001b42:	440b      	add	r3, r1
 8001b44:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b48:	e00a      	b.n	8001b60 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	b2da      	uxtb	r2, r3
 8001b4e:	4908      	ldr	r1, [pc, #32]	; (8001b70 <__NVIC_SetPriority+0x50>)
 8001b50:	79fb      	ldrb	r3, [r7, #7]
 8001b52:	f003 030f 	and.w	r3, r3, #15
 8001b56:	3b04      	subs	r3, #4
 8001b58:	0112      	lsls	r2, r2, #4
 8001b5a:	b2d2      	uxtb	r2, r2
 8001b5c:	440b      	add	r3, r1
 8001b5e:	761a      	strb	r2, [r3, #24]
}
 8001b60:	bf00      	nop
 8001b62:	370c      	adds	r7, #12
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bc80      	pop	{r7}
 8001b68:	4770      	bx	lr
 8001b6a:	bf00      	nop
 8001b6c:	e000e100 	.word	0xe000e100
 8001b70:	e000ed00 	.word	0xe000ed00

08001b74 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b74:	b480      	push	{r7}
 8001b76:	b089      	sub	sp, #36	; 0x24
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	60f8      	str	r0, [r7, #12]
 8001b7c:	60b9      	str	r1, [r7, #8]
 8001b7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	f003 0307 	and.w	r3, r3, #7
 8001b86:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b88:	69fb      	ldr	r3, [r7, #28]
 8001b8a:	f1c3 0307 	rsb	r3, r3, #7
 8001b8e:	2b04      	cmp	r3, #4
 8001b90:	bf28      	it	cs
 8001b92:	2304      	movcs	r3, #4
 8001b94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b96:	69fb      	ldr	r3, [r7, #28]
 8001b98:	3304      	adds	r3, #4
 8001b9a:	2b06      	cmp	r3, #6
 8001b9c:	d902      	bls.n	8001ba4 <NVIC_EncodePriority+0x30>
 8001b9e:	69fb      	ldr	r3, [r7, #28]
 8001ba0:	3b03      	subs	r3, #3
 8001ba2:	e000      	b.n	8001ba6 <NVIC_EncodePriority+0x32>
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ba8:	f04f 32ff 	mov.w	r2, #4294967295
 8001bac:	69bb      	ldr	r3, [r7, #24]
 8001bae:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb2:	43da      	mvns	r2, r3
 8001bb4:	68bb      	ldr	r3, [r7, #8]
 8001bb6:	401a      	ands	r2, r3
 8001bb8:	697b      	ldr	r3, [r7, #20]
 8001bba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001bbc:	f04f 31ff 	mov.w	r1, #4294967295
 8001bc0:	697b      	ldr	r3, [r7, #20]
 8001bc2:	fa01 f303 	lsl.w	r3, r1, r3
 8001bc6:	43d9      	mvns	r1, r3
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bcc:	4313      	orrs	r3, r2
         );
}
 8001bce:	4618      	mov	r0, r3
 8001bd0:	3724      	adds	r7, #36	; 0x24
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bc80      	pop	{r7}
 8001bd6:	4770      	bx	lr

08001bd8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b082      	sub	sp, #8
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	3b01      	subs	r3, #1
 8001be4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001be8:	d301      	bcc.n	8001bee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001bea:	2301      	movs	r3, #1
 8001bec:	e00f      	b.n	8001c0e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001bee:	4a0a      	ldr	r2, [pc, #40]	; (8001c18 <SysTick_Config+0x40>)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	3b01      	subs	r3, #1
 8001bf4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001bf6:	210f      	movs	r1, #15
 8001bf8:	f04f 30ff 	mov.w	r0, #4294967295
 8001bfc:	f7ff ff90 	bl	8001b20 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c00:	4b05      	ldr	r3, [pc, #20]	; (8001c18 <SysTick_Config+0x40>)
 8001c02:	2200      	movs	r2, #0
 8001c04:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c06:	4b04      	ldr	r3, [pc, #16]	; (8001c18 <SysTick_Config+0x40>)
 8001c08:	2207      	movs	r2, #7
 8001c0a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c0c:	2300      	movs	r3, #0
}
 8001c0e:	4618      	mov	r0, r3
 8001c10:	3708      	adds	r7, #8
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}
 8001c16:	bf00      	nop
 8001c18:	e000e010 	.word	0xe000e010

08001c1c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b082      	sub	sp, #8
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c24:	6878      	ldr	r0, [r7, #4]
 8001c26:	f7ff ff2d 	bl	8001a84 <__NVIC_SetPriorityGrouping>
}
 8001c2a:	bf00      	nop
 8001c2c:	3708      	adds	r7, #8
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bd80      	pop	{r7, pc}

08001c32 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c32:	b580      	push	{r7, lr}
 8001c34:	b086      	sub	sp, #24
 8001c36:	af00      	add	r7, sp, #0
 8001c38:	4603      	mov	r3, r0
 8001c3a:	60b9      	str	r1, [r7, #8]
 8001c3c:	607a      	str	r2, [r7, #4]
 8001c3e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c40:	2300      	movs	r3, #0
 8001c42:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c44:	f7ff ff42 	bl	8001acc <__NVIC_GetPriorityGrouping>
 8001c48:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c4a:	687a      	ldr	r2, [r7, #4]
 8001c4c:	68b9      	ldr	r1, [r7, #8]
 8001c4e:	6978      	ldr	r0, [r7, #20]
 8001c50:	f7ff ff90 	bl	8001b74 <NVIC_EncodePriority>
 8001c54:	4602      	mov	r2, r0
 8001c56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c5a:	4611      	mov	r1, r2
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	f7ff ff5f 	bl	8001b20 <__NVIC_SetPriority>
}
 8001c62:	bf00      	nop
 8001c64:	3718      	adds	r7, #24
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bd80      	pop	{r7, pc}

08001c6a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c6a:	b580      	push	{r7, lr}
 8001c6c:	b082      	sub	sp, #8
 8001c6e:	af00      	add	r7, sp, #0
 8001c70:	4603      	mov	r3, r0
 8001c72:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c78:	4618      	mov	r0, r3
 8001c7a:	f7ff ff35 	bl	8001ae8 <__NVIC_EnableIRQ>
}
 8001c7e:	bf00      	nop
 8001c80:	3708      	adds	r7, #8
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}

08001c86 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c86:	b580      	push	{r7, lr}
 8001c88:	b082      	sub	sp, #8
 8001c8a:	af00      	add	r7, sp, #0
 8001c8c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c8e:	6878      	ldr	r0, [r7, #4]
 8001c90:	f7ff ffa2 	bl	8001bd8 <SysTick_Config>
 8001c94:	4603      	mov	r3, r0
}
 8001c96:	4618      	mov	r0, r3
 8001c98:	3708      	adds	r7, #8
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bd80      	pop	{r7, pc}
	...

08001ca0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	b08b      	sub	sp, #44	; 0x2c
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
 8001ca8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001caa:	2300      	movs	r3, #0
 8001cac:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001cb2:	e169      	b.n	8001f88 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001cb4:	2201      	movs	r2, #1
 8001cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cbc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	69fa      	ldr	r2, [r7, #28]
 8001cc4:	4013      	ands	r3, r2
 8001cc6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001cc8:	69ba      	ldr	r2, [r7, #24]
 8001cca:	69fb      	ldr	r3, [r7, #28]
 8001ccc:	429a      	cmp	r2, r3
 8001cce:	f040 8158 	bne.w	8001f82 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	685b      	ldr	r3, [r3, #4]
 8001cd6:	4a9a      	ldr	r2, [pc, #616]	; (8001f40 <HAL_GPIO_Init+0x2a0>)
 8001cd8:	4293      	cmp	r3, r2
 8001cda:	d05e      	beq.n	8001d9a <HAL_GPIO_Init+0xfa>
 8001cdc:	4a98      	ldr	r2, [pc, #608]	; (8001f40 <HAL_GPIO_Init+0x2a0>)
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d875      	bhi.n	8001dce <HAL_GPIO_Init+0x12e>
 8001ce2:	4a98      	ldr	r2, [pc, #608]	; (8001f44 <HAL_GPIO_Init+0x2a4>)
 8001ce4:	4293      	cmp	r3, r2
 8001ce6:	d058      	beq.n	8001d9a <HAL_GPIO_Init+0xfa>
 8001ce8:	4a96      	ldr	r2, [pc, #600]	; (8001f44 <HAL_GPIO_Init+0x2a4>)
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d86f      	bhi.n	8001dce <HAL_GPIO_Init+0x12e>
 8001cee:	4a96      	ldr	r2, [pc, #600]	; (8001f48 <HAL_GPIO_Init+0x2a8>)
 8001cf0:	4293      	cmp	r3, r2
 8001cf2:	d052      	beq.n	8001d9a <HAL_GPIO_Init+0xfa>
 8001cf4:	4a94      	ldr	r2, [pc, #592]	; (8001f48 <HAL_GPIO_Init+0x2a8>)
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d869      	bhi.n	8001dce <HAL_GPIO_Init+0x12e>
 8001cfa:	4a94      	ldr	r2, [pc, #592]	; (8001f4c <HAL_GPIO_Init+0x2ac>)
 8001cfc:	4293      	cmp	r3, r2
 8001cfe:	d04c      	beq.n	8001d9a <HAL_GPIO_Init+0xfa>
 8001d00:	4a92      	ldr	r2, [pc, #584]	; (8001f4c <HAL_GPIO_Init+0x2ac>)
 8001d02:	4293      	cmp	r3, r2
 8001d04:	d863      	bhi.n	8001dce <HAL_GPIO_Init+0x12e>
 8001d06:	4a92      	ldr	r2, [pc, #584]	; (8001f50 <HAL_GPIO_Init+0x2b0>)
 8001d08:	4293      	cmp	r3, r2
 8001d0a:	d046      	beq.n	8001d9a <HAL_GPIO_Init+0xfa>
 8001d0c:	4a90      	ldr	r2, [pc, #576]	; (8001f50 <HAL_GPIO_Init+0x2b0>)
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d85d      	bhi.n	8001dce <HAL_GPIO_Init+0x12e>
 8001d12:	2b12      	cmp	r3, #18
 8001d14:	d82a      	bhi.n	8001d6c <HAL_GPIO_Init+0xcc>
 8001d16:	2b12      	cmp	r3, #18
 8001d18:	d859      	bhi.n	8001dce <HAL_GPIO_Init+0x12e>
 8001d1a:	a201      	add	r2, pc, #4	; (adr r2, 8001d20 <HAL_GPIO_Init+0x80>)
 8001d1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d20:	08001d9b 	.word	0x08001d9b
 8001d24:	08001d75 	.word	0x08001d75
 8001d28:	08001d87 	.word	0x08001d87
 8001d2c:	08001dc9 	.word	0x08001dc9
 8001d30:	08001dcf 	.word	0x08001dcf
 8001d34:	08001dcf 	.word	0x08001dcf
 8001d38:	08001dcf 	.word	0x08001dcf
 8001d3c:	08001dcf 	.word	0x08001dcf
 8001d40:	08001dcf 	.word	0x08001dcf
 8001d44:	08001dcf 	.word	0x08001dcf
 8001d48:	08001dcf 	.word	0x08001dcf
 8001d4c:	08001dcf 	.word	0x08001dcf
 8001d50:	08001dcf 	.word	0x08001dcf
 8001d54:	08001dcf 	.word	0x08001dcf
 8001d58:	08001dcf 	.word	0x08001dcf
 8001d5c:	08001dcf 	.word	0x08001dcf
 8001d60:	08001dcf 	.word	0x08001dcf
 8001d64:	08001d7d 	.word	0x08001d7d
 8001d68:	08001d91 	.word	0x08001d91
 8001d6c:	4a79      	ldr	r2, [pc, #484]	; (8001f54 <HAL_GPIO_Init+0x2b4>)
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d013      	beq.n	8001d9a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001d72:	e02c      	b.n	8001dce <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	68db      	ldr	r3, [r3, #12]
 8001d78:	623b      	str	r3, [r7, #32]
          break;
 8001d7a:	e029      	b.n	8001dd0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	68db      	ldr	r3, [r3, #12]
 8001d80:	3304      	adds	r3, #4
 8001d82:	623b      	str	r3, [r7, #32]
          break;
 8001d84:	e024      	b.n	8001dd0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	68db      	ldr	r3, [r3, #12]
 8001d8a:	3308      	adds	r3, #8
 8001d8c:	623b      	str	r3, [r7, #32]
          break;
 8001d8e:	e01f      	b.n	8001dd0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	68db      	ldr	r3, [r3, #12]
 8001d94:	330c      	adds	r3, #12
 8001d96:	623b      	str	r3, [r7, #32]
          break;
 8001d98:	e01a      	b.n	8001dd0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	689b      	ldr	r3, [r3, #8]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d102      	bne.n	8001da8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001da2:	2304      	movs	r3, #4
 8001da4:	623b      	str	r3, [r7, #32]
          break;
 8001da6:	e013      	b.n	8001dd0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	689b      	ldr	r3, [r3, #8]
 8001dac:	2b01      	cmp	r3, #1
 8001dae:	d105      	bne.n	8001dbc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001db0:	2308      	movs	r3, #8
 8001db2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	69fa      	ldr	r2, [r7, #28]
 8001db8:	611a      	str	r2, [r3, #16]
          break;
 8001dba:	e009      	b.n	8001dd0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001dbc:	2308      	movs	r3, #8
 8001dbe:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	69fa      	ldr	r2, [r7, #28]
 8001dc4:	615a      	str	r2, [r3, #20]
          break;
 8001dc6:	e003      	b.n	8001dd0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001dc8:	2300      	movs	r3, #0
 8001dca:	623b      	str	r3, [r7, #32]
          break;
 8001dcc:	e000      	b.n	8001dd0 <HAL_GPIO_Init+0x130>
          break;
 8001dce:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001dd0:	69bb      	ldr	r3, [r7, #24]
 8001dd2:	2bff      	cmp	r3, #255	; 0xff
 8001dd4:	d801      	bhi.n	8001dda <HAL_GPIO_Init+0x13a>
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	e001      	b.n	8001dde <HAL_GPIO_Init+0x13e>
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	3304      	adds	r3, #4
 8001dde:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001de0:	69bb      	ldr	r3, [r7, #24]
 8001de2:	2bff      	cmp	r3, #255	; 0xff
 8001de4:	d802      	bhi.n	8001dec <HAL_GPIO_Init+0x14c>
 8001de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001de8:	009b      	lsls	r3, r3, #2
 8001dea:	e002      	b.n	8001df2 <HAL_GPIO_Init+0x152>
 8001dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dee:	3b08      	subs	r3, #8
 8001df0:	009b      	lsls	r3, r3, #2
 8001df2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001df4:	697b      	ldr	r3, [r7, #20]
 8001df6:	681a      	ldr	r2, [r3, #0]
 8001df8:	210f      	movs	r1, #15
 8001dfa:	693b      	ldr	r3, [r7, #16]
 8001dfc:	fa01 f303 	lsl.w	r3, r1, r3
 8001e00:	43db      	mvns	r3, r3
 8001e02:	401a      	ands	r2, r3
 8001e04:	6a39      	ldr	r1, [r7, #32]
 8001e06:	693b      	ldr	r3, [r7, #16]
 8001e08:	fa01 f303 	lsl.w	r3, r1, r3
 8001e0c:	431a      	orrs	r2, r3
 8001e0e:	697b      	ldr	r3, [r7, #20]
 8001e10:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	685b      	ldr	r3, [r3, #4]
 8001e16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	f000 80b1 	beq.w	8001f82 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001e20:	4b4d      	ldr	r3, [pc, #308]	; (8001f58 <HAL_GPIO_Init+0x2b8>)
 8001e22:	699b      	ldr	r3, [r3, #24]
 8001e24:	4a4c      	ldr	r2, [pc, #304]	; (8001f58 <HAL_GPIO_Init+0x2b8>)
 8001e26:	f043 0301 	orr.w	r3, r3, #1
 8001e2a:	6193      	str	r3, [r2, #24]
 8001e2c:	4b4a      	ldr	r3, [pc, #296]	; (8001f58 <HAL_GPIO_Init+0x2b8>)
 8001e2e:	699b      	ldr	r3, [r3, #24]
 8001e30:	f003 0301 	and.w	r3, r3, #1
 8001e34:	60bb      	str	r3, [r7, #8]
 8001e36:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001e38:	4a48      	ldr	r2, [pc, #288]	; (8001f5c <HAL_GPIO_Init+0x2bc>)
 8001e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e3c:	089b      	lsrs	r3, r3, #2
 8001e3e:	3302      	adds	r3, #2
 8001e40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e44:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e48:	f003 0303 	and.w	r3, r3, #3
 8001e4c:	009b      	lsls	r3, r3, #2
 8001e4e:	220f      	movs	r2, #15
 8001e50:	fa02 f303 	lsl.w	r3, r2, r3
 8001e54:	43db      	mvns	r3, r3
 8001e56:	68fa      	ldr	r2, [r7, #12]
 8001e58:	4013      	ands	r3, r2
 8001e5a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	4a40      	ldr	r2, [pc, #256]	; (8001f60 <HAL_GPIO_Init+0x2c0>)
 8001e60:	4293      	cmp	r3, r2
 8001e62:	d013      	beq.n	8001e8c <HAL_GPIO_Init+0x1ec>
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	4a3f      	ldr	r2, [pc, #252]	; (8001f64 <HAL_GPIO_Init+0x2c4>)
 8001e68:	4293      	cmp	r3, r2
 8001e6a:	d00d      	beq.n	8001e88 <HAL_GPIO_Init+0x1e8>
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	4a3e      	ldr	r2, [pc, #248]	; (8001f68 <HAL_GPIO_Init+0x2c8>)
 8001e70:	4293      	cmp	r3, r2
 8001e72:	d007      	beq.n	8001e84 <HAL_GPIO_Init+0x1e4>
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	4a3d      	ldr	r2, [pc, #244]	; (8001f6c <HAL_GPIO_Init+0x2cc>)
 8001e78:	4293      	cmp	r3, r2
 8001e7a:	d101      	bne.n	8001e80 <HAL_GPIO_Init+0x1e0>
 8001e7c:	2303      	movs	r3, #3
 8001e7e:	e006      	b.n	8001e8e <HAL_GPIO_Init+0x1ee>
 8001e80:	2304      	movs	r3, #4
 8001e82:	e004      	b.n	8001e8e <HAL_GPIO_Init+0x1ee>
 8001e84:	2302      	movs	r3, #2
 8001e86:	e002      	b.n	8001e8e <HAL_GPIO_Init+0x1ee>
 8001e88:	2301      	movs	r3, #1
 8001e8a:	e000      	b.n	8001e8e <HAL_GPIO_Init+0x1ee>
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e90:	f002 0203 	and.w	r2, r2, #3
 8001e94:	0092      	lsls	r2, r2, #2
 8001e96:	4093      	lsls	r3, r2
 8001e98:	68fa      	ldr	r2, [r7, #12]
 8001e9a:	4313      	orrs	r3, r2
 8001e9c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001e9e:	492f      	ldr	r1, [pc, #188]	; (8001f5c <HAL_GPIO_Init+0x2bc>)
 8001ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ea2:	089b      	lsrs	r3, r3, #2
 8001ea4:	3302      	adds	r3, #2
 8001ea6:	68fa      	ldr	r2, [r7, #12]
 8001ea8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d006      	beq.n	8001ec6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001eb8:	4b2d      	ldr	r3, [pc, #180]	; (8001f70 <HAL_GPIO_Init+0x2d0>)
 8001eba:	681a      	ldr	r2, [r3, #0]
 8001ebc:	492c      	ldr	r1, [pc, #176]	; (8001f70 <HAL_GPIO_Init+0x2d0>)
 8001ebe:	69bb      	ldr	r3, [r7, #24]
 8001ec0:	4313      	orrs	r3, r2
 8001ec2:	600b      	str	r3, [r1, #0]
 8001ec4:	e006      	b.n	8001ed4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001ec6:	4b2a      	ldr	r3, [pc, #168]	; (8001f70 <HAL_GPIO_Init+0x2d0>)
 8001ec8:	681a      	ldr	r2, [r3, #0]
 8001eca:	69bb      	ldr	r3, [r7, #24]
 8001ecc:	43db      	mvns	r3, r3
 8001ece:	4928      	ldr	r1, [pc, #160]	; (8001f70 <HAL_GPIO_Init+0x2d0>)
 8001ed0:	4013      	ands	r3, r2
 8001ed2:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d006      	beq.n	8001eee <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001ee0:	4b23      	ldr	r3, [pc, #140]	; (8001f70 <HAL_GPIO_Init+0x2d0>)
 8001ee2:	685a      	ldr	r2, [r3, #4]
 8001ee4:	4922      	ldr	r1, [pc, #136]	; (8001f70 <HAL_GPIO_Init+0x2d0>)
 8001ee6:	69bb      	ldr	r3, [r7, #24]
 8001ee8:	4313      	orrs	r3, r2
 8001eea:	604b      	str	r3, [r1, #4]
 8001eec:	e006      	b.n	8001efc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001eee:	4b20      	ldr	r3, [pc, #128]	; (8001f70 <HAL_GPIO_Init+0x2d0>)
 8001ef0:	685a      	ldr	r2, [r3, #4]
 8001ef2:	69bb      	ldr	r3, [r7, #24]
 8001ef4:	43db      	mvns	r3, r3
 8001ef6:	491e      	ldr	r1, [pc, #120]	; (8001f70 <HAL_GPIO_Init+0x2d0>)
 8001ef8:	4013      	ands	r3, r2
 8001efa:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d006      	beq.n	8001f16 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001f08:	4b19      	ldr	r3, [pc, #100]	; (8001f70 <HAL_GPIO_Init+0x2d0>)
 8001f0a:	689a      	ldr	r2, [r3, #8]
 8001f0c:	4918      	ldr	r1, [pc, #96]	; (8001f70 <HAL_GPIO_Init+0x2d0>)
 8001f0e:	69bb      	ldr	r3, [r7, #24]
 8001f10:	4313      	orrs	r3, r2
 8001f12:	608b      	str	r3, [r1, #8]
 8001f14:	e006      	b.n	8001f24 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001f16:	4b16      	ldr	r3, [pc, #88]	; (8001f70 <HAL_GPIO_Init+0x2d0>)
 8001f18:	689a      	ldr	r2, [r3, #8]
 8001f1a:	69bb      	ldr	r3, [r7, #24]
 8001f1c:	43db      	mvns	r3, r3
 8001f1e:	4914      	ldr	r1, [pc, #80]	; (8001f70 <HAL_GPIO_Init+0x2d0>)
 8001f20:	4013      	ands	r3, r2
 8001f22:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d021      	beq.n	8001f74 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001f30:	4b0f      	ldr	r3, [pc, #60]	; (8001f70 <HAL_GPIO_Init+0x2d0>)
 8001f32:	68da      	ldr	r2, [r3, #12]
 8001f34:	490e      	ldr	r1, [pc, #56]	; (8001f70 <HAL_GPIO_Init+0x2d0>)
 8001f36:	69bb      	ldr	r3, [r7, #24]
 8001f38:	4313      	orrs	r3, r2
 8001f3a:	60cb      	str	r3, [r1, #12]
 8001f3c:	e021      	b.n	8001f82 <HAL_GPIO_Init+0x2e2>
 8001f3e:	bf00      	nop
 8001f40:	10320000 	.word	0x10320000
 8001f44:	10310000 	.word	0x10310000
 8001f48:	10220000 	.word	0x10220000
 8001f4c:	10210000 	.word	0x10210000
 8001f50:	10120000 	.word	0x10120000
 8001f54:	10110000 	.word	0x10110000
 8001f58:	40021000 	.word	0x40021000
 8001f5c:	40010000 	.word	0x40010000
 8001f60:	40010800 	.word	0x40010800
 8001f64:	40010c00 	.word	0x40010c00
 8001f68:	40011000 	.word	0x40011000
 8001f6c:	40011400 	.word	0x40011400
 8001f70:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001f74:	4b0b      	ldr	r3, [pc, #44]	; (8001fa4 <HAL_GPIO_Init+0x304>)
 8001f76:	68da      	ldr	r2, [r3, #12]
 8001f78:	69bb      	ldr	r3, [r7, #24]
 8001f7a:	43db      	mvns	r3, r3
 8001f7c:	4909      	ldr	r1, [pc, #36]	; (8001fa4 <HAL_GPIO_Init+0x304>)
 8001f7e:	4013      	ands	r3, r2
 8001f80:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f84:	3301      	adds	r3, #1
 8001f86:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	681a      	ldr	r2, [r3, #0]
 8001f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f8e:	fa22 f303 	lsr.w	r3, r2, r3
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	f47f ae8e 	bne.w	8001cb4 <HAL_GPIO_Init+0x14>
  }
}
 8001f98:	bf00      	nop
 8001f9a:	bf00      	nop
 8001f9c:	372c      	adds	r7, #44	; 0x2c
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bc80      	pop	{r7}
 8001fa2:	4770      	bx	lr
 8001fa4:	40010400 	.word	0x40010400

08001fa8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	b083      	sub	sp, #12
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
 8001fb0:	460b      	mov	r3, r1
 8001fb2:	807b      	strh	r3, [r7, #2]
 8001fb4:	4613      	mov	r3, r2
 8001fb6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001fb8:	787b      	ldrb	r3, [r7, #1]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d003      	beq.n	8001fc6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001fbe:	887a      	ldrh	r2, [r7, #2]
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001fc4:	e003      	b.n	8001fce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001fc6:	887b      	ldrh	r3, [r7, #2]
 8001fc8:	041a      	lsls	r2, r3, #16
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	611a      	str	r2, [r3, #16]
}
 8001fce:	bf00      	nop
 8001fd0:	370c      	adds	r7, #12
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bc80      	pop	{r7}
 8001fd6:	4770      	bx	lr

08001fd8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b082      	sub	sp, #8
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	4603      	mov	r3, r0
 8001fe0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001fe2:	4b08      	ldr	r3, [pc, #32]	; (8002004 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001fe4:	695a      	ldr	r2, [r3, #20]
 8001fe6:	88fb      	ldrh	r3, [r7, #6]
 8001fe8:	4013      	ands	r3, r2
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d006      	beq.n	8001ffc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001fee:	4a05      	ldr	r2, [pc, #20]	; (8002004 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001ff0:	88fb      	ldrh	r3, [r7, #6]
 8001ff2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001ff4:	88fb      	ldrh	r3, [r7, #6]
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	f7fe fdee 	bl	8000bd8 <HAL_GPIO_EXTI_Callback>
  }
}
 8001ffc:	bf00      	nop
 8001ffe:	3708      	adds	r7, #8
 8002000:	46bd      	mov	sp, r7
 8002002:	bd80      	pop	{r7, pc}
 8002004:	40010400 	.word	0x40010400

08002008 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b086      	sub	sp, #24
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2b00      	cmp	r3, #0
 8002014:	d101      	bne.n	800201a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002016:	2301      	movs	r3, #1
 8002018:	e272      	b.n	8002500 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f003 0301 	and.w	r3, r3, #1
 8002022:	2b00      	cmp	r3, #0
 8002024:	f000 8087 	beq.w	8002136 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002028:	4b92      	ldr	r3, [pc, #584]	; (8002274 <HAL_RCC_OscConfig+0x26c>)
 800202a:	685b      	ldr	r3, [r3, #4]
 800202c:	f003 030c 	and.w	r3, r3, #12
 8002030:	2b04      	cmp	r3, #4
 8002032:	d00c      	beq.n	800204e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002034:	4b8f      	ldr	r3, [pc, #572]	; (8002274 <HAL_RCC_OscConfig+0x26c>)
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	f003 030c 	and.w	r3, r3, #12
 800203c:	2b08      	cmp	r3, #8
 800203e:	d112      	bne.n	8002066 <HAL_RCC_OscConfig+0x5e>
 8002040:	4b8c      	ldr	r3, [pc, #560]	; (8002274 <HAL_RCC_OscConfig+0x26c>)
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002048:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800204c:	d10b      	bne.n	8002066 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800204e:	4b89      	ldr	r3, [pc, #548]	; (8002274 <HAL_RCC_OscConfig+0x26c>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002056:	2b00      	cmp	r3, #0
 8002058:	d06c      	beq.n	8002134 <HAL_RCC_OscConfig+0x12c>
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	685b      	ldr	r3, [r3, #4]
 800205e:	2b00      	cmp	r3, #0
 8002060:	d168      	bne.n	8002134 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002062:	2301      	movs	r3, #1
 8002064:	e24c      	b.n	8002500 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800206e:	d106      	bne.n	800207e <HAL_RCC_OscConfig+0x76>
 8002070:	4b80      	ldr	r3, [pc, #512]	; (8002274 <HAL_RCC_OscConfig+0x26c>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	4a7f      	ldr	r2, [pc, #508]	; (8002274 <HAL_RCC_OscConfig+0x26c>)
 8002076:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800207a:	6013      	str	r3, [r2, #0]
 800207c:	e02e      	b.n	80020dc <HAL_RCC_OscConfig+0xd4>
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	2b00      	cmp	r3, #0
 8002084:	d10c      	bne.n	80020a0 <HAL_RCC_OscConfig+0x98>
 8002086:	4b7b      	ldr	r3, [pc, #492]	; (8002274 <HAL_RCC_OscConfig+0x26c>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	4a7a      	ldr	r2, [pc, #488]	; (8002274 <HAL_RCC_OscConfig+0x26c>)
 800208c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002090:	6013      	str	r3, [r2, #0]
 8002092:	4b78      	ldr	r3, [pc, #480]	; (8002274 <HAL_RCC_OscConfig+0x26c>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	4a77      	ldr	r2, [pc, #476]	; (8002274 <HAL_RCC_OscConfig+0x26c>)
 8002098:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800209c:	6013      	str	r3, [r2, #0]
 800209e:	e01d      	b.n	80020dc <HAL_RCC_OscConfig+0xd4>
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80020a8:	d10c      	bne.n	80020c4 <HAL_RCC_OscConfig+0xbc>
 80020aa:	4b72      	ldr	r3, [pc, #456]	; (8002274 <HAL_RCC_OscConfig+0x26c>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	4a71      	ldr	r2, [pc, #452]	; (8002274 <HAL_RCC_OscConfig+0x26c>)
 80020b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80020b4:	6013      	str	r3, [r2, #0]
 80020b6:	4b6f      	ldr	r3, [pc, #444]	; (8002274 <HAL_RCC_OscConfig+0x26c>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	4a6e      	ldr	r2, [pc, #440]	; (8002274 <HAL_RCC_OscConfig+0x26c>)
 80020bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020c0:	6013      	str	r3, [r2, #0]
 80020c2:	e00b      	b.n	80020dc <HAL_RCC_OscConfig+0xd4>
 80020c4:	4b6b      	ldr	r3, [pc, #428]	; (8002274 <HAL_RCC_OscConfig+0x26c>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4a6a      	ldr	r2, [pc, #424]	; (8002274 <HAL_RCC_OscConfig+0x26c>)
 80020ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020ce:	6013      	str	r3, [r2, #0]
 80020d0:	4b68      	ldr	r3, [pc, #416]	; (8002274 <HAL_RCC_OscConfig+0x26c>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4a67      	ldr	r2, [pc, #412]	; (8002274 <HAL_RCC_OscConfig+0x26c>)
 80020d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80020da:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d013      	beq.n	800210c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020e4:	f7ff fca0 	bl	8001a28 <HAL_GetTick>
 80020e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020ea:	e008      	b.n	80020fe <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020ec:	f7ff fc9c 	bl	8001a28 <HAL_GetTick>
 80020f0:	4602      	mov	r2, r0
 80020f2:	693b      	ldr	r3, [r7, #16]
 80020f4:	1ad3      	subs	r3, r2, r3
 80020f6:	2b64      	cmp	r3, #100	; 0x64
 80020f8:	d901      	bls.n	80020fe <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80020fa:	2303      	movs	r3, #3
 80020fc:	e200      	b.n	8002500 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020fe:	4b5d      	ldr	r3, [pc, #372]	; (8002274 <HAL_RCC_OscConfig+0x26c>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002106:	2b00      	cmp	r3, #0
 8002108:	d0f0      	beq.n	80020ec <HAL_RCC_OscConfig+0xe4>
 800210a:	e014      	b.n	8002136 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800210c:	f7ff fc8c 	bl	8001a28 <HAL_GetTick>
 8002110:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002112:	e008      	b.n	8002126 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002114:	f7ff fc88 	bl	8001a28 <HAL_GetTick>
 8002118:	4602      	mov	r2, r0
 800211a:	693b      	ldr	r3, [r7, #16]
 800211c:	1ad3      	subs	r3, r2, r3
 800211e:	2b64      	cmp	r3, #100	; 0x64
 8002120:	d901      	bls.n	8002126 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002122:	2303      	movs	r3, #3
 8002124:	e1ec      	b.n	8002500 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002126:	4b53      	ldr	r3, [pc, #332]	; (8002274 <HAL_RCC_OscConfig+0x26c>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800212e:	2b00      	cmp	r3, #0
 8002130:	d1f0      	bne.n	8002114 <HAL_RCC_OscConfig+0x10c>
 8002132:	e000      	b.n	8002136 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002134:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f003 0302 	and.w	r3, r3, #2
 800213e:	2b00      	cmp	r3, #0
 8002140:	d063      	beq.n	800220a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002142:	4b4c      	ldr	r3, [pc, #304]	; (8002274 <HAL_RCC_OscConfig+0x26c>)
 8002144:	685b      	ldr	r3, [r3, #4]
 8002146:	f003 030c 	and.w	r3, r3, #12
 800214a:	2b00      	cmp	r3, #0
 800214c:	d00b      	beq.n	8002166 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800214e:	4b49      	ldr	r3, [pc, #292]	; (8002274 <HAL_RCC_OscConfig+0x26c>)
 8002150:	685b      	ldr	r3, [r3, #4]
 8002152:	f003 030c 	and.w	r3, r3, #12
 8002156:	2b08      	cmp	r3, #8
 8002158:	d11c      	bne.n	8002194 <HAL_RCC_OscConfig+0x18c>
 800215a:	4b46      	ldr	r3, [pc, #280]	; (8002274 <HAL_RCC_OscConfig+0x26c>)
 800215c:	685b      	ldr	r3, [r3, #4]
 800215e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002162:	2b00      	cmp	r3, #0
 8002164:	d116      	bne.n	8002194 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002166:	4b43      	ldr	r3, [pc, #268]	; (8002274 <HAL_RCC_OscConfig+0x26c>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f003 0302 	and.w	r3, r3, #2
 800216e:	2b00      	cmp	r3, #0
 8002170:	d005      	beq.n	800217e <HAL_RCC_OscConfig+0x176>
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	691b      	ldr	r3, [r3, #16]
 8002176:	2b01      	cmp	r3, #1
 8002178:	d001      	beq.n	800217e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800217a:	2301      	movs	r3, #1
 800217c:	e1c0      	b.n	8002500 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800217e:	4b3d      	ldr	r3, [pc, #244]	; (8002274 <HAL_RCC_OscConfig+0x26c>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	695b      	ldr	r3, [r3, #20]
 800218a:	00db      	lsls	r3, r3, #3
 800218c:	4939      	ldr	r1, [pc, #228]	; (8002274 <HAL_RCC_OscConfig+0x26c>)
 800218e:	4313      	orrs	r3, r2
 8002190:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002192:	e03a      	b.n	800220a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	691b      	ldr	r3, [r3, #16]
 8002198:	2b00      	cmp	r3, #0
 800219a:	d020      	beq.n	80021de <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800219c:	4b36      	ldr	r3, [pc, #216]	; (8002278 <HAL_RCC_OscConfig+0x270>)
 800219e:	2201      	movs	r2, #1
 80021a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021a2:	f7ff fc41 	bl	8001a28 <HAL_GetTick>
 80021a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021a8:	e008      	b.n	80021bc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021aa:	f7ff fc3d 	bl	8001a28 <HAL_GetTick>
 80021ae:	4602      	mov	r2, r0
 80021b0:	693b      	ldr	r3, [r7, #16]
 80021b2:	1ad3      	subs	r3, r2, r3
 80021b4:	2b02      	cmp	r3, #2
 80021b6:	d901      	bls.n	80021bc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80021b8:	2303      	movs	r3, #3
 80021ba:	e1a1      	b.n	8002500 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021bc:	4b2d      	ldr	r3, [pc, #180]	; (8002274 <HAL_RCC_OscConfig+0x26c>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f003 0302 	and.w	r3, r3, #2
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d0f0      	beq.n	80021aa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021c8:	4b2a      	ldr	r3, [pc, #168]	; (8002274 <HAL_RCC_OscConfig+0x26c>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	695b      	ldr	r3, [r3, #20]
 80021d4:	00db      	lsls	r3, r3, #3
 80021d6:	4927      	ldr	r1, [pc, #156]	; (8002274 <HAL_RCC_OscConfig+0x26c>)
 80021d8:	4313      	orrs	r3, r2
 80021da:	600b      	str	r3, [r1, #0]
 80021dc:	e015      	b.n	800220a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80021de:	4b26      	ldr	r3, [pc, #152]	; (8002278 <HAL_RCC_OscConfig+0x270>)
 80021e0:	2200      	movs	r2, #0
 80021e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021e4:	f7ff fc20 	bl	8001a28 <HAL_GetTick>
 80021e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021ea:	e008      	b.n	80021fe <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021ec:	f7ff fc1c 	bl	8001a28 <HAL_GetTick>
 80021f0:	4602      	mov	r2, r0
 80021f2:	693b      	ldr	r3, [r7, #16]
 80021f4:	1ad3      	subs	r3, r2, r3
 80021f6:	2b02      	cmp	r3, #2
 80021f8:	d901      	bls.n	80021fe <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80021fa:	2303      	movs	r3, #3
 80021fc:	e180      	b.n	8002500 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021fe:	4b1d      	ldr	r3, [pc, #116]	; (8002274 <HAL_RCC_OscConfig+0x26c>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f003 0302 	and.w	r3, r3, #2
 8002206:	2b00      	cmp	r3, #0
 8002208:	d1f0      	bne.n	80021ec <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f003 0308 	and.w	r3, r3, #8
 8002212:	2b00      	cmp	r3, #0
 8002214:	d03a      	beq.n	800228c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	699b      	ldr	r3, [r3, #24]
 800221a:	2b00      	cmp	r3, #0
 800221c:	d019      	beq.n	8002252 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800221e:	4b17      	ldr	r3, [pc, #92]	; (800227c <HAL_RCC_OscConfig+0x274>)
 8002220:	2201      	movs	r2, #1
 8002222:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002224:	f7ff fc00 	bl	8001a28 <HAL_GetTick>
 8002228:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800222a:	e008      	b.n	800223e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800222c:	f7ff fbfc 	bl	8001a28 <HAL_GetTick>
 8002230:	4602      	mov	r2, r0
 8002232:	693b      	ldr	r3, [r7, #16]
 8002234:	1ad3      	subs	r3, r2, r3
 8002236:	2b02      	cmp	r3, #2
 8002238:	d901      	bls.n	800223e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800223a:	2303      	movs	r3, #3
 800223c:	e160      	b.n	8002500 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800223e:	4b0d      	ldr	r3, [pc, #52]	; (8002274 <HAL_RCC_OscConfig+0x26c>)
 8002240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002242:	f003 0302 	and.w	r3, r3, #2
 8002246:	2b00      	cmp	r3, #0
 8002248:	d0f0      	beq.n	800222c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800224a:	2001      	movs	r0, #1
 800224c:	f000 fad8 	bl	8002800 <RCC_Delay>
 8002250:	e01c      	b.n	800228c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002252:	4b0a      	ldr	r3, [pc, #40]	; (800227c <HAL_RCC_OscConfig+0x274>)
 8002254:	2200      	movs	r2, #0
 8002256:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002258:	f7ff fbe6 	bl	8001a28 <HAL_GetTick>
 800225c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800225e:	e00f      	b.n	8002280 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002260:	f7ff fbe2 	bl	8001a28 <HAL_GetTick>
 8002264:	4602      	mov	r2, r0
 8002266:	693b      	ldr	r3, [r7, #16]
 8002268:	1ad3      	subs	r3, r2, r3
 800226a:	2b02      	cmp	r3, #2
 800226c:	d908      	bls.n	8002280 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800226e:	2303      	movs	r3, #3
 8002270:	e146      	b.n	8002500 <HAL_RCC_OscConfig+0x4f8>
 8002272:	bf00      	nop
 8002274:	40021000 	.word	0x40021000
 8002278:	42420000 	.word	0x42420000
 800227c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002280:	4b92      	ldr	r3, [pc, #584]	; (80024cc <HAL_RCC_OscConfig+0x4c4>)
 8002282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002284:	f003 0302 	and.w	r3, r3, #2
 8002288:	2b00      	cmp	r3, #0
 800228a:	d1e9      	bne.n	8002260 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f003 0304 	and.w	r3, r3, #4
 8002294:	2b00      	cmp	r3, #0
 8002296:	f000 80a6 	beq.w	80023e6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800229a:	2300      	movs	r3, #0
 800229c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800229e:	4b8b      	ldr	r3, [pc, #556]	; (80024cc <HAL_RCC_OscConfig+0x4c4>)
 80022a0:	69db      	ldr	r3, [r3, #28]
 80022a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d10d      	bne.n	80022c6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022aa:	4b88      	ldr	r3, [pc, #544]	; (80024cc <HAL_RCC_OscConfig+0x4c4>)
 80022ac:	69db      	ldr	r3, [r3, #28]
 80022ae:	4a87      	ldr	r2, [pc, #540]	; (80024cc <HAL_RCC_OscConfig+0x4c4>)
 80022b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022b4:	61d3      	str	r3, [r2, #28]
 80022b6:	4b85      	ldr	r3, [pc, #532]	; (80024cc <HAL_RCC_OscConfig+0x4c4>)
 80022b8:	69db      	ldr	r3, [r3, #28]
 80022ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022be:	60bb      	str	r3, [r7, #8]
 80022c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80022c2:	2301      	movs	r3, #1
 80022c4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022c6:	4b82      	ldr	r3, [pc, #520]	; (80024d0 <HAL_RCC_OscConfig+0x4c8>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d118      	bne.n	8002304 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80022d2:	4b7f      	ldr	r3, [pc, #508]	; (80024d0 <HAL_RCC_OscConfig+0x4c8>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	4a7e      	ldr	r2, [pc, #504]	; (80024d0 <HAL_RCC_OscConfig+0x4c8>)
 80022d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80022de:	f7ff fba3 	bl	8001a28 <HAL_GetTick>
 80022e2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022e4:	e008      	b.n	80022f8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022e6:	f7ff fb9f 	bl	8001a28 <HAL_GetTick>
 80022ea:	4602      	mov	r2, r0
 80022ec:	693b      	ldr	r3, [r7, #16]
 80022ee:	1ad3      	subs	r3, r2, r3
 80022f0:	2b64      	cmp	r3, #100	; 0x64
 80022f2:	d901      	bls.n	80022f8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80022f4:	2303      	movs	r3, #3
 80022f6:	e103      	b.n	8002500 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022f8:	4b75      	ldr	r3, [pc, #468]	; (80024d0 <HAL_RCC_OscConfig+0x4c8>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002300:	2b00      	cmp	r3, #0
 8002302:	d0f0      	beq.n	80022e6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	68db      	ldr	r3, [r3, #12]
 8002308:	2b01      	cmp	r3, #1
 800230a:	d106      	bne.n	800231a <HAL_RCC_OscConfig+0x312>
 800230c:	4b6f      	ldr	r3, [pc, #444]	; (80024cc <HAL_RCC_OscConfig+0x4c4>)
 800230e:	6a1b      	ldr	r3, [r3, #32]
 8002310:	4a6e      	ldr	r2, [pc, #440]	; (80024cc <HAL_RCC_OscConfig+0x4c4>)
 8002312:	f043 0301 	orr.w	r3, r3, #1
 8002316:	6213      	str	r3, [r2, #32]
 8002318:	e02d      	b.n	8002376 <HAL_RCC_OscConfig+0x36e>
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	68db      	ldr	r3, [r3, #12]
 800231e:	2b00      	cmp	r3, #0
 8002320:	d10c      	bne.n	800233c <HAL_RCC_OscConfig+0x334>
 8002322:	4b6a      	ldr	r3, [pc, #424]	; (80024cc <HAL_RCC_OscConfig+0x4c4>)
 8002324:	6a1b      	ldr	r3, [r3, #32]
 8002326:	4a69      	ldr	r2, [pc, #420]	; (80024cc <HAL_RCC_OscConfig+0x4c4>)
 8002328:	f023 0301 	bic.w	r3, r3, #1
 800232c:	6213      	str	r3, [r2, #32]
 800232e:	4b67      	ldr	r3, [pc, #412]	; (80024cc <HAL_RCC_OscConfig+0x4c4>)
 8002330:	6a1b      	ldr	r3, [r3, #32]
 8002332:	4a66      	ldr	r2, [pc, #408]	; (80024cc <HAL_RCC_OscConfig+0x4c4>)
 8002334:	f023 0304 	bic.w	r3, r3, #4
 8002338:	6213      	str	r3, [r2, #32]
 800233a:	e01c      	b.n	8002376 <HAL_RCC_OscConfig+0x36e>
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	68db      	ldr	r3, [r3, #12]
 8002340:	2b05      	cmp	r3, #5
 8002342:	d10c      	bne.n	800235e <HAL_RCC_OscConfig+0x356>
 8002344:	4b61      	ldr	r3, [pc, #388]	; (80024cc <HAL_RCC_OscConfig+0x4c4>)
 8002346:	6a1b      	ldr	r3, [r3, #32]
 8002348:	4a60      	ldr	r2, [pc, #384]	; (80024cc <HAL_RCC_OscConfig+0x4c4>)
 800234a:	f043 0304 	orr.w	r3, r3, #4
 800234e:	6213      	str	r3, [r2, #32]
 8002350:	4b5e      	ldr	r3, [pc, #376]	; (80024cc <HAL_RCC_OscConfig+0x4c4>)
 8002352:	6a1b      	ldr	r3, [r3, #32]
 8002354:	4a5d      	ldr	r2, [pc, #372]	; (80024cc <HAL_RCC_OscConfig+0x4c4>)
 8002356:	f043 0301 	orr.w	r3, r3, #1
 800235a:	6213      	str	r3, [r2, #32]
 800235c:	e00b      	b.n	8002376 <HAL_RCC_OscConfig+0x36e>
 800235e:	4b5b      	ldr	r3, [pc, #364]	; (80024cc <HAL_RCC_OscConfig+0x4c4>)
 8002360:	6a1b      	ldr	r3, [r3, #32]
 8002362:	4a5a      	ldr	r2, [pc, #360]	; (80024cc <HAL_RCC_OscConfig+0x4c4>)
 8002364:	f023 0301 	bic.w	r3, r3, #1
 8002368:	6213      	str	r3, [r2, #32]
 800236a:	4b58      	ldr	r3, [pc, #352]	; (80024cc <HAL_RCC_OscConfig+0x4c4>)
 800236c:	6a1b      	ldr	r3, [r3, #32]
 800236e:	4a57      	ldr	r2, [pc, #348]	; (80024cc <HAL_RCC_OscConfig+0x4c4>)
 8002370:	f023 0304 	bic.w	r3, r3, #4
 8002374:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	68db      	ldr	r3, [r3, #12]
 800237a:	2b00      	cmp	r3, #0
 800237c:	d015      	beq.n	80023aa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800237e:	f7ff fb53 	bl	8001a28 <HAL_GetTick>
 8002382:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002384:	e00a      	b.n	800239c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002386:	f7ff fb4f 	bl	8001a28 <HAL_GetTick>
 800238a:	4602      	mov	r2, r0
 800238c:	693b      	ldr	r3, [r7, #16]
 800238e:	1ad3      	subs	r3, r2, r3
 8002390:	f241 3288 	movw	r2, #5000	; 0x1388
 8002394:	4293      	cmp	r3, r2
 8002396:	d901      	bls.n	800239c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002398:	2303      	movs	r3, #3
 800239a:	e0b1      	b.n	8002500 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800239c:	4b4b      	ldr	r3, [pc, #300]	; (80024cc <HAL_RCC_OscConfig+0x4c4>)
 800239e:	6a1b      	ldr	r3, [r3, #32]
 80023a0:	f003 0302 	and.w	r3, r3, #2
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d0ee      	beq.n	8002386 <HAL_RCC_OscConfig+0x37e>
 80023a8:	e014      	b.n	80023d4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023aa:	f7ff fb3d 	bl	8001a28 <HAL_GetTick>
 80023ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023b0:	e00a      	b.n	80023c8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023b2:	f7ff fb39 	bl	8001a28 <HAL_GetTick>
 80023b6:	4602      	mov	r2, r0
 80023b8:	693b      	ldr	r3, [r7, #16]
 80023ba:	1ad3      	subs	r3, r2, r3
 80023bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80023c0:	4293      	cmp	r3, r2
 80023c2:	d901      	bls.n	80023c8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80023c4:	2303      	movs	r3, #3
 80023c6:	e09b      	b.n	8002500 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023c8:	4b40      	ldr	r3, [pc, #256]	; (80024cc <HAL_RCC_OscConfig+0x4c4>)
 80023ca:	6a1b      	ldr	r3, [r3, #32]
 80023cc:	f003 0302 	and.w	r3, r3, #2
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d1ee      	bne.n	80023b2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80023d4:	7dfb      	ldrb	r3, [r7, #23]
 80023d6:	2b01      	cmp	r3, #1
 80023d8:	d105      	bne.n	80023e6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023da:	4b3c      	ldr	r3, [pc, #240]	; (80024cc <HAL_RCC_OscConfig+0x4c4>)
 80023dc:	69db      	ldr	r3, [r3, #28]
 80023de:	4a3b      	ldr	r2, [pc, #236]	; (80024cc <HAL_RCC_OscConfig+0x4c4>)
 80023e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80023e4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	69db      	ldr	r3, [r3, #28]
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	f000 8087 	beq.w	80024fe <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80023f0:	4b36      	ldr	r3, [pc, #216]	; (80024cc <HAL_RCC_OscConfig+0x4c4>)
 80023f2:	685b      	ldr	r3, [r3, #4]
 80023f4:	f003 030c 	and.w	r3, r3, #12
 80023f8:	2b08      	cmp	r3, #8
 80023fa:	d061      	beq.n	80024c0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	69db      	ldr	r3, [r3, #28]
 8002400:	2b02      	cmp	r3, #2
 8002402:	d146      	bne.n	8002492 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002404:	4b33      	ldr	r3, [pc, #204]	; (80024d4 <HAL_RCC_OscConfig+0x4cc>)
 8002406:	2200      	movs	r2, #0
 8002408:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800240a:	f7ff fb0d 	bl	8001a28 <HAL_GetTick>
 800240e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002410:	e008      	b.n	8002424 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002412:	f7ff fb09 	bl	8001a28 <HAL_GetTick>
 8002416:	4602      	mov	r2, r0
 8002418:	693b      	ldr	r3, [r7, #16]
 800241a:	1ad3      	subs	r3, r2, r3
 800241c:	2b02      	cmp	r3, #2
 800241e:	d901      	bls.n	8002424 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002420:	2303      	movs	r3, #3
 8002422:	e06d      	b.n	8002500 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002424:	4b29      	ldr	r3, [pc, #164]	; (80024cc <HAL_RCC_OscConfig+0x4c4>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800242c:	2b00      	cmp	r3, #0
 800242e:	d1f0      	bne.n	8002412 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6a1b      	ldr	r3, [r3, #32]
 8002434:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002438:	d108      	bne.n	800244c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800243a:	4b24      	ldr	r3, [pc, #144]	; (80024cc <HAL_RCC_OscConfig+0x4c4>)
 800243c:	685b      	ldr	r3, [r3, #4]
 800243e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	689b      	ldr	r3, [r3, #8]
 8002446:	4921      	ldr	r1, [pc, #132]	; (80024cc <HAL_RCC_OscConfig+0x4c4>)
 8002448:	4313      	orrs	r3, r2
 800244a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800244c:	4b1f      	ldr	r3, [pc, #124]	; (80024cc <HAL_RCC_OscConfig+0x4c4>)
 800244e:	685b      	ldr	r3, [r3, #4]
 8002450:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6a19      	ldr	r1, [r3, #32]
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800245c:	430b      	orrs	r3, r1
 800245e:	491b      	ldr	r1, [pc, #108]	; (80024cc <HAL_RCC_OscConfig+0x4c4>)
 8002460:	4313      	orrs	r3, r2
 8002462:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002464:	4b1b      	ldr	r3, [pc, #108]	; (80024d4 <HAL_RCC_OscConfig+0x4cc>)
 8002466:	2201      	movs	r2, #1
 8002468:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800246a:	f7ff fadd 	bl	8001a28 <HAL_GetTick>
 800246e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002470:	e008      	b.n	8002484 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002472:	f7ff fad9 	bl	8001a28 <HAL_GetTick>
 8002476:	4602      	mov	r2, r0
 8002478:	693b      	ldr	r3, [r7, #16]
 800247a:	1ad3      	subs	r3, r2, r3
 800247c:	2b02      	cmp	r3, #2
 800247e:	d901      	bls.n	8002484 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002480:	2303      	movs	r3, #3
 8002482:	e03d      	b.n	8002500 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002484:	4b11      	ldr	r3, [pc, #68]	; (80024cc <HAL_RCC_OscConfig+0x4c4>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800248c:	2b00      	cmp	r3, #0
 800248e:	d0f0      	beq.n	8002472 <HAL_RCC_OscConfig+0x46a>
 8002490:	e035      	b.n	80024fe <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002492:	4b10      	ldr	r3, [pc, #64]	; (80024d4 <HAL_RCC_OscConfig+0x4cc>)
 8002494:	2200      	movs	r2, #0
 8002496:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002498:	f7ff fac6 	bl	8001a28 <HAL_GetTick>
 800249c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800249e:	e008      	b.n	80024b2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024a0:	f7ff fac2 	bl	8001a28 <HAL_GetTick>
 80024a4:	4602      	mov	r2, r0
 80024a6:	693b      	ldr	r3, [r7, #16]
 80024a8:	1ad3      	subs	r3, r2, r3
 80024aa:	2b02      	cmp	r3, #2
 80024ac:	d901      	bls.n	80024b2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80024ae:	2303      	movs	r3, #3
 80024b0:	e026      	b.n	8002500 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024b2:	4b06      	ldr	r3, [pc, #24]	; (80024cc <HAL_RCC_OscConfig+0x4c4>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d1f0      	bne.n	80024a0 <HAL_RCC_OscConfig+0x498>
 80024be:	e01e      	b.n	80024fe <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	69db      	ldr	r3, [r3, #28]
 80024c4:	2b01      	cmp	r3, #1
 80024c6:	d107      	bne.n	80024d8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80024c8:	2301      	movs	r3, #1
 80024ca:	e019      	b.n	8002500 <HAL_RCC_OscConfig+0x4f8>
 80024cc:	40021000 	.word	0x40021000
 80024d0:	40007000 	.word	0x40007000
 80024d4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80024d8:	4b0b      	ldr	r3, [pc, #44]	; (8002508 <HAL_RCC_OscConfig+0x500>)
 80024da:	685b      	ldr	r3, [r3, #4]
 80024dc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6a1b      	ldr	r3, [r3, #32]
 80024e8:	429a      	cmp	r2, r3
 80024ea:	d106      	bne.n	80024fa <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024f6:	429a      	cmp	r2, r3
 80024f8:	d001      	beq.n	80024fe <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80024fa:	2301      	movs	r3, #1
 80024fc:	e000      	b.n	8002500 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80024fe:	2300      	movs	r3, #0
}
 8002500:	4618      	mov	r0, r3
 8002502:	3718      	adds	r7, #24
 8002504:	46bd      	mov	sp, r7
 8002506:	bd80      	pop	{r7, pc}
 8002508:	40021000 	.word	0x40021000

0800250c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b084      	sub	sp, #16
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
 8002514:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	2b00      	cmp	r3, #0
 800251a:	d101      	bne.n	8002520 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800251c:	2301      	movs	r3, #1
 800251e:	e0d0      	b.n	80026c2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002520:	4b6a      	ldr	r3, [pc, #424]	; (80026cc <HAL_RCC_ClockConfig+0x1c0>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f003 0307 	and.w	r3, r3, #7
 8002528:	683a      	ldr	r2, [r7, #0]
 800252a:	429a      	cmp	r2, r3
 800252c:	d910      	bls.n	8002550 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800252e:	4b67      	ldr	r3, [pc, #412]	; (80026cc <HAL_RCC_ClockConfig+0x1c0>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f023 0207 	bic.w	r2, r3, #7
 8002536:	4965      	ldr	r1, [pc, #404]	; (80026cc <HAL_RCC_ClockConfig+0x1c0>)
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	4313      	orrs	r3, r2
 800253c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800253e:	4b63      	ldr	r3, [pc, #396]	; (80026cc <HAL_RCC_ClockConfig+0x1c0>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f003 0307 	and.w	r3, r3, #7
 8002546:	683a      	ldr	r2, [r7, #0]
 8002548:	429a      	cmp	r2, r3
 800254a:	d001      	beq.n	8002550 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800254c:	2301      	movs	r3, #1
 800254e:	e0b8      	b.n	80026c2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f003 0302 	and.w	r3, r3, #2
 8002558:	2b00      	cmp	r3, #0
 800255a:	d020      	beq.n	800259e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f003 0304 	and.w	r3, r3, #4
 8002564:	2b00      	cmp	r3, #0
 8002566:	d005      	beq.n	8002574 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002568:	4b59      	ldr	r3, [pc, #356]	; (80026d0 <HAL_RCC_ClockConfig+0x1c4>)
 800256a:	685b      	ldr	r3, [r3, #4]
 800256c:	4a58      	ldr	r2, [pc, #352]	; (80026d0 <HAL_RCC_ClockConfig+0x1c4>)
 800256e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002572:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f003 0308 	and.w	r3, r3, #8
 800257c:	2b00      	cmp	r3, #0
 800257e:	d005      	beq.n	800258c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002580:	4b53      	ldr	r3, [pc, #332]	; (80026d0 <HAL_RCC_ClockConfig+0x1c4>)
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	4a52      	ldr	r2, [pc, #328]	; (80026d0 <HAL_RCC_ClockConfig+0x1c4>)
 8002586:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800258a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800258c:	4b50      	ldr	r3, [pc, #320]	; (80026d0 <HAL_RCC_ClockConfig+0x1c4>)
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	689b      	ldr	r3, [r3, #8]
 8002598:	494d      	ldr	r1, [pc, #308]	; (80026d0 <HAL_RCC_ClockConfig+0x1c4>)
 800259a:	4313      	orrs	r3, r2
 800259c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f003 0301 	and.w	r3, r3, #1
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d040      	beq.n	800262c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	685b      	ldr	r3, [r3, #4]
 80025ae:	2b01      	cmp	r3, #1
 80025b0:	d107      	bne.n	80025c2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025b2:	4b47      	ldr	r3, [pc, #284]	; (80026d0 <HAL_RCC_ClockConfig+0x1c4>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d115      	bne.n	80025ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025be:	2301      	movs	r3, #1
 80025c0:	e07f      	b.n	80026c2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	685b      	ldr	r3, [r3, #4]
 80025c6:	2b02      	cmp	r3, #2
 80025c8:	d107      	bne.n	80025da <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025ca:	4b41      	ldr	r3, [pc, #260]	; (80026d0 <HAL_RCC_ClockConfig+0x1c4>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d109      	bne.n	80025ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025d6:	2301      	movs	r3, #1
 80025d8:	e073      	b.n	80026c2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025da:	4b3d      	ldr	r3, [pc, #244]	; (80026d0 <HAL_RCC_ClockConfig+0x1c4>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f003 0302 	and.w	r3, r3, #2
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d101      	bne.n	80025ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025e6:	2301      	movs	r3, #1
 80025e8:	e06b      	b.n	80026c2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80025ea:	4b39      	ldr	r3, [pc, #228]	; (80026d0 <HAL_RCC_ClockConfig+0x1c4>)
 80025ec:	685b      	ldr	r3, [r3, #4]
 80025ee:	f023 0203 	bic.w	r2, r3, #3
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	685b      	ldr	r3, [r3, #4]
 80025f6:	4936      	ldr	r1, [pc, #216]	; (80026d0 <HAL_RCC_ClockConfig+0x1c4>)
 80025f8:	4313      	orrs	r3, r2
 80025fa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80025fc:	f7ff fa14 	bl	8001a28 <HAL_GetTick>
 8002600:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002602:	e00a      	b.n	800261a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002604:	f7ff fa10 	bl	8001a28 <HAL_GetTick>
 8002608:	4602      	mov	r2, r0
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	1ad3      	subs	r3, r2, r3
 800260e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002612:	4293      	cmp	r3, r2
 8002614:	d901      	bls.n	800261a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002616:	2303      	movs	r3, #3
 8002618:	e053      	b.n	80026c2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800261a:	4b2d      	ldr	r3, [pc, #180]	; (80026d0 <HAL_RCC_ClockConfig+0x1c4>)
 800261c:	685b      	ldr	r3, [r3, #4]
 800261e:	f003 020c 	and.w	r2, r3, #12
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	685b      	ldr	r3, [r3, #4]
 8002626:	009b      	lsls	r3, r3, #2
 8002628:	429a      	cmp	r2, r3
 800262a:	d1eb      	bne.n	8002604 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800262c:	4b27      	ldr	r3, [pc, #156]	; (80026cc <HAL_RCC_ClockConfig+0x1c0>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f003 0307 	and.w	r3, r3, #7
 8002634:	683a      	ldr	r2, [r7, #0]
 8002636:	429a      	cmp	r2, r3
 8002638:	d210      	bcs.n	800265c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800263a:	4b24      	ldr	r3, [pc, #144]	; (80026cc <HAL_RCC_ClockConfig+0x1c0>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f023 0207 	bic.w	r2, r3, #7
 8002642:	4922      	ldr	r1, [pc, #136]	; (80026cc <HAL_RCC_ClockConfig+0x1c0>)
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	4313      	orrs	r3, r2
 8002648:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800264a:	4b20      	ldr	r3, [pc, #128]	; (80026cc <HAL_RCC_ClockConfig+0x1c0>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f003 0307 	and.w	r3, r3, #7
 8002652:	683a      	ldr	r2, [r7, #0]
 8002654:	429a      	cmp	r2, r3
 8002656:	d001      	beq.n	800265c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002658:	2301      	movs	r3, #1
 800265a:	e032      	b.n	80026c2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f003 0304 	and.w	r3, r3, #4
 8002664:	2b00      	cmp	r3, #0
 8002666:	d008      	beq.n	800267a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002668:	4b19      	ldr	r3, [pc, #100]	; (80026d0 <HAL_RCC_ClockConfig+0x1c4>)
 800266a:	685b      	ldr	r3, [r3, #4]
 800266c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	68db      	ldr	r3, [r3, #12]
 8002674:	4916      	ldr	r1, [pc, #88]	; (80026d0 <HAL_RCC_ClockConfig+0x1c4>)
 8002676:	4313      	orrs	r3, r2
 8002678:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f003 0308 	and.w	r3, r3, #8
 8002682:	2b00      	cmp	r3, #0
 8002684:	d009      	beq.n	800269a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002686:	4b12      	ldr	r3, [pc, #72]	; (80026d0 <HAL_RCC_ClockConfig+0x1c4>)
 8002688:	685b      	ldr	r3, [r3, #4]
 800268a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	691b      	ldr	r3, [r3, #16]
 8002692:	00db      	lsls	r3, r3, #3
 8002694:	490e      	ldr	r1, [pc, #56]	; (80026d0 <HAL_RCC_ClockConfig+0x1c4>)
 8002696:	4313      	orrs	r3, r2
 8002698:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800269a:	f000 f821 	bl	80026e0 <HAL_RCC_GetSysClockFreq>
 800269e:	4602      	mov	r2, r0
 80026a0:	4b0b      	ldr	r3, [pc, #44]	; (80026d0 <HAL_RCC_ClockConfig+0x1c4>)
 80026a2:	685b      	ldr	r3, [r3, #4]
 80026a4:	091b      	lsrs	r3, r3, #4
 80026a6:	f003 030f 	and.w	r3, r3, #15
 80026aa:	490a      	ldr	r1, [pc, #40]	; (80026d4 <HAL_RCC_ClockConfig+0x1c8>)
 80026ac:	5ccb      	ldrb	r3, [r1, r3]
 80026ae:	fa22 f303 	lsr.w	r3, r2, r3
 80026b2:	4a09      	ldr	r2, [pc, #36]	; (80026d8 <HAL_RCC_ClockConfig+0x1cc>)
 80026b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80026b6:	4b09      	ldr	r3, [pc, #36]	; (80026dc <HAL_RCC_ClockConfig+0x1d0>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4618      	mov	r0, r3
 80026bc:	f7ff f972 	bl	80019a4 <HAL_InitTick>

  return HAL_OK;
 80026c0:	2300      	movs	r3, #0
}
 80026c2:	4618      	mov	r0, r3
 80026c4:	3710      	adds	r7, #16
 80026c6:	46bd      	mov	sp, r7
 80026c8:	bd80      	pop	{r7, pc}
 80026ca:	bf00      	nop
 80026cc:	40022000 	.word	0x40022000
 80026d0:	40021000 	.word	0x40021000
 80026d4:	08008dd0 	.word	0x08008dd0
 80026d8:	20000000 	.word	0x20000000
 80026dc:	20000004 	.word	0x20000004

080026e0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80026e0:	b490      	push	{r4, r7}
 80026e2:	b08a      	sub	sp, #40	; 0x28
 80026e4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80026e6:	4b29      	ldr	r3, [pc, #164]	; (800278c <HAL_RCC_GetSysClockFreq+0xac>)
 80026e8:	1d3c      	adds	r4, r7, #4
 80026ea:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80026ec:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80026f0:	f240 2301 	movw	r3, #513	; 0x201
 80026f4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80026f6:	2300      	movs	r3, #0
 80026f8:	61fb      	str	r3, [r7, #28]
 80026fa:	2300      	movs	r3, #0
 80026fc:	61bb      	str	r3, [r7, #24]
 80026fe:	2300      	movs	r3, #0
 8002700:	627b      	str	r3, [r7, #36]	; 0x24
 8002702:	2300      	movs	r3, #0
 8002704:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002706:	2300      	movs	r3, #0
 8002708:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800270a:	4b21      	ldr	r3, [pc, #132]	; (8002790 <HAL_RCC_GetSysClockFreq+0xb0>)
 800270c:	685b      	ldr	r3, [r3, #4]
 800270e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002710:	69fb      	ldr	r3, [r7, #28]
 8002712:	f003 030c 	and.w	r3, r3, #12
 8002716:	2b04      	cmp	r3, #4
 8002718:	d002      	beq.n	8002720 <HAL_RCC_GetSysClockFreq+0x40>
 800271a:	2b08      	cmp	r3, #8
 800271c:	d003      	beq.n	8002726 <HAL_RCC_GetSysClockFreq+0x46>
 800271e:	e02b      	b.n	8002778 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002720:	4b1c      	ldr	r3, [pc, #112]	; (8002794 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002722:	623b      	str	r3, [r7, #32]
      break;
 8002724:	e02b      	b.n	800277e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002726:	69fb      	ldr	r3, [r7, #28]
 8002728:	0c9b      	lsrs	r3, r3, #18
 800272a:	f003 030f 	and.w	r3, r3, #15
 800272e:	3328      	adds	r3, #40	; 0x28
 8002730:	443b      	add	r3, r7
 8002732:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002736:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002738:	69fb      	ldr	r3, [r7, #28]
 800273a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800273e:	2b00      	cmp	r3, #0
 8002740:	d012      	beq.n	8002768 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002742:	4b13      	ldr	r3, [pc, #76]	; (8002790 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	0c5b      	lsrs	r3, r3, #17
 8002748:	f003 0301 	and.w	r3, r3, #1
 800274c:	3328      	adds	r3, #40	; 0x28
 800274e:	443b      	add	r3, r7
 8002750:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002754:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002756:	697b      	ldr	r3, [r7, #20]
 8002758:	4a0e      	ldr	r2, [pc, #56]	; (8002794 <HAL_RCC_GetSysClockFreq+0xb4>)
 800275a:	fb03 f202 	mul.w	r2, r3, r2
 800275e:	69bb      	ldr	r3, [r7, #24]
 8002760:	fbb2 f3f3 	udiv	r3, r2, r3
 8002764:	627b      	str	r3, [r7, #36]	; 0x24
 8002766:	e004      	b.n	8002772 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002768:	697b      	ldr	r3, [r7, #20]
 800276a:	4a0b      	ldr	r2, [pc, #44]	; (8002798 <HAL_RCC_GetSysClockFreq+0xb8>)
 800276c:	fb02 f303 	mul.w	r3, r2, r3
 8002770:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002774:	623b      	str	r3, [r7, #32]
      break;
 8002776:	e002      	b.n	800277e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002778:	4b06      	ldr	r3, [pc, #24]	; (8002794 <HAL_RCC_GetSysClockFreq+0xb4>)
 800277a:	623b      	str	r3, [r7, #32]
      break;
 800277c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800277e:	6a3b      	ldr	r3, [r7, #32]
}
 8002780:	4618      	mov	r0, r3
 8002782:	3728      	adds	r7, #40	; 0x28
 8002784:	46bd      	mov	sp, r7
 8002786:	bc90      	pop	{r4, r7}
 8002788:	4770      	bx	lr
 800278a:	bf00      	nop
 800278c:	08008dc0 	.word	0x08008dc0
 8002790:	40021000 	.word	0x40021000
 8002794:	007a1200 	.word	0x007a1200
 8002798:	003d0900 	.word	0x003d0900

0800279c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800279c:	b480      	push	{r7}
 800279e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80027a0:	4b02      	ldr	r3, [pc, #8]	; (80027ac <HAL_RCC_GetHCLKFreq+0x10>)
 80027a2:	681b      	ldr	r3, [r3, #0]
}
 80027a4:	4618      	mov	r0, r3
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bc80      	pop	{r7}
 80027aa:	4770      	bx	lr
 80027ac:	20000000 	.word	0x20000000

080027b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80027b4:	f7ff fff2 	bl	800279c <HAL_RCC_GetHCLKFreq>
 80027b8:	4602      	mov	r2, r0
 80027ba:	4b05      	ldr	r3, [pc, #20]	; (80027d0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80027bc:	685b      	ldr	r3, [r3, #4]
 80027be:	0a1b      	lsrs	r3, r3, #8
 80027c0:	f003 0307 	and.w	r3, r3, #7
 80027c4:	4903      	ldr	r1, [pc, #12]	; (80027d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80027c6:	5ccb      	ldrb	r3, [r1, r3]
 80027c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027cc:	4618      	mov	r0, r3
 80027ce:	bd80      	pop	{r7, pc}
 80027d0:	40021000 	.word	0x40021000
 80027d4:	08008de0 	.word	0x08008de0

080027d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80027dc:	f7ff ffde 	bl	800279c <HAL_RCC_GetHCLKFreq>
 80027e0:	4602      	mov	r2, r0
 80027e2:	4b05      	ldr	r3, [pc, #20]	; (80027f8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	0adb      	lsrs	r3, r3, #11
 80027e8:	f003 0307 	and.w	r3, r3, #7
 80027ec:	4903      	ldr	r1, [pc, #12]	; (80027fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80027ee:	5ccb      	ldrb	r3, [r1, r3]
 80027f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027f4:	4618      	mov	r0, r3
 80027f6:	bd80      	pop	{r7, pc}
 80027f8:	40021000 	.word	0x40021000
 80027fc:	08008de0 	.word	0x08008de0

08002800 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002800:	b480      	push	{r7}
 8002802:	b085      	sub	sp, #20
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002808:	4b0a      	ldr	r3, [pc, #40]	; (8002834 <RCC_Delay+0x34>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4a0a      	ldr	r2, [pc, #40]	; (8002838 <RCC_Delay+0x38>)
 800280e:	fba2 2303 	umull	r2, r3, r2, r3
 8002812:	0a5b      	lsrs	r3, r3, #9
 8002814:	687a      	ldr	r2, [r7, #4]
 8002816:	fb02 f303 	mul.w	r3, r2, r3
 800281a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800281c:	bf00      	nop
  }
  while (Delay --);
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	1e5a      	subs	r2, r3, #1
 8002822:	60fa      	str	r2, [r7, #12]
 8002824:	2b00      	cmp	r3, #0
 8002826:	d1f9      	bne.n	800281c <RCC_Delay+0x1c>
}
 8002828:	bf00      	nop
 800282a:	bf00      	nop
 800282c:	3714      	adds	r7, #20
 800282e:	46bd      	mov	sp, r7
 8002830:	bc80      	pop	{r7}
 8002832:	4770      	bx	lr
 8002834:	20000000 	.word	0x20000000
 8002838:	10624dd3 	.word	0x10624dd3

0800283c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b082      	sub	sp, #8
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2b00      	cmp	r3, #0
 8002848:	d101      	bne.n	800284e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800284a:	2301      	movs	r3, #1
 800284c:	e076      	b.n	800293c <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002852:	2b00      	cmp	r3, #0
 8002854:	d108      	bne.n	8002868 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	685b      	ldr	r3, [r3, #4]
 800285a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800285e:	d009      	beq.n	8002874 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2200      	movs	r2, #0
 8002864:	61da      	str	r2, [r3, #28]
 8002866:	e005      	b.n	8002874 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2200      	movs	r2, #0
 800286c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2200      	movs	r2, #0
 8002872:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2200      	movs	r2, #0
 8002878:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002880:	b2db      	uxtb	r3, r3
 8002882:	2b00      	cmp	r3, #0
 8002884:	d106      	bne.n	8002894 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	2200      	movs	r2, #0
 800288a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800288e:	6878      	ldr	r0, [r7, #4]
 8002890:	f7fe fe78 	bl	8001584 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2202      	movs	r2, #2
 8002898:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	681a      	ldr	r2, [r3, #0]
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80028aa:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	685b      	ldr	r3, [r3, #4]
 80028b0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	689b      	ldr	r3, [r3, #8]
 80028b8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80028bc:	431a      	orrs	r2, r3
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	68db      	ldr	r3, [r3, #12]
 80028c2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80028c6:	431a      	orrs	r2, r3
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	691b      	ldr	r3, [r3, #16]
 80028cc:	f003 0302 	and.w	r3, r3, #2
 80028d0:	431a      	orrs	r2, r3
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	695b      	ldr	r3, [r3, #20]
 80028d6:	f003 0301 	and.w	r3, r3, #1
 80028da:	431a      	orrs	r2, r3
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	699b      	ldr	r3, [r3, #24]
 80028e0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80028e4:	431a      	orrs	r2, r3
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	69db      	ldr	r3, [r3, #28]
 80028ea:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80028ee:	431a      	orrs	r2, r3
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6a1b      	ldr	r3, [r3, #32]
 80028f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028f8:	ea42 0103 	orr.w	r1, r2, r3
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002900:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	430a      	orrs	r2, r1
 800290a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	699b      	ldr	r3, [r3, #24]
 8002910:	0c1a      	lsrs	r2, r3, #16
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f002 0204 	and.w	r2, r2, #4
 800291a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	69da      	ldr	r2, [r3, #28]
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800292a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2200      	movs	r2, #0
 8002930:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	2201      	movs	r2, #1
 8002936:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800293a:	2300      	movs	r3, #0
}
 800293c:	4618      	mov	r0, r3
 800293e:	3708      	adds	r7, #8
 8002940:	46bd      	mov	sp, r7
 8002942:	bd80      	pop	{r7, pc}

08002944 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b088      	sub	sp, #32
 8002948:	af00      	add	r7, sp, #0
 800294a:	60f8      	str	r0, [r7, #12]
 800294c:	60b9      	str	r1, [r7, #8]
 800294e:	603b      	str	r3, [r7, #0]
 8002950:	4613      	mov	r3, r2
 8002952:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002954:	2300      	movs	r3, #0
 8002956:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800295e:	2b01      	cmp	r3, #1
 8002960:	d101      	bne.n	8002966 <HAL_SPI_Transmit+0x22>
 8002962:	2302      	movs	r3, #2
 8002964:	e126      	b.n	8002bb4 <HAL_SPI_Transmit+0x270>
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	2201      	movs	r2, #1
 800296a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800296e:	f7ff f85b 	bl	8001a28 <HAL_GetTick>
 8002972:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002974:	88fb      	ldrh	r3, [r7, #6]
 8002976:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800297e:	b2db      	uxtb	r3, r3
 8002980:	2b01      	cmp	r3, #1
 8002982:	d002      	beq.n	800298a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002984:	2302      	movs	r3, #2
 8002986:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002988:	e10b      	b.n	8002ba2 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800298a:	68bb      	ldr	r3, [r7, #8]
 800298c:	2b00      	cmp	r3, #0
 800298e:	d002      	beq.n	8002996 <HAL_SPI_Transmit+0x52>
 8002990:	88fb      	ldrh	r3, [r7, #6]
 8002992:	2b00      	cmp	r3, #0
 8002994:	d102      	bne.n	800299c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002996:	2301      	movs	r3, #1
 8002998:	77fb      	strb	r3, [r7, #31]
    goto error;
 800299a:	e102      	b.n	8002ba2 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	2203      	movs	r2, #3
 80029a0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	2200      	movs	r2, #0
 80029a8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	68ba      	ldr	r2, [r7, #8]
 80029ae:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	88fa      	ldrh	r2, [r7, #6]
 80029b4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	88fa      	ldrh	r2, [r7, #6]
 80029ba:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	2200      	movs	r2, #0
 80029c0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	2200      	movs	r2, #0
 80029c6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	2200      	movs	r2, #0
 80029cc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	2200      	movs	r2, #0
 80029d2:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	2200      	movs	r2, #0
 80029d8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	689b      	ldr	r3, [r3, #8]
 80029de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80029e2:	d10f      	bne.n	8002a04 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	681a      	ldr	r2, [r3, #0]
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80029f2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	681a      	ldr	r2, [r3, #0]
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002a02:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a0e:	2b40      	cmp	r3, #64	; 0x40
 8002a10:	d007      	beq.n	8002a22 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	681a      	ldr	r2, [r3, #0]
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002a20:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	68db      	ldr	r3, [r3, #12]
 8002a26:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002a2a:	d14b      	bne.n	8002ac4 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	685b      	ldr	r3, [r3, #4]
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d002      	beq.n	8002a3a <HAL_SPI_Transmit+0xf6>
 8002a34:	8afb      	ldrh	r3, [r7, #22]
 8002a36:	2b01      	cmp	r3, #1
 8002a38:	d13e      	bne.n	8002ab8 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a3e:	881a      	ldrh	r2, [r3, #0]
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a4a:	1c9a      	adds	r2, r3, #2
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002a54:	b29b      	uxth	r3, r3
 8002a56:	3b01      	subs	r3, #1
 8002a58:	b29a      	uxth	r2, r3
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002a5e:	e02b      	b.n	8002ab8 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	689b      	ldr	r3, [r3, #8]
 8002a66:	f003 0302 	and.w	r3, r3, #2
 8002a6a:	2b02      	cmp	r3, #2
 8002a6c:	d112      	bne.n	8002a94 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a72:	881a      	ldrh	r2, [r3, #0]
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a7e:	1c9a      	adds	r2, r3, #2
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002a88:	b29b      	uxth	r3, r3
 8002a8a:	3b01      	subs	r3, #1
 8002a8c:	b29a      	uxth	r2, r3
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	86da      	strh	r2, [r3, #54]	; 0x36
 8002a92:	e011      	b.n	8002ab8 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002a94:	f7fe ffc8 	bl	8001a28 <HAL_GetTick>
 8002a98:	4602      	mov	r2, r0
 8002a9a:	69bb      	ldr	r3, [r7, #24]
 8002a9c:	1ad3      	subs	r3, r2, r3
 8002a9e:	683a      	ldr	r2, [r7, #0]
 8002aa0:	429a      	cmp	r2, r3
 8002aa2:	d803      	bhi.n	8002aac <HAL_SPI_Transmit+0x168>
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002aaa:	d102      	bne.n	8002ab2 <HAL_SPI_Transmit+0x16e>
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d102      	bne.n	8002ab8 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8002ab2:	2303      	movs	r3, #3
 8002ab4:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002ab6:	e074      	b.n	8002ba2 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002abc:	b29b      	uxth	r3, r3
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d1ce      	bne.n	8002a60 <HAL_SPI_Transmit+0x11c>
 8002ac2:	e04c      	b.n	8002b5e <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	685b      	ldr	r3, [r3, #4]
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d002      	beq.n	8002ad2 <HAL_SPI_Transmit+0x18e>
 8002acc:	8afb      	ldrh	r3, [r7, #22]
 8002ace:	2b01      	cmp	r3, #1
 8002ad0:	d140      	bne.n	8002b54 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	330c      	adds	r3, #12
 8002adc:	7812      	ldrb	r2, [r2, #0]
 8002ade:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ae4:	1c5a      	adds	r2, r3, #1
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002aee:	b29b      	uxth	r3, r3
 8002af0:	3b01      	subs	r3, #1
 8002af2:	b29a      	uxth	r2, r3
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002af8:	e02c      	b.n	8002b54 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	689b      	ldr	r3, [r3, #8]
 8002b00:	f003 0302 	and.w	r3, r3, #2
 8002b04:	2b02      	cmp	r3, #2
 8002b06:	d113      	bne.n	8002b30 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	330c      	adds	r3, #12
 8002b12:	7812      	ldrb	r2, [r2, #0]
 8002b14:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b1a:	1c5a      	adds	r2, r3, #1
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002b24:	b29b      	uxth	r3, r3
 8002b26:	3b01      	subs	r3, #1
 8002b28:	b29a      	uxth	r2, r3
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	86da      	strh	r2, [r3, #54]	; 0x36
 8002b2e:	e011      	b.n	8002b54 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002b30:	f7fe ff7a 	bl	8001a28 <HAL_GetTick>
 8002b34:	4602      	mov	r2, r0
 8002b36:	69bb      	ldr	r3, [r7, #24]
 8002b38:	1ad3      	subs	r3, r2, r3
 8002b3a:	683a      	ldr	r2, [r7, #0]
 8002b3c:	429a      	cmp	r2, r3
 8002b3e:	d803      	bhi.n	8002b48 <HAL_SPI_Transmit+0x204>
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b46:	d102      	bne.n	8002b4e <HAL_SPI_Transmit+0x20a>
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d102      	bne.n	8002b54 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8002b4e:	2303      	movs	r3, #3
 8002b50:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002b52:	e026      	b.n	8002ba2 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002b58:	b29b      	uxth	r3, r3
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d1cd      	bne.n	8002afa <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002b5e:	69ba      	ldr	r2, [r7, #24]
 8002b60:	6839      	ldr	r1, [r7, #0]
 8002b62:	68f8      	ldr	r0, [r7, #12]
 8002b64:	f000 fbc4 	bl	80032f0 <SPI_EndRxTxTransaction>
 8002b68:	4603      	mov	r3, r0
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d002      	beq.n	8002b74 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	2220      	movs	r2, #32
 8002b72:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	689b      	ldr	r3, [r3, #8]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d10a      	bne.n	8002b92 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	613b      	str	r3, [r7, #16]
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	68db      	ldr	r3, [r3, #12]
 8002b86:	613b      	str	r3, [r7, #16]
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	689b      	ldr	r3, [r3, #8]
 8002b8e:	613b      	str	r3, [r7, #16]
 8002b90:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d002      	beq.n	8002ba0 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	77fb      	strb	r3, [r7, #31]
 8002b9e:	e000      	b.n	8002ba2 <HAL_SPI_Transmit+0x25e>
  }

error:
 8002ba0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	2201      	movs	r2, #1
 8002ba6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	2200      	movs	r2, #0
 8002bae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002bb2:	7ffb      	ldrb	r3, [r7, #31]
}
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	3720      	adds	r7, #32
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	bd80      	pop	{r7, pc}

08002bbc <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b088      	sub	sp, #32
 8002bc0:	af02      	add	r7, sp, #8
 8002bc2:	60f8      	str	r0, [r7, #12]
 8002bc4:	60b9      	str	r1, [r7, #8]
 8002bc6:	603b      	str	r3, [r7, #0]
 8002bc8:	4613      	mov	r3, r2
 8002bca:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002bcc:	2300      	movs	r3, #0
 8002bce:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	685b      	ldr	r3, [r3, #4]
 8002bd4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002bd8:	d112      	bne.n	8002c00 <HAL_SPI_Receive+0x44>
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	689b      	ldr	r3, [r3, #8]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d10e      	bne.n	8002c00 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	2204      	movs	r2, #4
 8002be6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002bea:	88fa      	ldrh	r2, [r7, #6]
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	9300      	str	r3, [sp, #0]
 8002bf0:	4613      	mov	r3, r2
 8002bf2:	68ba      	ldr	r2, [r7, #8]
 8002bf4:	68b9      	ldr	r1, [r7, #8]
 8002bf6:	68f8      	ldr	r0, [r7, #12]
 8002bf8:	f000 f8f1 	bl	8002dde <HAL_SPI_TransmitReceive>
 8002bfc:	4603      	mov	r3, r0
 8002bfe:	e0ea      	b.n	8002dd6 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002c06:	2b01      	cmp	r3, #1
 8002c08:	d101      	bne.n	8002c0e <HAL_SPI_Receive+0x52>
 8002c0a:	2302      	movs	r3, #2
 8002c0c:	e0e3      	b.n	8002dd6 <HAL_SPI_Receive+0x21a>
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	2201      	movs	r2, #1
 8002c12:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002c16:	f7fe ff07 	bl	8001a28 <HAL_GetTick>
 8002c1a:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002c22:	b2db      	uxtb	r3, r3
 8002c24:	2b01      	cmp	r3, #1
 8002c26:	d002      	beq.n	8002c2e <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8002c28:	2302      	movs	r3, #2
 8002c2a:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002c2c:	e0ca      	b.n	8002dc4 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8002c2e:	68bb      	ldr	r3, [r7, #8]
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d002      	beq.n	8002c3a <HAL_SPI_Receive+0x7e>
 8002c34:	88fb      	ldrh	r3, [r7, #6]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d102      	bne.n	8002c40 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002c3e:	e0c1      	b.n	8002dc4 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	2204      	movs	r2, #4
 8002c44:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	68ba      	ldr	r2, [r7, #8]
 8002c52:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	88fa      	ldrh	r2, [r7, #6]
 8002c58:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	88fa      	ldrh	r2, [r7, #6]
 8002c5e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	2200      	movs	r2, #0
 8002c64:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	2200      	movs	r2, #0
 8002c6a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	2200      	movs	r2, #0
 8002c70:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	2200      	movs	r2, #0
 8002c76:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	689b      	ldr	r3, [r3, #8]
 8002c82:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c86:	d10f      	bne.n	8002ca8 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	681a      	ldr	r2, [r3, #0]
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002c96:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	681a      	ldr	r2, [r3, #0]
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002ca6:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cb2:	2b40      	cmp	r3, #64	; 0x40
 8002cb4:	d007      	beq.n	8002cc6 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	681a      	ldr	r2, [r3, #0]
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002cc4:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	68db      	ldr	r3, [r3, #12]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d162      	bne.n	8002d94 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002cce:	e02e      	b.n	8002d2e <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	689b      	ldr	r3, [r3, #8]
 8002cd6:	f003 0301 	and.w	r3, r3, #1
 8002cda:	2b01      	cmp	r3, #1
 8002cdc:	d115      	bne.n	8002d0a <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f103 020c 	add.w	r2, r3, #12
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cea:	7812      	ldrb	r2, [r2, #0]
 8002cec:	b2d2      	uxtb	r2, r2
 8002cee:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cf4:	1c5a      	adds	r2, r3, #1
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002cfe:	b29b      	uxth	r3, r3
 8002d00:	3b01      	subs	r3, #1
 8002d02:	b29a      	uxth	r2, r3
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002d08:	e011      	b.n	8002d2e <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002d0a:	f7fe fe8d 	bl	8001a28 <HAL_GetTick>
 8002d0e:	4602      	mov	r2, r0
 8002d10:	693b      	ldr	r3, [r7, #16]
 8002d12:	1ad3      	subs	r3, r2, r3
 8002d14:	683a      	ldr	r2, [r7, #0]
 8002d16:	429a      	cmp	r2, r3
 8002d18:	d803      	bhi.n	8002d22 <HAL_SPI_Receive+0x166>
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d20:	d102      	bne.n	8002d28 <HAL_SPI_Receive+0x16c>
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d102      	bne.n	8002d2e <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8002d28:	2303      	movs	r3, #3
 8002d2a:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002d2c:	e04a      	b.n	8002dc4 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d32:	b29b      	uxth	r3, r3
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d1cb      	bne.n	8002cd0 <HAL_SPI_Receive+0x114>
 8002d38:	e031      	b.n	8002d9e <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	689b      	ldr	r3, [r3, #8]
 8002d40:	f003 0301 	and.w	r3, r3, #1
 8002d44:	2b01      	cmp	r3, #1
 8002d46:	d113      	bne.n	8002d70 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	68da      	ldr	r2, [r3, #12]
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d52:	b292      	uxth	r2, r2
 8002d54:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d5a:	1c9a      	adds	r2, r3, #2
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d64:	b29b      	uxth	r3, r3
 8002d66:	3b01      	subs	r3, #1
 8002d68:	b29a      	uxth	r2, r3
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002d6e:	e011      	b.n	8002d94 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002d70:	f7fe fe5a 	bl	8001a28 <HAL_GetTick>
 8002d74:	4602      	mov	r2, r0
 8002d76:	693b      	ldr	r3, [r7, #16]
 8002d78:	1ad3      	subs	r3, r2, r3
 8002d7a:	683a      	ldr	r2, [r7, #0]
 8002d7c:	429a      	cmp	r2, r3
 8002d7e:	d803      	bhi.n	8002d88 <HAL_SPI_Receive+0x1cc>
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d86:	d102      	bne.n	8002d8e <HAL_SPI_Receive+0x1d2>
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d102      	bne.n	8002d94 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8002d8e:	2303      	movs	r3, #3
 8002d90:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002d92:	e017      	b.n	8002dc4 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d98:	b29b      	uxth	r3, r3
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d1cd      	bne.n	8002d3a <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002d9e:	693a      	ldr	r2, [r7, #16]
 8002da0:	6839      	ldr	r1, [r7, #0]
 8002da2:	68f8      	ldr	r0, [r7, #12]
 8002da4:	f000 fa52 	bl	800324c <SPI_EndRxTransaction>
 8002da8:	4603      	mov	r3, r0
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d002      	beq.n	8002db4 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	2220      	movs	r2, #32
 8002db2:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d002      	beq.n	8002dc2 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8002dbc:	2301      	movs	r3, #1
 8002dbe:	75fb      	strb	r3, [r7, #23]
 8002dc0:	e000      	b.n	8002dc4 <HAL_SPI_Receive+0x208>
  }

error :
 8002dc2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	2201      	movs	r2, #1
 8002dc8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	2200      	movs	r2, #0
 8002dd0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002dd4:	7dfb      	ldrb	r3, [r7, #23]
}
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	3718      	adds	r7, #24
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	bd80      	pop	{r7, pc}

08002dde <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002dde:	b580      	push	{r7, lr}
 8002de0:	b08c      	sub	sp, #48	; 0x30
 8002de2:	af00      	add	r7, sp, #0
 8002de4:	60f8      	str	r0, [r7, #12]
 8002de6:	60b9      	str	r1, [r7, #8]
 8002de8:	607a      	str	r2, [r7, #4]
 8002dea:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002dec:	2301      	movs	r3, #1
 8002dee:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002df0:	2300      	movs	r3, #0
 8002df2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002dfc:	2b01      	cmp	r3, #1
 8002dfe:	d101      	bne.n	8002e04 <HAL_SPI_TransmitReceive+0x26>
 8002e00:	2302      	movs	r3, #2
 8002e02:	e18a      	b.n	800311a <HAL_SPI_TransmitReceive+0x33c>
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	2201      	movs	r2, #1
 8002e08:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002e0c:	f7fe fe0c 	bl	8001a28 <HAL_GetTick>
 8002e10:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002e18:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	685b      	ldr	r3, [r3, #4]
 8002e20:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8002e22:	887b      	ldrh	r3, [r7, #2]
 8002e24:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002e26:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002e2a:	2b01      	cmp	r3, #1
 8002e2c:	d00f      	beq.n	8002e4e <HAL_SPI_TransmitReceive+0x70>
 8002e2e:	69fb      	ldr	r3, [r7, #28]
 8002e30:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002e34:	d107      	bne.n	8002e46 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	689b      	ldr	r3, [r3, #8]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d103      	bne.n	8002e46 <HAL_SPI_TransmitReceive+0x68>
 8002e3e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002e42:	2b04      	cmp	r3, #4
 8002e44:	d003      	beq.n	8002e4e <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8002e46:	2302      	movs	r3, #2
 8002e48:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002e4c:	e15b      	b.n	8003106 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002e4e:	68bb      	ldr	r3, [r7, #8]
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d005      	beq.n	8002e60 <HAL_SPI_TransmitReceive+0x82>
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d002      	beq.n	8002e60 <HAL_SPI_TransmitReceive+0x82>
 8002e5a:	887b      	ldrh	r3, [r7, #2]
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d103      	bne.n	8002e68 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8002e60:	2301      	movs	r3, #1
 8002e62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002e66:	e14e      	b.n	8003106 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002e6e:	b2db      	uxtb	r3, r3
 8002e70:	2b04      	cmp	r3, #4
 8002e72:	d003      	beq.n	8002e7c <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	2205      	movs	r2, #5
 8002e78:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	2200      	movs	r2, #0
 8002e80:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	687a      	ldr	r2, [r7, #4]
 8002e86:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	887a      	ldrh	r2, [r7, #2]
 8002e8c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	887a      	ldrh	r2, [r7, #2]
 8002e92:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	68ba      	ldr	r2, [r7, #8]
 8002e98:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	887a      	ldrh	r2, [r7, #2]
 8002e9e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	887a      	ldrh	r2, [r7, #2]
 8002ea4:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	2200      	movs	r2, #0
 8002eb0:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ebc:	2b40      	cmp	r3, #64	; 0x40
 8002ebe:	d007      	beq.n	8002ed0 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	681a      	ldr	r2, [r3, #0]
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002ece:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	68db      	ldr	r3, [r3, #12]
 8002ed4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002ed8:	d178      	bne.n	8002fcc <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	685b      	ldr	r3, [r3, #4]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d002      	beq.n	8002ee8 <HAL_SPI_TransmitReceive+0x10a>
 8002ee2:	8b7b      	ldrh	r3, [r7, #26]
 8002ee4:	2b01      	cmp	r3, #1
 8002ee6:	d166      	bne.n	8002fb6 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eec:	881a      	ldrh	r2, [r3, #0]
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ef8:	1c9a      	adds	r2, r3, #2
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002f02:	b29b      	uxth	r3, r3
 8002f04:	3b01      	subs	r3, #1
 8002f06:	b29a      	uxth	r2, r3
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002f0c:	e053      	b.n	8002fb6 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	689b      	ldr	r3, [r3, #8]
 8002f14:	f003 0302 	and.w	r3, r3, #2
 8002f18:	2b02      	cmp	r3, #2
 8002f1a:	d11b      	bne.n	8002f54 <HAL_SPI_TransmitReceive+0x176>
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002f20:	b29b      	uxth	r3, r3
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d016      	beq.n	8002f54 <HAL_SPI_TransmitReceive+0x176>
 8002f26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f28:	2b01      	cmp	r3, #1
 8002f2a:	d113      	bne.n	8002f54 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f30:	881a      	ldrh	r2, [r3, #0]
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f3c:	1c9a      	adds	r2, r3, #2
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002f46:	b29b      	uxth	r3, r3
 8002f48:	3b01      	subs	r3, #1
 8002f4a:	b29a      	uxth	r2, r3
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002f50:	2300      	movs	r3, #0
 8002f52:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	689b      	ldr	r3, [r3, #8]
 8002f5a:	f003 0301 	and.w	r3, r3, #1
 8002f5e:	2b01      	cmp	r3, #1
 8002f60:	d119      	bne.n	8002f96 <HAL_SPI_TransmitReceive+0x1b8>
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f66:	b29b      	uxth	r3, r3
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d014      	beq.n	8002f96 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	68da      	ldr	r2, [r3, #12]
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f76:	b292      	uxth	r2, r2
 8002f78:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f7e:	1c9a      	adds	r2, r3, #2
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f88:	b29b      	uxth	r3, r3
 8002f8a:	3b01      	subs	r3, #1
 8002f8c:	b29a      	uxth	r2, r3
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002f92:	2301      	movs	r3, #1
 8002f94:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002f96:	f7fe fd47 	bl	8001a28 <HAL_GetTick>
 8002f9a:	4602      	mov	r2, r0
 8002f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f9e:	1ad3      	subs	r3, r2, r3
 8002fa0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002fa2:	429a      	cmp	r2, r3
 8002fa4:	d807      	bhi.n	8002fb6 <HAL_SPI_TransmitReceive+0x1d8>
 8002fa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fa8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fac:	d003      	beq.n	8002fb6 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8002fae:	2303      	movs	r3, #3
 8002fb0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002fb4:	e0a7      	b.n	8003106 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002fba:	b29b      	uxth	r3, r3
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d1a6      	bne.n	8002f0e <HAL_SPI_TransmitReceive+0x130>
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002fc4:	b29b      	uxth	r3, r3
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d1a1      	bne.n	8002f0e <HAL_SPI_TransmitReceive+0x130>
 8002fca:	e07c      	b.n	80030c6 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	685b      	ldr	r3, [r3, #4]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d002      	beq.n	8002fda <HAL_SPI_TransmitReceive+0x1fc>
 8002fd4:	8b7b      	ldrh	r3, [r7, #26]
 8002fd6:	2b01      	cmp	r3, #1
 8002fd8:	d16b      	bne.n	80030b2 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	330c      	adds	r3, #12
 8002fe4:	7812      	ldrb	r2, [r2, #0]
 8002fe6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fec:	1c5a      	adds	r2, r3, #1
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002ff6:	b29b      	uxth	r3, r3
 8002ff8:	3b01      	subs	r3, #1
 8002ffa:	b29a      	uxth	r2, r3
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003000:	e057      	b.n	80030b2 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	689b      	ldr	r3, [r3, #8]
 8003008:	f003 0302 	and.w	r3, r3, #2
 800300c:	2b02      	cmp	r3, #2
 800300e:	d11c      	bne.n	800304a <HAL_SPI_TransmitReceive+0x26c>
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003014:	b29b      	uxth	r3, r3
 8003016:	2b00      	cmp	r3, #0
 8003018:	d017      	beq.n	800304a <HAL_SPI_TransmitReceive+0x26c>
 800301a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800301c:	2b01      	cmp	r3, #1
 800301e:	d114      	bne.n	800304a <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	330c      	adds	r3, #12
 800302a:	7812      	ldrb	r2, [r2, #0]
 800302c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003032:	1c5a      	adds	r2, r3, #1
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800303c:	b29b      	uxth	r3, r3
 800303e:	3b01      	subs	r3, #1
 8003040:	b29a      	uxth	r2, r3
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003046:	2300      	movs	r3, #0
 8003048:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	689b      	ldr	r3, [r3, #8]
 8003050:	f003 0301 	and.w	r3, r3, #1
 8003054:	2b01      	cmp	r3, #1
 8003056:	d119      	bne.n	800308c <HAL_SPI_TransmitReceive+0x2ae>
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800305c:	b29b      	uxth	r3, r3
 800305e:	2b00      	cmp	r3, #0
 8003060:	d014      	beq.n	800308c <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	68da      	ldr	r2, [r3, #12]
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800306c:	b2d2      	uxtb	r2, r2
 800306e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003074:	1c5a      	adds	r2, r3, #1
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800307e:	b29b      	uxth	r3, r3
 8003080:	3b01      	subs	r3, #1
 8003082:	b29a      	uxth	r2, r3
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003088:	2301      	movs	r3, #1
 800308a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800308c:	f7fe fccc 	bl	8001a28 <HAL_GetTick>
 8003090:	4602      	mov	r2, r0
 8003092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003094:	1ad3      	subs	r3, r2, r3
 8003096:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003098:	429a      	cmp	r2, r3
 800309a:	d803      	bhi.n	80030a4 <HAL_SPI_TransmitReceive+0x2c6>
 800309c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800309e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030a2:	d102      	bne.n	80030aa <HAL_SPI_TransmitReceive+0x2cc>
 80030a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d103      	bne.n	80030b2 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80030aa:	2303      	movs	r3, #3
 80030ac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80030b0:	e029      	b.n	8003106 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80030b6:	b29b      	uxth	r3, r3
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d1a2      	bne.n	8003002 <HAL_SPI_TransmitReceive+0x224>
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80030c0:	b29b      	uxth	r3, r3
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d19d      	bne.n	8003002 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80030c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030c8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80030ca:	68f8      	ldr	r0, [r7, #12]
 80030cc:	f000 f910 	bl	80032f0 <SPI_EndRxTxTransaction>
 80030d0:	4603      	mov	r3, r0
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d006      	beq.n	80030e4 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80030d6:	2301      	movs	r3, #1
 80030d8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	2220      	movs	r2, #32
 80030e0:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80030e2:	e010      	b.n	8003106 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	689b      	ldr	r3, [r3, #8]
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d10b      	bne.n	8003104 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80030ec:	2300      	movs	r3, #0
 80030ee:	617b      	str	r3, [r7, #20]
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	68db      	ldr	r3, [r3, #12]
 80030f6:	617b      	str	r3, [r7, #20]
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	689b      	ldr	r3, [r3, #8]
 80030fe:	617b      	str	r3, [r7, #20]
 8003100:	697b      	ldr	r3, [r7, #20]
 8003102:	e000      	b.n	8003106 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8003104:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	2201      	movs	r2, #1
 800310a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	2200      	movs	r2, #0
 8003112:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003116:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800311a:	4618      	mov	r0, r3
 800311c:	3730      	adds	r7, #48	; 0x30
 800311e:	46bd      	mov	sp, r7
 8003120:	bd80      	pop	{r7, pc}

08003122 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8003122:	b480      	push	{r7}
 8003124:	b083      	sub	sp, #12
 8003126:	af00      	add	r7, sp, #0
 8003128:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003130:	b2db      	uxtb	r3, r3
}
 8003132:	4618      	mov	r0, r3
 8003134:	370c      	adds	r7, #12
 8003136:	46bd      	mov	sp, r7
 8003138:	bc80      	pop	{r7}
 800313a:	4770      	bx	lr

0800313c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b088      	sub	sp, #32
 8003140:	af00      	add	r7, sp, #0
 8003142:	60f8      	str	r0, [r7, #12]
 8003144:	60b9      	str	r1, [r7, #8]
 8003146:	603b      	str	r3, [r7, #0]
 8003148:	4613      	mov	r3, r2
 800314a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800314c:	f7fe fc6c 	bl	8001a28 <HAL_GetTick>
 8003150:	4602      	mov	r2, r0
 8003152:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003154:	1a9b      	subs	r3, r3, r2
 8003156:	683a      	ldr	r2, [r7, #0]
 8003158:	4413      	add	r3, r2
 800315a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800315c:	f7fe fc64 	bl	8001a28 <HAL_GetTick>
 8003160:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003162:	4b39      	ldr	r3, [pc, #228]	; (8003248 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	015b      	lsls	r3, r3, #5
 8003168:	0d1b      	lsrs	r3, r3, #20
 800316a:	69fa      	ldr	r2, [r7, #28]
 800316c:	fb02 f303 	mul.w	r3, r2, r3
 8003170:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003172:	e054      	b.n	800321e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	f1b3 3fff 	cmp.w	r3, #4294967295
 800317a:	d050      	beq.n	800321e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800317c:	f7fe fc54 	bl	8001a28 <HAL_GetTick>
 8003180:	4602      	mov	r2, r0
 8003182:	69bb      	ldr	r3, [r7, #24]
 8003184:	1ad3      	subs	r3, r2, r3
 8003186:	69fa      	ldr	r2, [r7, #28]
 8003188:	429a      	cmp	r2, r3
 800318a:	d902      	bls.n	8003192 <SPI_WaitFlagStateUntilTimeout+0x56>
 800318c:	69fb      	ldr	r3, [r7, #28]
 800318e:	2b00      	cmp	r3, #0
 8003190:	d13d      	bne.n	800320e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	685a      	ldr	r2, [r3, #4]
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80031a0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	685b      	ldr	r3, [r3, #4]
 80031a6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80031aa:	d111      	bne.n	80031d0 <SPI_WaitFlagStateUntilTimeout+0x94>
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	689b      	ldr	r3, [r3, #8]
 80031b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80031b4:	d004      	beq.n	80031c0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	689b      	ldr	r3, [r3, #8]
 80031ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031be:	d107      	bne.n	80031d0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	681a      	ldr	r2, [r3, #0]
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80031ce:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80031d8:	d10f      	bne.n	80031fa <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	681a      	ldr	r2, [r3, #0]
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80031e8:	601a      	str	r2, [r3, #0]
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	681a      	ldr	r2, [r3, #0]
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80031f8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	2201      	movs	r2, #1
 80031fe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	2200      	movs	r2, #0
 8003206:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800320a:	2303      	movs	r3, #3
 800320c:	e017      	b.n	800323e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800320e:	697b      	ldr	r3, [r7, #20]
 8003210:	2b00      	cmp	r3, #0
 8003212:	d101      	bne.n	8003218 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003214:	2300      	movs	r3, #0
 8003216:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003218:	697b      	ldr	r3, [r7, #20]
 800321a:	3b01      	subs	r3, #1
 800321c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	689a      	ldr	r2, [r3, #8]
 8003224:	68bb      	ldr	r3, [r7, #8]
 8003226:	4013      	ands	r3, r2
 8003228:	68ba      	ldr	r2, [r7, #8]
 800322a:	429a      	cmp	r2, r3
 800322c:	bf0c      	ite	eq
 800322e:	2301      	moveq	r3, #1
 8003230:	2300      	movne	r3, #0
 8003232:	b2db      	uxtb	r3, r3
 8003234:	461a      	mov	r2, r3
 8003236:	79fb      	ldrb	r3, [r7, #7]
 8003238:	429a      	cmp	r2, r3
 800323a:	d19b      	bne.n	8003174 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800323c:	2300      	movs	r3, #0
}
 800323e:	4618      	mov	r0, r3
 8003240:	3720      	adds	r7, #32
 8003242:	46bd      	mov	sp, r7
 8003244:	bd80      	pop	{r7, pc}
 8003246:	bf00      	nop
 8003248:	20000000 	.word	0x20000000

0800324c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	b086      	sub	sp, #24
 8003250:	af02      	add	r7, sp, #8
 8003252:	60f8      	str	r0, [r7, #12]
 8003254:	60b9      	str	r1, [r7, #8]
 8003256:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	685b      	ldr	r3, [r3, #4]
 800325c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003260:	d111      	bne.n	8003286 <SPI_EndRxTransaction+0x3a>
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	689b      	ldr	r3, [r3, #8]
 8003266:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800326a:	d004      	beq.n	8003276 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	689b      	ldr	r3, [r3, #8]
 8003270:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003274:	d107      	bne.n	8003286 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	681a      	ldr	r2, [r3, #0]
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003284:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	685b      	ldr	r3, [r3, #4]
 800328a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800328e:	d117      	bne.n	80032c0 <SPI_EndRxTransaction+0x74>
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	689b      	ldr	r3, [r3, #8]
 8003294:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003298:	d112      	bne.n	80032c0 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	9300      	str	r3, [sp, #0]
 800329e:	68bb      	ldr	r3, [r7, #8]
 80032a0:	2200      	movs	r2, #0
 80032a2:	2101      	movs	r1, #1
 80032a4:	68f8      	ldr	r0, [r7, #12]
 80032a6:	f7ff ff49 	bl	800313c <SPI_WaitFlagStateUntilTimeout>
 80032aa:	4603      	mov	r3, r0
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d01a      	beq.n	80032e6 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032b4:	f043 0220 	orr.w	r2, r3, #32
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80032bc:	2303      	movs	r3, #3
 80032be:	e013      	b.n	80032e8 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	9300      	str	r3, [sp, #0]
 80032c4:	68bb      	ldr	r3, [r7, #8]
 80032c6:	2200      	movs	r2, #0
 80032c8:	2180      	movs	r1, #128	; 0x80
 80032ca:	68f8      	ldr	r0, [r7, #12]
 80032cc:	f7ff ff36 	bl	800313c <SPI_WaitFlagStateUntilTimeout>
 80032d0:	4603      	mov	r3, r0
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d007      	beq.n	80032e6 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032da:	f043 0220 	orr.w	r2, r3, #32
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80032e2:	2303      	movs	r3, #3
 80032e4:	e000      	b.n	80032e8 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 80032e6:	2300      	movs	r3, #0
}
 80032e8:	4618      	mov	r0, r3
 80032ea:	3710      	adds	r7, #16
 80032ec:	46bd      	mov	sp, r7
 80032ee:	bd80      	pop	{r7, pc}

080032f0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b086      	sub	sp, #24
 80032f4:	af02      	add	r7, sp, #8
 80032f6:	60f8      	str	r0, [r7, #12]
 80032f8:	60b9      	str	r1, [r7, #8]
 80032fa:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	9300      	str	r3, [sp, #0]
 8003300:	68bb      	ldr	r3, [r7, #8]
 8003302:	2200      	movs	r2, #0
 8003304:	2180      	movs	r1, #128	; 0x80
 8003306:	68f8      	ldr	r0, [r7, #12]
 8003308:	f7ff ff18 	bl	800313c <SPI_WaitFlagStateUntilTimeout>
 800330c:	4603      	mov	r3, r0
 800330e:	2b00      	cmp	r3, #0
 8003310:	d007      	beq.n	8003322 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003316:	f043 0220 	orr.w	r2, r3, #32
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800331e:	2303      	movs	r3, #3
 8003320:	e000      	b.n	8003324 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8003322:	2300      	movs	r3, #0
}
 8003324:	4618      	mov	r0, r3
 8003326:	3710      	adds	r7, #16
 8003328:	46bd      	mov	sp, r7
 800332a:	bd80      	pop	{r7, pc}

0800332c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	b082      	sub	sp, #8
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2b00      	cmp	r3, #0
 8003338:	d101      	bne.n	800333e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800333a:	2301      	movs	r3, #1
 800333c:	e03f      	b.n	80033be <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003344:	b2db      	uxtb	r3, r3
 8003346:	2b00      	cmp	r3, #0
 8003348:	d106      	bne.n	8003358 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	2200      	movs	r2, #0
 800334e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003352:	6878      	ldr	r0, [r7, #4]
 8003354:	f7fe f99c 	bl	8001690 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2224      	movs	r2, #36	; 0x24
 800335c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	68da      	ldr	r2, [r3, #12]
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800336e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003370:	6878      	ldr	r0, [r7, #4]
 8003372:	f000 f9a7 	bl	80036c4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	691a      	ldr	r2, [r3, #16]
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003384:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	695a      	ldr	r2, [r3, #20]
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003394:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	68da      	ldr	r2, [r3, #12]
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80033a4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2200      	movs	r2, #0
 80033aa:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2220      	movs	r2, #32
 80033b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2220      	movs	r2, #32
 80033b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80033bc:	2300      	movs	r3, #0
}
 80033be:	4618      	mov	r0, r3
 80033c0:	3708      	adds	r7, #8
 80033c2:	46bd      	mov	sp, r7
 80033c4:	bd80      	pop	{r7, pc}

080033c6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80033c6:	b580      	push	{r7, lr}
 80033c8:	b08a      	sub	sp, #40	; 0x28
 80033ca:	af02      	add	r7, sp, #8
 80033cc:	60f8      	str	r0, [r7, #12]
 80033ce:	60b9      	str	r1, [r7, #8]
 80033d0:	603b      	str	r3, [r7, #0]
 80033d2:	4613      	mov	r3, r2
 80033d4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80033d6:	2300      	movs	r3, #0
 80033d8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033e0:	b2db      	uxtb	r3, r3
 80033e2:	2b20      	cmp	r3, #32
 80033e4:	d17c      	bne.n	80034e0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80033e6:	68bb      	ldr	r3, [r7, #8]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d002      	beq.n	80033f2 <HAL_UART_Transmit+0x2c>
 80033ec:	88fb      	ldrh	r3, [r7, #6]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d101      	bne.n	80033f6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80033f2:	2301      	movs	r3, #1
 80033f4:	e075      	b.n	80034e2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033fc:	2b01      	cmp	r3, #1
 80033fe:	d101      	bne.n	8003404 <HAL_UART_Transmit+0x3e>
 8003400:	2302      	movs	r3, #2
 8003402:	e06e      	b.n	80034e2 <HAL_UART_Transmit+0x11c>
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	2201      	movs	r2, #1
 8003408:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	2200      	movs	r2, #0
 8003410:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	2221      	movs	r2, #33	; 0x21
 8003416:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800341a:	f7fe fb05 	bl	8001a28 <HAL_GetTick>
 800341e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	88fa      	ldrh	r2, [r7, #6]
 8003424:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	88fa      	ldrh	r2, [r7, #6]
 800342a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	689b      	ldr	r3, [r3, #8]
 8003430:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003434:	d108      	bne.n	8003448 <HAL_UART_Transmit+0x82>
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	691b      	ldr	r3, [r3, #16]
 800343a:	2b00      	cmp	r3, #0
 800343c:	d104      	bne.n	8003448 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800343e:	2300      	movs	r3, #0
 8003440:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003442:	68bb      	ldr	r3, [r7, #8]
 8003444:	61bb      	str	r3, [r7, #24]
 8003446:	e003      	b.n	8003450 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003448:	68bb      	ldr	r3, [r7, #8]
 800344a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800344c:	2300      	movs	r3, #0
 800344e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	2200      	movs	r2, #0
 8003454:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003458:	e02a      	b.n	80034b0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	9300      	str	r3, [sp, #0]
 800345e:	697b      	ldr	r3, [r7, #20]
 8003460:	2200      	movs	r2, #0
 8003462:	2180      	movs	r1, #128	; 0x80
 8003464:	68f8      	ldr	r0, [r7, #12]
 8003466:	f000 f8e2 	bl	800362e <UART_WaitOnFlagUntilTimeout>
 800346a:	4603      	mov	r3, r0
 800346c:	2b00      	cmp	r3, #0
 800346e:	d001      	beq.n	8003474 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003470:	2303      	movs	r3, #3
 8003472:	e036      	b.n	80034e2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003474:	69fb      	ldr	r3, [r7, #28]
 8003476:	2b00      	cmp	r3, #0
 8003478:	d10b      	bne.n	8003492 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800347a:	69bb      	ldr	r3, [r7, #24]
 800347c:	881b      	ldrh	r3, [r3, #0]
 800347e:	461a      	mov	r2, r3
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003488:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800348a:	69bb      	ldr	r3, [r7, #24]
 800348c:	3302      	adds	r3, #2
 800348e:	61bb      	str	r3, [r7, #24]
 8003490:	e007      	b.n	80034a2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003492:	69fb      	ldr	r3, [r7, #28]
 8003494:	781a      	ldrb	r2, [r3, #0]
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800349c:	69fb      	ldr	r3, [r7, #28]
 800349e:	3301      	adds	r3, #1
 80034a0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80034a6:	b29b      	uxth	r3, r3
 80034a8:	3b01      	subs	r3, #1
 80034aa:	b29a      	uxth	r2, r3
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80034b4:	b29b      	uxth	r3, r3
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d1cf      	bne.n	800345a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	9300      	str	r3, [sp, #0]
 80034be:	697b      	ldr	r3, [r7, #20]
 80034c0:	2200      	movs	r2, #0
 80034c2:	2140      	movs	r1, #64	; 0x40
 80034c4:	68f8      	ldr	r0, [r7, #12]
 80034c6:	f000 f8b2 	bl	800362e <UART_WaitOnFlagUntilTimeout>
 80034ca:	4603      	mov	r3, r0
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d001      	beq.n	80034d4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80034d0:	2303      	movs	r3, #3
 80034d2:	e006      	b.n	80034e2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	2220      	movs	r2, #32
 80034d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80034dc:	2300      	movs	r3, #0
 80034de:	e000      	b.n	80034e2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80034e0:	2302      	movs	r3, #2
  }
}
 80034e2:	4618      	mov	r0, r3
 80034e4:	3720      	adds	r7, #32
 80034e6:	46bd      	mov	sp, r7
 80034e8:	bd80      	pop	{r7, pc}

080034ea <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80034ea:	b580      	push	{r7, lr}
 80034ec:	b08a      	sub	sp, #40	; 0x28
 80034ee:	af02      	add	r7, sp, #8
 80034f0:	60f8      	str	r0, [r7, #12]
 80034f2:	60b9      	str	r1, [r7, #8]
 80034f4:	603b      	str	r3, [r7, #0]
 80034f6:	4613      	mov	r3, r2
 80034f8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80034fa:	2300      	movs	r3, #0
 80034fc:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003504:	b2db      	uxtb	r3, r3
 8003506:	2b20      	cmp	r3, #32
 8003508:	f040 808c 	bne.w	8003624 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 800350c:	68bb      	ldr	r3, [r7, #8]
 800350e:	2b00      	cmp	r3, #0
 8003510:	d002      	beq.n	8003518 <HAL_UART_Receive+0x2e>
 8003512:	88fb      	ldrh	r3, [r7, #6]
 8003514:	2b00      	cmp	r3, #0
 8003516:	d101      	bne.n	800351c <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8003518:	2301      	movs	r3, #1
 800351a:	e084      	b.n	8003626 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003522:	2b01      	cmp	r3, #1
 8003524:	d101      	bne.n	800352a <HAL_UART_Receive+0x40>
 8003526:	2302      	movs	r3, #2
 8003528:	e07d      	b.n	8003626 <HAL_UART_Receive+0x13c>
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	2201      	movs	r2, #1
 800352e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	2200      	movs	r2, #0
 8003536:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	2222      	movs	r2, #34	; 0x22
 800353c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	2200      	movs	r2, #0
 8003544:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003546:	f7fe fa6f 	bl	8001a28 <HAL_GetTick>
 800354a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	88fa      	ldrh	r2, [r7, #6]
 8003550:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	88fa      	ldrh	r2, [r7, #6]
 8003556:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	689b      	ldr	r3, [r3, #8]
 800355c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003560:	d108      	bne.n	8003574 <HAL_UART_Receive+0x8a>
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	691b      	ldr	r3, [r3, #16]
 8003566:	2b00      	cmp	r3, #0
 8003568:	d104      	bne.n	8003574 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 800356a:	2300      	movs	r3, #0
 800356c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800356e:	68bb      	ldr	r3, [r7, #8]
 8003570:	61bb      	str	r3, [r7, #24]
 8003572:	e003      	b.n	800357c <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8003574:	68bb      	ldr	r3, [r7, #8]
 8003576:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003578:	2300      	movs	r3, #0
 800357a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	2200      	movs	r2, #0
 8003580:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8003584:	e043      	b.n	800360e <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	9300      	str	r3, [sp, #0]
 800358a:	697b      	ldr	r3, [r7, #20]
 800358c:	2200      	movs	r2, #0
 800358e:	2120      	movs	r1, #32
 8003590:	68f8      	ldr	r0, [r7, #12]
 8003592:	f000 f84c 	bl	800362e <UART_WaitOnFlagUntilTimeout>
 8003596:	4603      	mov	r3, r0
 8003598:	2b00      	cmp	r3, #0
 800359a:	d001      	beq.n	80035a0 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 800359c:	2303      	movs	r3, #3
 800359e:	e042      	b.n	8003626 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 80035a0:	69fb      	ldr	r3, [r7, #28]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d10c      	bne.n	80035c0 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	685b      	ldr	r3, [r3, #4]
 80035ac:	b29b      	uxth	r3, r3
 80035ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80035b2:	b29a      	uxth	r2, r3
 80035b4:	69bb      	ldr	r3, [r7, #24]
 80035b6:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80035b8:	69bb      	ldr	r3, [r7, #24]
 80035ba:	3302      	adds	r3, #2
 80035bc:	61bb      	str	r3, [r7, #24]
 80035be:	e01f      	b.n	8003600 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	689b      	ldr	r3, [r3, #8]
 80035c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035c8:	d007      	beq.n	80035da <HAL_UART_Receive+0xf0>
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	689b      	ldr	r3, [r3, #8]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d10a      	bne.n	80035e8 <HAL_UART_Receive+0xfe>
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	691b      	ldr	r3, [r3, #16]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d106      	bne.n	80035e8 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	b2da      	uxtb	r2, r3
 80035e2:	69fb      	ldr	r3, [r7, #28]
 80035e4:	701a      	strb	r2, [r3, #0]
 80035e6:	e008      	b.n	80035fa <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	685b      	ldr	r3, [r3, #4]
 80035ee:	b2db      	uxtb	r3, r3
 80035f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80035f4:	b2da      	uxtb	r2, r3
 80035f6:	69fb      	ldr	r3, [r7, #28]
 80035f8:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80035fa:	69fb      	ldr	r3, [r7, #28]
 80035fc:	3301      	adds	r3, #1
 80035fe:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003604:	b29b      	uxth	r3, r3
 8003606:	3b01      	subs	r3, #1
 8003608:	b29a      	uxth	r2, r3
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003612:	b29b      	uxth	r3, r3
 8003614:	2b00      	cmp	r3, #0
 8003616:	d1b6      	bne.n	8003586 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	2220      	movs	r2, #32
 800361c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8003620:	2300      	movs	r3, #0
 8003622:	e000      	b.n	8003626 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8003624:	2302      	movs	r3, #2
  }
}
 8003626:	4618      	mov	r0, r3
 8003628:	3720      	adds	r7, #32
 800362a:	46bd      	mov	sp, r7
 800362c:	bd80      	pop	{r7, pc}

0800362e <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800362e:	b580      	push	{r7, lr}
 8003630:	b084      	sub	sp, #16
 8003632:	af00      	add	r7, sp, #0
 8003634:	60f8      	str	r0, [r7, #12]
 8003636:	60b9      	str	r1, [r7, #8]
 8003638:	603b      	str	r3, [r7, #0]
 800363a:	4613      	mov	r3, r2
 800363c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800363e:	e02c      	b.n	800369a <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003640:	69bb      	ldr	r3, [r7, #24]
 8003642:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003646:	d028      	beq.n	800369a <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003648:	69bb      	ldr	r3, [r7, #24]
 800364a:	2b00      	cmp	r3, #0
 800364c:	d007      	beq.n	800365e <UART_WaitOnFlagUntilTimeout+0x30>
 800364e:	f7fe f9eb 	bl	8001a28 <HAL_GetTick>
 8003652:	4602      	mov	r2, r0
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	1ad3      	subs	r3, r2, r3
 8003658:	69ba      	ldr	r2, [r7, #24]
 800365a:	429a      	cmp	r2, r3
 800365c:	d21d      	bcs.n	800369a <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	68da      	ldr	r2, [r3, #12]
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800366c:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	695a      	ldr	r2, [r3, #20]
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f022 0201 	bic.w	r2, r2, #1
 800367c:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	2220      	movs	r2, #32
 8003682:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	2220      	movs	r2, #32
 800368a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	2200      	movs	r2, #0
 8003692:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003696:	2303      	movs	r3, #3
 8003698:	e00f      	b.n	80036ba <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	681a      	ldr	r2, [r3, #0]
 80036a0:	68bb      	ldr	r3, [r7, #8]
 80036a2:	4013      	ands	r3, r2
 80036a4:	68ba      	ldr	r2, [r7, #8]
 80036a6:	429a      	cmp	r2, r3
 80036a8:	bf0c      	ite	eq
 80036aa:	2301      	moveq	r3, #1
 80036ac:	2300      	movne	r3, #0
 80036ae:	b2db      	uxtb	r3, r3
 80036b0:	461a      	mov	r2, r3
 80036b2:	79fb      	ldrb	r3, [r7, #7]
 80036b4:	429a      	cmp	r2, r3
 80036b6:	d0c3      	beq.n	8003640 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80036b8:	2300      	movs	r3, #0
}
 80036ba:	4618      	mov	r0, r3
 80036bc:	3710      	adds	r7, #16
 80036be:	46bd      	mov	sp, r7
 80036c0:	bd80      	pop	{r7, pc}
	...

080036c4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b084      	sub	sp, #16
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	691b      	ldr	r3, [r3, #16]
 80036d2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	68da      	ldr	r2, [r3, #12]
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	430a      	orrs	r2, r1
 80036e0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	689a      	ldr	r2, [r3, #8]
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	691b      	ldr	r3, [r3, #16]
 80036ea:	431a      	orrs	r2, r3
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	695b      	ldr	r3, [r3, #20]
 80036f0:	4313      	orrs	r3, r2
 80036f2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	68db      	ldr	r3, [r3, #12]
 80036fa:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80036fe:	f023 030c 	bic.w	r3, r3, #12
 8003702:	687a      	ldr	r2, [r7, #4]
 8003704:	6812      	ldr	r2, [r2, #0]
 8003706:	68b9      	ldr	r1, [r7, #8]
 8003708:	430b      	orrs	r3, r1
 800370a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	695b      	ldr	r3, [r3, #20]
 8003712:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	699a      	ldr	r2, [r3, #24]
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	430a      	orrs	r2, r1
 8003720:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	4a2c      	ldr	r2, [pc, #176]	; (80037d8 <UART_SetConfig+0x114>)
 8003728:	4293      	cmp	r3, r2
 800372a:	d103      	bne.n	8003734 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800372c:	f7ff f854 	bl	80027d8 <HAL_RCC_GetPCLK2Freq>
 8003730:	60f8      	str	r0, [r7, #12]
 8003732:	e002      	b.n	800373a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003734:	f7ff f83c 	bl	80027b0 <HAL_RCC_GetPCLK1Freq>
 8003738:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800373a:	68fa      	ldr	r2, [r7, #12]
 800373c:	4613      	mov	r3, r2
 800373e:	009b      	lsls	r3, r3, #2
 8003740:	4413      	add	r3, r2
 8003742:	009a      	lsls	r2, r3, #2
 8003744:	441a      	add	r2, r3
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	685b      	ldr	r3, [r3, #4]
 800374a:	009b      	lsls	r3, r3, #2
 800374c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003750:	4a22      	ldr	r2, [pc, #136]	; (80037dc <UART_SetConfig+0x118>)
 8003752:	fba2 2303 	umull	r2, r3, r2, r3
 8003756:	095b      	lsrs	r3, r3, #5
 8003758:	0119      	lsls	r1, r3, #4
 800375a:	68fa      	ldr	r2, [r7, #12]
 800375c:	4613      	mov	r3, r2
 800375e:	009b      	lsls	r3, r3, #2
 8003760:	4413      	add	r3, r2
 8003762:	009a      	lsls	r2, r3, #2
 8003764:	441a      	add	r2, r3
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	685b      	ldr	r3, [r3, #4]
 800376a:	009b      	lsls	r3, r3, #2
 800376c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003770:	4b1a      	ldr	r3, [pc, #104]	; (80037dc <UART_SetConfig+0x118>)
 8003772:	fba3 0302 	umull	r0, r3, r3, r2
 8003776:	095b      	lsrs	r3, r3, #5
 8003778:	2064      	movs	r0, #100	; 0x64
 800377a:	fb00 f303 	mul.w	r3, r0, r3
 800377e:	1ad3      	subs	r3, r2, r3
 8003780:	011b      	lsls	r3, r3, #4
 8003782:	3332      	adds	r3, #50	; 0x32
 8003784:	4a15      	ldr	r2, [pc, #84]	; (80037dc <UART_SetConfig+0x118>)
 8003786:	fba2 2303 	umull	r2, r3, r2, r3
 800378a:	095b      	lsrs	r3, r3, #5
 800378c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003790:	4419      	add	r1, r3
 8003792:	68fa      	ldr	r2, [r7, #12]
 8003794:	4613      	mov	r3, r2
 8003796:	009b      	lsls	r3, r3, #2
 8003798:	4413      	add	r3, r2
 800379a:	009a      	lsls	r2, r3, #2
 800379c:	441a      	add	r2, r3
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	685b      	ldr	r3, [r3, #4]
 80037a2:	009b      	lsls	r3, r3, #2
 80037a4:	fbb2 f2f3 	udiv	r2, r2, r3
 80037a8:	4b0c      	ldr	r3, [pc, #48]	; (80037dc <UART_SetConfig+0x118>)
 80037aa:	fba3 0302 	umull	r0, r3, r3, r2
 80037ae:	095b      	lsrs	r3, r3, #5
 80037b0:	2064      	movs	r0, #100	; 0x64
 80037b2:	fb00 f303 	mul.w	r3, r0, r3
 80037b6:	1ad3      	subs	r3, r2, r3
 80037b8:	011b      	lsls	r3, r3, #4
 80037ba:	3332      	adds	r3, #50	; 0x32
 80037bc:	4a07      	ldr	r2, [pc, #28]	; (80037dc <UART_SetConfig+0x118>)
 80037be:	fba2 2303 	umull	r2, r3, r2, r3
 80037c2:	095b      	lsrs	r3, r3, #5
 80037c4:	f003 020f 	and.w	r2, r3, #15
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	440a      	add	r2, r1
 80037ce:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80037d0:	bf00      	nop
 80037d2:	3710      	adds	r7, #16
 80037d4:	46bd      	mov	sp, r7
 80037d6:	bd80      	pop	{r7, pc}
 80037d8:	40013800 	.word	0x40013800
 80037dc:	51eb851f 	.word	0x51eb851f

080037e0 <LoRa_gotoMode>:
			LoRa* LoRa    --> LoRa object handler
			mode	        --> select from defined modes

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_gotoMode(LoRa* _LoRa, int mode){
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b084      	sub	sp, #16
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
 80037e8:	6039      	str	r1, [r7, #0]
	uint8_t    read;
	uint8_t    data;

	read = LoRa_read(_LoRa, RegOpMode);
 80037ea:	2101      	movs	r1, #1
 80037ec:	6878      	ldr	r0, [r7, #4]
 80037ee:	f000 f9a0 	bl	8003b32 <LoRa_read>
 80037f2:	4603      	mov	r3, r0
 80037f4:	73bb      	strb	r3, [r7, #14]
	data = read;
 80037f6:	7bbb      	ldrb	r3, [r7, #14]
 80037f8:	73fb      	strb	r3, [r7, #15]

	if(mode == SLEEP_MODE){
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d107      	bne.n	8003810 <LoRa_gotoMode+0x30>
		data = (read & 0xF8) | 0x00;
 8003800:	7bbb      	ldrb	r3, [r7, #14]
 8003802:	f023 0307 	bic.w	r3, r3, #7
 8003806:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = SLEEP_MODE;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2200      	movs	r2, #0
 800380c:	61da      	str	r2, [r3, #28]
 800380e:	e03e      	b.n	800388e <LoRa_gotoMode+0xae>
	}else if (mode == STNBY_MODE){
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	2b01      	cmp	r3, #1
 8003814:	d10c      	bne.n	8003830 <LoRa_gotoMode+0x50>
		data = (read & 0xF8) | 0x01;
 8003816:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800381a:	f023 0307 	bic.w	r3, r3, #7
 800381e:	b25b      	sxtb	r3, r3
 8003820:	f043 0301 	orr.w	r3, r3, #1
 8003824:	b25b      	sxtb	r3, r3
 8003826:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = STNBY_MODE;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2201      	movs	r2, #1
 800382c:	61da      	str	r2, [r3, #28]
 800382e:	e02e      	b.n	800388e <LoRa_gotoMode+0xae>
	}else if (mode == TRANSMIT_MODE){
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	2b03      	cmp	r3, #3
 8003834:	d10c      	bne.n	8003850 <LoRa_gotoMode+0x70>
		data = (read & 0xF8) | 0x03;
 8003836:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800383a:	f023 0307 	bic.w	r3, r3, #7
 800383e:	b25b      	sxtb	r3, r3
 8003840:	f043 0303 	orr.w	r3, r3, #3
 8003844:	b25b      	sxtb	r3, r3
 8003846:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = TRANSMIT_MODE;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2203      	movs	r2, #3
 800384c:	61da      	str	r2, [r3, #28]
 800384e:	e01e      	b.n	800388e <LoRa_gotoMode+0xae>
	}else if (mode == RXCONTIN_MODE){
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	2b05      	cmp	r3, #5
 8003854:	d10c      	bne.n	8003870 <LoRa_gotoMode+0x90>
		data = (read & 0xF8) | 0x05;
 8003856:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800385a:	f023 0307 	bic.w	r3, r3, #7
 800385e:	b25b      	sxtb	r3, r3
 8003860:	f043 0305 	orr.w	r3, r3, #5
 8003864:	b25b      	sxtb	r3, r3
 8003866:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = RXCONTIN_MODE;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2205      	movs	r2, #5
 800386c:	61da      	str	r2, [r3, #28]
 800386e:	e00e      	b.n	800388e <LoRa_gotoMode+0xae>
	}else if (mode == RXSINGLE_MODE){
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	2b06      	cmp	r3, #6
 8003874:	d10b      	bne.n	800388e <LoRa_gotoMode+0xae>
		data = (read & 0xF8) | 0x06;
 8003876:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800387a:	f023 0307 	bic.w	r3, r3, #7
 800387e:	b25b      	sxtb	r3, r3
 8003880:	f043 0306 	orr.w	r3, r3, #6
 8003884:	b25b      	sxtb	r3, r3
 8003886:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = RXSINGLE_MODE;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2206      	movs	r2, #6
 800388c:	61da      	str	r2, [r3, #28]
	}

	LoRa_write(_LoRa, RegOpMode, data);
 800388e:	7bfb      	ldrb	r3, [r7, #15]
 8003890:	461a      	mov	r2, r3
 8003892:	2101      	movs	r1, #1
 8003894:	6878      	ldr	r0, [r7, #4]
 8003896:	f000 f966 	bl	8003b66 <LoRa_write>
	//HAL_Delay(10);
}
 800389a:	bf00      	nop
 800389c:	3710      	adds	r7, #16
 800389e:	46bd      	mov	sp, r7
 80038a0:	bd80      	pop	{r7, pc}

080038a2 <LoRa_readReg>:
			uint8_t* output		--> pointer to the beginning of output array
			uint16_t w_length	--> detemines number of bytes that you want to read

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_readReg(LoRa* _LoRa, uint8_t* address, uint16_t r_length, uint8_t* output, uint16_t w_length){
 80038a2:	b580      	push	{r7, lr}
 80038a4:	b084      	sub	sp, #16
 80038a6:	af00      	add	r7, sp, #0
 80038a8:	60f8      	str	r0, [r7, #12]
 80038aa:	60b9      	str	r1, [r7, #8]
 80038ac:	603b      	str	r3, [r7, #0]
 80038ae:	4613      	mov	r3, r2
 80038b0:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	6818      	ldr	r0, [r3, #0]
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	889b      	ldrh	r3, [r3, #4]
 80038ba:	2200      	movs	r2, #0
 80038bc:	4619      	mov	r1, r3
 80038be:	f7fe fb73 	bl	8001fa8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_LoRa->hSPIx, address, r_length, TRANSMIT_TIMEOUT);
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	6998      	ldr	r0, [r3, #24]
 80038c6:	88fa      	ldrh	r2, [r7, #6]
 80038c8:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80038cc:	68b9      	ldr	r1, [r7, #8]
 80038ce:	f7ff f839 	bl	8002944 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 80038d2:	bf00      	nop
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	699b      	ldr	r3, [r3, #24]
 80038d8:	4618      	mov	r0, r3
 80038da:	f7ff fc22 	bl	8003122 <HAL_SPI_GetState>
 80038de:	4603      	mov	r3, r0
 80038e0:	2b01      	cmp	r3, #1
 80038e2:	d1f7      	bne.n	80038d4 <LoRa_readReg+0x32>
		;
	HAL_SPI_Receive(_LoRa->hSPIx, output, w_length, RECEIVE_TIMEOUT);
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	6998      	ldr	r0, [r3, #24]
 80038e8:	8b3a      	ldrh	r2, [r7, #24]
 80038ea:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80038ee:	6839      	ldr	r1, [r7, #0]
 80038f0:	f7ff f964 	bl	8002bbc <HAL_SPI_Receive>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 80038f4:	bf00      	nop
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	699b      	ldr	r3, [r3, #24]
 80038fa:	4618      	mov	r0, r3
 80038fc:	f7ff fc11 	bl	8003122 <HAL_SPI_GetState>
 8003900:	4603      	mov	r3, r0
 8003902:	2b01      	cmp	r3, #1
 8003904:	d1f7      	bne.n	80038f6 <LoRa_readReg+0x54>
		;
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	6818      	ldr	r0, [r3, #0]
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	889b      	ldrh	r3, [r3, #4]
 800390e:	2201      	movs	r2, #1
 8003910:	4619      	mov	r1, r3
 8003912:	f7fe fb49 	bl	8001fa8 <HAL_GPIO_WritePin>
}
 8003916:	bf00      	nop
 8003918:	3710      	adds	r7, #16
 800391a:	46bd      	mov	sp, r7
 800391c:	bd80      	pop	{r7, pc}

0800391e <LoRa_writeReg>:
			uint8_t* output		--> pointer to the beginning of values array
			uint16_t w_length	--> detemines number of bytes that you want to send

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_writeReg(LoRa* _LoRa, uint8_t* address, uint16_t r_length, uint8_t* values, uint16_t w_length){
 800391e:	b580      	push	{r7, lr}
 8003920:	b084      	sub	sp, #16
 8003922:	af00      	add	r7, sp, #0
 8003924:	60f8      	str	r0, [r7, #12]
 8003926:	60b9      	str	r1, [r7, #8]
 8003928:	603b      	str	r3, [r7, #0]
 800392a:	4613      	mov	r3, r2
 800392c:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	6818      	ldr	r0, [r3, #0]
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	889b      	ldrh	r3, [r3, #4]
 8003936:	2200      	movs	r2, #0
 8003938:	4619      	mov	r1, r3
 800393a:	f7fe fb35 	bl	8001fa8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_LoRa->hSPIx, address, r_length, TRANSMIT_TIMEOUT);
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	6998      	ldr	r0, [r3, #24]
 8003942:	88fa      	ldrh	r2, [r7, #6]
 8003944:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8003948:	68b9      	ldr	r1, [r7, #8]
 800394a:	f7fe fffb 	bl	8002944 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 800394e:	bf00      	nop
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	699b      	ldr	r3, [r3, #24]
 8003954:	4618      	mov	r0, r3
 8003956:	f7ff fbe4 	bl	8003122 <HAL_SPI_GetState>
 800395a:	4603      	mov	r3, r0
 800395c:	2b01      	cmp	r3, #1
 800395e:	d1f7      	bne.n	8003950 <LoRa_writeReg+0x32>
		;
	HAL_SPI_Transmit(_LoRa->hSPIx, values, w_length, TRANSMIT_TIMEOUT);
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	6998      	ldr	r0, [r3, #24]
 8003964:	8b3a      	ldrh	r2, [r7, #24]
 8003966:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800396a:	6839      	ldr	r1, [r7, #0]
 800396c:	f7fe ffea 	bl	8002944 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8003970:	bf00      	nop
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	699b      	ldr	r3, [r3, #24]
 8003976:	4618      	mov	r0, r3
 8003978:	f7ff fbd3 	bl	8003122 <HAL_SPI_GetState>
 800397c:	4603      	mov	r3, r0
 800397e:	2b01      	cmp	r3, #1
 8003980:	d1f7      	bne.n	8003972 <LoRa_writeReg+0x54>
		;
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	6818      	ldr	r0, [r3, #0]
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	889b      	ldrh	r3, [r3, #4]
 800398a:	2201      	movs	r2, #1
 800398c:	4619      	mov	r1, r3
 800398e:	f7fe fb0b 	bl	8001fa8 <HAL_GPIO_WritePin>
}
 8003992:	bf00      	nop
 8003994:	3710      	adds	r7, #16
 8003996:	46bd      	mov	sp, r7
 8003998:	bd80      	pop	{r7, pc}

0800399a <LoRa_setFrequency>:
			LoRa* LoRa        --> LoRa object handler
			int   freq        --> desired frequency in MHz unit, e.g 434

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setFrequency(LoRa* _LoRa, int freq){
 800399a:	b580      	push	{r7, lr}
 800399c:	b084      	sub	sp, #16
 800399e:	af00      	add	r7, sp, #0
 80039a0:	6078      	str	r0, [r7, #4]
 80039a2:	6039      	str	r1, [r7, #0]
	uint8_t  data;
	uint32_t F;
	F = (freq * 524288)>>5;
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	04db      	lsls	r3, r3, #19
 80039a8:	115b      	asrs	r3, r3, #5
 80039aa:	60fb      	str	r3, [r7, #12]

	// write Msb:
	data = F >> 16;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	0c1b      	lsrs	r3, r3, #16
 80039b0:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrMsb, data);
 80039b2:	7afb      	ldrb	r3, [r7, #11]
 80039b4:	461a      	mov	r2, r3
 80039b6:	2106      	movs	r1, #6
 80039b8:	6878      	ldr	r0, [r7, #4]
 80039ba:	f000 f8d4 	bl	8003b66 <LoRa_write>
	HAL_Delay(5);
 80039be:	2005      	movs	r0, #5
 80039c0:	f7fe f83c 	bl	8001a3c <HAL_Delay>

	// write Mid:
	data = F >> 8;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	0a1b      	lsrs	r3, r3, #8
 80039c8:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrMid, data);
 80039ca:	7afb      	ldrb	r3, [r7, #11]
 80039cc:	461a      	mov	r2, r3
 80039ce:	2107      	movs	r1, #7
 80039d0:	6878      	ldr	r0, [r7, #4]
 80039d2:	f000 f8c8 	bl	8003b66 <LoRa_write>
	HAL_Delay(5);
 80039d6:	2005      	movs	r0, #5
 80039d8:	f7fe f830 	bl	8001a3c <HAL_Delay>

	// write Lsb:
	data = F >> 0;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrLsb, data);
 80039e0:	7afb      	ldrb	r3, [r7, #11]
 80039e2:	461a      	mov	r2, r3
 80039e4:	2108      	movs	r1, #8
 80039e6:	6878      	ldr	r0, [r7, #4]
 80039e8:	f000 f8bd 	bl	8003b66 <LoRa_write>
	HAL_Delay(5);
 80039ec:	2005      	movs	r0, #5
 80039ee:	f7fe f825 	bl	8001a3c <HAL_Delay>
}
 80039f2:	bf00      	nop
 80039f4:	3710      	adds	r7, #16
 80039f6:	46bd      	mov	sp, r7
 80039f8:	bd80      	pop	{r7, pc}

080039fa <LoRa_setSpreadingFactor>:
			LoRa* LoRa        --> LoRa object handler
			int   SP          --> desired spreading factor e.g 7

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setSpreadingFactor(LoRa* _LoRa, int SF){
 80039fa:	b580      	push	{r7, lr}
 80039fc:	b084      	sub	sp, #16
 80039fe:	af00      	add	r7, sp, #0
 8003a00:	6078      	str	r0, [r7, #4]
 8003a02:	6039      	str	r1, [r7, #0]
	uint8_t	data;
	uint8_t	read;

	if(SF>12)
 8003a04:	683b      	ldr	r3, [r7, #0]
 8003a06:	2b0c      	cmp	r3, #12
 8003a08:	dd01      	ble.n	8003a0e <LoRa_setSpreadingFactor+0x14>
		SF = 12;
 8003a0a:	230c      	movs	r3, #12
 8003a0c:	603b      	str	r3, [r7, #0]
	if(SF<7)
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	2b06      	cmp	r3, #6
 8003a12:	dc01      	bgt.n	8003a18 <LoRa_setSpreadingFactor+0x1e>
		SF = 7;
 8003a14:	2307      	movs	r3, #7
 8003a16:	603b      	str	r3, [r7, #0]

	read = LoRa_read(_LoRa, RegModemConfig2);
 8003a18:	211e      	movs	r1, #30
 8003a1a:	6878      	ldr	r0, [r7, #4]
 8003a1c:	f000 f889 	bl	8003b32 <LoRa_read>
 8003a20:	4603      	mov	r3, r0
 8003a22:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(10);
 8003a24:	200a      	movs	r0, #10
 8003a26:	f7fe f809 	bl	8001a3c <HAL_Delay>

	data = (SF << 4) + (read & 0x0F);
 8003a2a:	683b      	ldr	r3, [r7, #0]
 8003a2c:	b2db      	uxtb	r3, r3
 8003a2e:	011b      	lsls	r3, r3, #4
 8003a30:	b2da      	uxtb	r2, r3
 8003a32:	7bfb      	ldrb	r3, [r7, #15]
 8003a34:	f003 030f 	and.w	r3, r3, #15
 8003a38:	b2db      	uxtb	r3, r3
 8003a3a:	4413      	add	r3, r2
 8003a3c:	73bb      	strb	r3, [r7, #14]
	LoRa_write(_LoRa, RegModemConfig2, data);
 8003a3e:	7bbb      	ldrb	r3, [r7, #14]
 8003a40:	461a      	mov	r2, r3
 8003a42:	211e      	movs	r1, #30
 8003a44:	6878      	ldr	r0, [r7, #4]
 8003a46:	f000 f88e 	bl	8003b66 <LoRa_write>
	HAL_Delay(10);
 8003a4a:	200a      	movs	r0, #10
 8003a4c:	f7fd fff6 	bl	8001a3c <HAL_Delay>
}
 8003a50:	bf00      	nop
 8003a52:	3710      	adds	r7, #16
 8003a54:	46bd      	mov	sp, r7
 8003a56:	bd80      	pop	{r7, pc}

08003a58 <LoRa_setPower>:
			LoRa* LoRa        --> LoRa object handler
			int   power       --> desired power e.g POWER_17db

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setPower(LoRa* _LoRa, uint8_t power){
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b082      	sub	sp, #8
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
 8003a60:	460b      	mov	r3, r1
 8003a62:	70fb      	strb	r3, [r7, #3]
	LoRa_write(_LoRa, RegPaConfig, power);
 8003a64:	78fb      	ldrb	r3, [r7, #3]
 8003a66:	461a      	mov	r2, r3
 8003a68:	2109      	movs	r1, #9
 8003a6a:	6878      	ldr	r0, [r7, #4]
 8003a6c:	f000 f87b 	bl	8003b66 <LoRa_write>
	HAL_Delay(10);
 8003a70:	200a      	movs	r0, #10
 8003a72:	f7fd ffe3 	bl	8001a3c <HAL_Delay>
}
 8003a76:	bf00      	nop
 8003a78:	3708      	adds	r7, #8
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	bd80      	pop	{r7, pc}
	...

08003a80 <LoRa_setOCP>:
			LoRa* LoRa        --> LoRa object handler
			int   current     --> desired max currnet in mA, e.g 120

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setOCP(LoRa* _LoRa, uint8_t current){
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b084      	sub	sp, #16
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
 8003a88:	460b      	mov	r3, r1
 8003a8a:	70fb      	strb	r3, [r7, #3]
	uint8_t	OcpTrim = 0;
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	73fb      	strb	r3, [r7, #15]

	if(current<45)
 8003a90:	78fb      	ldrb	r3, [r7, #3]
 8003a92:	2b2c      	cmp	r3, #44	; 0x2c
 8003a94:	d801      	bhi.n	8003a9a <LoRa_setOCP+0x1a>
		current = 45;
 8003a96:	232d      	movs	r3, #45	; 0x2d
 8003a98:	70fb      	strb	r3, [r7, #3]
	if(current>240)
 8003a9a:	78fb      	ldrb	r3, [r7, #3]
 8003a9c:	2bf0      	cmp	r3, #240	; 0xf0
 8003a9e:	d901      	bls.n	8003aa4 <LoRa_setOCP+0x24>
		current = 240;
 8003aa0:	23f0      	movs	r3, #240	; 0xf0
 8003aa2:	70fb      	strb	r3, [r7, #3]

	if(current <= 120)
 8003aa4:	78fb      	ldrb	r3, [r7, #3]
 8003aa6:	2b78      	cmp	r3, #120	; 0x78
 8003aa8:	d809      	bhi.n	8003abe <LoRa_setOCP+0x3e>
		OcpTrim = (current - 45)/5;
 8003aaa:	78fb      	ldrb	r3, [r7, #3]
 8003aac:	3b2d      	subs	r3, #45	; 0x2d
 8003aae:	4a12      	ldr	r2, [pc, #72]	; (8003af8 <LoRa_setOCP+0x78>)
 8003ab0:	fb82 1203 	smull	r1, r2, r2, r3
 8003ab4:	1052      	asrs	r2, r2, #1
 8003ab6:	17db      	asrs	r3, r3, #31
 8003ab8:	1ad3      	subs	r3, r2, r3
 8003aba:	73fb      	strb	r3, [r7, #15]
 8003abc:	e00b      	b.n	8003ad6 <LoRa_setOCP+0x56>
	else if(current <= 240)
 8003abe:	78fb      	ldrb	r3, [r7, #3]
 8003ac0:	2bf0      	cmp	r3, #240	; 0xf0
 8003ac2:	d808      	bhi.n	8003ad6 <LoRa_setOCP+0x56>
		OcpTrim = (current + 30)/10;
 8003ac4:	78fb      	ldrb	r3, [r7, #3]
 8003ac6:	331e      	adds	r3, #30
 8003ac8:	4a0b      	ldr	r2, [pc, #44]	; (8003af8 <LoRa_setOCP+0x78>)
 8003aca:	fb82 1203 	smull	r1, r2, r2, r3
 8003ace:	1092      	asrs	r2, r2, #2
 8003ad0:	17db      	asrs	r3, r3, #31
 8003ad2:	1ad3      	subs	r3, r2, r3
 8003ad4:	73fb      	strb	r3, [r7, #15]

	OcpTrim = OcpTrim + (1 << 5);
 8003ad6:	7bfb      	ldrb	r3, [r7, #15]
 8003ad8:	3320      	adds	r3, #32
 8003ada:	73fb      	strb	r3, [r7, #15]
	LoRa_write(_LoRa, RegOcp, OcpTrim);
 8003adc:	7bfb      	ldrb	r3, [r7, #15]
 8003ade:	461a      	mov	r2, r3
 8003ae0:	210b      	movs	r1, #11
 8003ae2:	6878      	ldr	r0, [r7, #4]
 8003ae4:	f000 f83f 	bl	8003b66 <LoRa_write>
	HAL_Delay(10);
 8003ae8:	200a      	movs	r0, #10
 8003aea:	f7fd ffa7 	bl	8001a3c <HAL_Delay>
}
 8003aee:	bf00      	nop
 8003af0:	3710      	adds	r7, #16
 8003af2:	46bd      	mov	sp, r7
 8003af4:	bd80      	pop	{r7, pc}
 8003af6:	bf00      	nop
 8003af8:	66666667 	.word	0x66666667

08003afc <LoRa_setTOMsb_setCRCon>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setTOMsb_setCRCon(LoRa* _LoRa){
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b084      	sub	sp, #16
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
	uint8_t read, data;

	read = LoRa_read(_LoRa, RegModemConfig2);
 8003b04:	211e      	movs	r1, #30
 8003b06:	6878      	ldr	r0, [r7, #4]
 8003b08:	f000 f813 	bl	8003b32 <LoRa_read>
 8003b0c:	4603      	mov	r3, r0
 8003b0e:	73fb      	strb	r3, [r7, #15]

	data = read | 0x07;
 8003b10:	7bfb      	ldrb	r3, [r7, #15]
 8003b12:	f043 0307 	orr.w	r3, r3, #7
 8003b16:	73bb      	strb	r3, [r7, #14]
	LoRa_write(_LoRa, RegModemConfig2, data);\
 8003b18:	7bbb      	ldrb	r3, [r7, #14]
 8003b1a:	461a      	mov	r2, r3
 8003b1c:	211e      	movs	r1, #30
 8003b1e:	6878      	ldr	r0, [r7, #4]
 8003b20:	f000 f821 	bl	8003b66 <LoRa_write>
	HAL_Delay(10);
 8003b24:	200a      	movs	r0, #10
 8003b26:	f7fd ff89 	bl	8001a3c <HAL_Delay>
}
 8003b2a:	bf00      	nop
 8003b2c:	3710      	adds	r7, #16
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	bd80      	pop	{r7, pc}

08003b32 <LoRa_read>:
			LoRa*   LoRa        --> LoRa object handler
			uint8_t address     -->	address of the register e.g 0x1D

		returns     : register value
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_read(LoRa* _LoRa, uint8_t address){
 8003b32:	b580      	push	{r7, lr}
 8003b34:	b086      	sub	sp, #24
 8003b36:	af02      	add	r7, sp, #8
 8003b38:	6078      	str	r0, [r7, #4]
 8003b3a:	460b      	mov	r3, r1
 8003b3c:	70fb      	strb	r3, [r7, #3]
	uint8_t read_data;
	uint8_t data_addr;

	data_addr = address & 0x7F;
 8003b3e:	78fb      	ldrb	r3, [r7, #3]
 8003b40:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003b44:	b2db      	uxtb	r3, r3
 8003b46:	73bb      	strb	r3, [r7, #14]
	LoRa_readReg(_LoRa, &data_addr, 1, &read_data, 1);
 8003b48:	f107 030f 	add.w	r3, r7, #15
 8003b4c:	f107 010e 	add.w	r1, r7, #14
 8003b50:	2201      	movs	r2, #1
 8003b52:	9200      	str	r2, [sp, #0]
 8003b54:	2201      	movs	r2, #1
 8003b56:	6878      	ldr	r0, [r7, #4]
 8003b58:	f7ff fea3 	bl	80038a2 <LoRa_readReg>
	//HAL_Delay(5);

	return read_data;
 8003b5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b5e:	4618      	mov	r0, r3
 8003b60:	3710      	adds	r7, #16
 8003b62:	46bd      	mov	sp, r7
 8003b64:	bd80      	pop	{r7, pc}

08003b66 <LoRa_write>:
			uint8_t address     -->	address of the register e.g 0x1D
			uint8_t value       --> value that you want to write

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_write(LoRa* _LoRa, uint8_t address, uint8_t value){
 8003b66:	b580      	push	{r7, lr}
 8003b68:	b086      	sub	sp, #24
 8003b6a:	af02      	add	r7, sp, #8
 8003b6c:	6078      	str	r0, [r7, #4]
 8003b6e:	460b      	mov	r3, r1
 8003b70:	70fb      	strb	r3, [r7, #3]
 8003b72:	4613      	mov	r3, r2
 8003b74:	70bb      	strb	r3, [r7, #2]
	uint8_t data;
	uint8_t addr;

	addr = address | 0x80;
 8003b76:	78fb      	ldrb	r3, [r7, #3]
 8003b78:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003b7c:	b2db      	uxtb	r3, r3
 8003b7e:	73bb      	strb	r3, [r7, #14]
	data = value;
 8003b80:	78bb      	ldrb	r3, [r7, #2]
 8003b82:	73fb      	strb	r3, [r7, #15]
	LoRa_writeReg(_LoRa, &addr, 1, &data, 1);
 8003b84:	f107 030f 	add.w	r3, r7, #15
 8003b88:	f107 010e 	add.w	r1, r7, #14
 8003b8c:	2201      	movs	r2, #1
 8003b8e:	9200      	str	r2, [sp, #0]
 8003b90:	2201      	movs	r2, #1
 8003b92:	6878      	ldr	r0, [r7, #4]
 8003b94:	f7ff fec3 	bl	800391e <LoRa_writeReg>
	//HAL_Delay(5);
}
 8003b98:	bf00      	nop
 8003b9a:	3710      	adds	r7, #16
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	bd80      	pop	{r7, pc}

08003ba0 <LoRa_isvalid>:
		arguments   :
			LoRa* LoRa --> LoRa object handler

		returns     : returns 1 if all of the values were given, otherwise returns 0
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_isvalid(LoRa* _LoRa){
 8003ba0:	b480      	push	{r7}
 8003ba2:	b083      	sub	sp, #12
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]

	return 1;
 8003ba8:	2301      	movs	r3, #1
}
 8003baa:	4618      	mov	r0, r3
 8003bac:	370c      	adds	r7, #12
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	bc80      	pop	{r7}
 8003bb2:	4770      	bx	lr

08003bb4 <LoRa_startReceiving>:
		arguments   :
			LoRa*    LoRa     --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_startReceiving(LoRa* _LoRa){
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b082      	sub	sp, #8
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
	LoRa_gotoMode(_LoRa, RXCONTIN_MODE);
 8003bbc:	2105      	movs	r1, #5
 8003bbe:	6878      	ldr	r0, [r7, #4]
 8003bc0:	f7ff fe0e 	bl	80037e0 <LoRa_gotoMode>
}
 8003bc4:	bf00      	nop
 8003bc6:	3708      	adds	r7, #8
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	bd80      	pop	{r7, pc}

08003bcc <LoRa_receive>:
			uint8_t  data			--> A pointer to the array that you want to write bytes in it
			uint8_t	 length   --> Determines how many bytes you want to read

		returns     : The number of bytes received
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_receive(LoRa* _LoRa, uint8_t* data, uint8_t length){
 8003bcc:	b590      	push	{r4, r7, lr}
 8003bce:	b089      	sub	sp, #36	; 0x24
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	60f8      	str	r0, [r7, #12]
 8003bd4:	60b9      	str	r1, [r7, #8]
 8003bd6:	4613      	mov	r3, r2
 8003bd8:	71fb      	strb	r3, [r7, #7]
	uint8_t read;
	uint8_t number_of_bytes;
	uint8_t min = 0;
 8003bda:	2300      	movs	r3, #0
 8003bdc:	77fb      	strb	r3, [r7, #31]

	for(int i=0; i<length; i++)
 8003bde:	2300      	movs	r3, #0
 8003be0:	61bb      	str	r3, [r7, #24]
 8003be2:	e007      	b.n	8003bf4 <LoRa_receive+0x28>
		data[i]=0;
 8003be4:	69bb      	ldr	r3, [r7, #24]
 8003be6:	68ba      	ldr	r2, [r7, #8]
 8003be8:	4413      	add	r3, r2
 8003bea:	2200      	movs	r2, #0
 8003bec:	701a      	strb	r2, [r3, #0]
	for(int i=0; i<length; i++)
 8003bee:	69bb      	ldr	r3, [r7, #24]
 8003bf0:	3301      	adds	r3, #1
 8003bf2:	61bb      	str	r3, [r7, #24]
 8003bf4:	79fb      	ldrb	r3, [r7, #7]
 8003bf6:	69ba      	ldr	r2, [r7, #24]
 8003bf8:	429a      	cmp	r2, r3
 8003bfa:	dbf3      	blt.n	8003be4 <LoRa_receive+0x18>

	LoRa_gotoMode(_LoRa, STNBY_MODE);
 8003bfc:	2101      	movs	r1, #1
 8003bfe:	68f8      	ldr	r0, [r7, #12]
 8003c00:	f7ff fdee 	bl	80037e0 <LoRa_gotoMode>
	read = LoRa_read(_LoRa, RegIrqFlags);
 8003c04:	2112      	movs	r1, #18
 8003c06:	68f8      	ldr	r0, [r7, #12]
 8003c08:	f7ff ff93 	bl	8003b32 <LoRa_read>
 8003c0c:	4603      	mov	r3, r0
 8003c0e:	74fb      	strb	r3, [r7, #19]
	if((read & 0x40) != 0){
 8003c10:	7cfb      	ldrb	r3, [r7, #19]
 8003c12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d02f      	beq.n	8003c7a <LoRa_receive+0xae>
		LoRa_write(_LoRa, RegIrqFlags, 0xFF);
 8003c1a:	22ff      	movs	r2, #255	; 0xff
 8003c1c:	2112      	movs	r1, #18
 8003c1e:	68f8      	ldr	r0, [r7, #12]
 8003c20:	f7ff ffa1 	bl	8003b66 <LoRa_write>
		number_of_bytes = LoRa_read(_LoRa, RegRxNbBytes);
 8003c24:	2113      	movs	r1, #19
 8003c26:	68f8      	ldr	r0, [r7, #12]
 8003c28:	f7ff ff83 	bl	8003b32 <LoRa_read>
 8003c2c:	4603      	mov	r3, r0
 8003c2e:	74bb      	strb	r3, [r7, #18]
		read = LoRa_read(_LoRa, RegFiFoRxCurrentAddr);
 8003c30:	2110      	movs	r1, #16
 8003c32:	68f8      	ldr	r0, [r7, #12]
 8003c34:	f7ff ff7d 	bl	8003b32 <LoRa_read>
 8003c38:	4603      	mov	r3, r0
 8003c3a:	74fb      	strb	r3, [r7, #19]
		LoRa_write(_LoRa, RegFiFoAddPtr, read);
 8003c3c:	7cfb      	ldrb	r3, [r7, #19]
 8003c3e:	461a      	mov	r2, r3
 8003c40:	210d      	movs	r1, #13
 8003c42:	68f8      	ldr	r0, [r7, #12]
 8003c44:	f7ff ff8f 	bl	8003b66 <LoRa_write>
		min = length >= number_of_bytes ? number_of_bytes : length;
 8003c48:	7cba      	ldrb	r2, [r7, #18]
 8003c4a:	79fb      	ldrb	r3, [r7, #7]
 8003c4c:	4293      	cmp	r3, r2
 8003c4e:	bf28      	it	cs
 8003c50:	4613      	movcs	r3, r2
 8003c52:	77fb      	strb	r3, [r7, #31]
		for(int i=0; i<min; i++)
 8003c54:	2300      	movs	r3, #0
 8003c56:	617b      	str	r3, [r7, #20]
 8003c58:	e00b      	b.n	8003c72 <LoRa_receive+0xa6>
			data[i] = LoRa_read(_LoRa, RegFiFo);
 8003c5a:	697b      	ldr	r3, [r7, #20]
 8003c5c:	68ba      	ldr	r2, [r7, #8]
 8003c5e:	18d4      	adds	r4, r2, r3
 8003c60:	2100      	movs	r1, #0
 8003c62:	68f8      	ldr	r0, [r7, #12]
 8003c64:	f7ff ff65 	bl	8003b32 <LoRa_read>
 8003c68:	4603      	mov	r3, r0
 8003c6a:	7023      	strb	r3, [r4, #0]
		for(int i=0; i<min; i++)
 8003c6c:	697b      	ldr	r3, [r7, #20]
 8003c6e:	3301      	adds	r3, #1
 8003c70:	617b      	str	r3, [r7, #20]
 8003c72:	7ffb      	ldrb	r3, [r7, #31]
 8003c74:	697a      	ldr	r2, [r7, #20]
 8003c76:	429a      	cmp	r2, r3
 8003c78:	dbef      	blt.n	8003c5a <LoRa_receive+0x8e>
	}
	LoRa_gotoMode(_LoRa, RXCONTIN_MODE);
 8003c7a:	2105      	movs	r1, #5
 8003c7c:	68f8      	ldr	r0, [r7, #12]
 8003c7e:	f7ff fdaf 	bl	80037e0 <LoRa_gotoMode>
    return min;
 8003c82:	7ffb      	ldrb	r3, [r7, #31]
}
 8003c84:	4618      	mov	r0, r3
 8003c86:	3724      	adds	r7, #36	; 0x24
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	bd90      	pop	{r4, r7, pc}

08003c8c <LoRa_init>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
uint16_t LoRa_init(LoRa* _LoRa){
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	b084      	sub	sp, #16
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
	uint8_t    data;
	uint8_t    read;

	if(LoRa_isvalid(_LoRa)){
 8003c94:	6878      	ldr	r0, [r7, #4]
 8003c96:	f7ff ff83 	bl	8003ba0 <LoRa_isvalid>
 8003c9a:	4603      	mov	r3, r0
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	f000 8093 	beq.w	8003dc8 <LoRa_init+0x13c>
		// goto sleep mode:
			LoRa_gotoMode(_LoRa, SLEEP_MODE);
 8003ca2:	2100      	movs	r1, #0
 8003ca4:	6878      	ldr	r0, [r7, #4]
 8003ca6:	f7ff fd9b 	bl	80037e0 <LoRa_gotoMode>
			HAL_Delay(10);
 8003caa:	200a      	movs	r0, #10
 8003cac:	f7fd fec6 	bl	8001a3c <HAL_Delay>

		// turn on lora mode:
			read = LoRa_read(_LoRa, RegOpMode);
 8003cb0:	2101      	movs	r1, #1
 8003cb2:	6878      	ldr	r0, [r7, #4]
 8003cb4:	f7ff ff3d 	bl	8003b32 <LoRa_read>
 8003cb8:	4603      	mov	r3, r0
 8003cba:	73fb      	strb	r3, [r7, #15]
			HAL_Delay(10);
 8003cbc:	200a      	movs	r0, #10
 8003cbe:	f7fd febd 	bl	8001a3c <HAL_Delay>
			data = read | 0x80;
 8003cc2:	7bfb      	ldrb	r3, [r7, #15]
 8003cc4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003cc8:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegOpMode, data);
 8003cca:	7bbb      	ldrb	r3, [r7, #14]
 8003ccc:	461a      	mov	r2, r3
 8003cce:	2101      	movs	r1, #1
 8003cd0:	6878      	ldr	r0, [r7, #4]
 8003cd2:	f7ff ff48 	bl	8003b66 <LoRa_write>
			HAL_Delay(100);
 8003cd6:	2064      	movs	r0, #100	; 0x64
 8003cd8:	f7fd feb0 	bl	8001a3c <HAL_Delay>

		// set frequency:
			LoRa_setFrequency(_LoRa, _LoRa->frequency);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6a1b      	ldr	r3, [r3, #32]
 8003ce0:	4619      	mov	r1, r3
 8003ce2:	6878      	ldr	r0, [r7, #4]
 8003ce4:	f7ff fe59 	bl	800399a <LoRa_setFrequency>

		// set output power gain:
			LoRa_setPower(_LoRa, _LoRa->power);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8003cee:	4619      	mov	r1, r3
 8003cf0:	6878      	ldr	r0, [r7, #4]
 8003cf2:	f7ff feb1 	bl	8003a58 <LoRa_setPower>

		// set over current protection:
			LoRa_setOCP(_LoRa, _LoRa->overCurrentProtection);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8003cfc:	4619      	mov	r1, r3
 8003cfe:	6878      	ldr	r0, [r7, #4]
 8003d00:	f7ff febe 	bl	8003a80 <LoRa_setOCP>

		// set LNA gain:
			LoRa_write(_LoRa, RegLna, 0x23);
 8003d04:	2223      	movs	r2, #35	; 0x23
 8003d06:	210c      	movs	r1, #12
 8003d08:	6878      	ldr	r0, [r7, #4]
 8003d0a:	f7ff ff2c 	bl	8003b66 <LoRa_write>

		// set spreading factor, CRC on, and Timeout Msb:
			LoRa_setTOMsb_setCRCon(_LoRa);
 8003d0e:	6878      	ldr	r0, [r7, #4]
 8003d10:	f7ff fef4 	bl	8003afc <LoRa_setTOMsb_setCRCon>
			LoRa_setSpreadingFactor(_LoRa, _LoRa->spredingFactor);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003d1a:	4619      	mov	r1, r3
 8003d1c:	6878      	ldr	r0, [r7, #4]
 8003d1e:	f7ff fe6c 	bl	80039fa <LoRa_setSpreadingFactor>

		// set Timeout Lsb:
			LoRa_write(_LoRa, RegSymbTimeoutL, 0xFF);
 8003d22:	22ff      	movs	r2, #255	; 0xff
 8003d24:	211f      	movs	r1, #31
 8003d26:	6878      	ldr	r0, [r7, #4]
 8003d28:	f7ff ff1d 	bl	8003b66 <LoRa_write>

		// set bandwidth, coding rate and expilicit mode:
			// 8 bit RegModemConfig --> | X | X | X | X | X | X | X | X |
			//       bits represent --> |   bandwidth   |     CR    |I/E|
			data = 0;
 8003d2c:	2300      	movs	r3, #0
 8003d2e:	73bb      	strb	r3, [r7, #14]
			data = (_LoRa->bandWidth << 4) + (_LoRa->crcRate << 1);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003d36:	011b      	lsls	r3, r3, #4
 8003d38:	b2da      	uxtb	r2, r3
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8003d40:	005b      	lsls	r3, r3, #1
 8003d42:	b2db      	uxtb	r3, r3
 8003d44:	4413      	add	r3, r2
 8003d46:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegModemConfig1, data);
 8003d48:	7bbb      	ldrb	r3, [r7, #14]
 8003d4a:	461a      	mov	r2, r3
 8003d4c:	211d      	movs	r1, #29
 8003d4e:	6878      	ldr	r0, [r7, #4]
 8003d50:	f7ff ff09 	bl	8003b66 <LoRa_write>

		// set preamble:
			LoRa_write(_LoRa, RegPreambleMsb, _LoRa->preamble >> 8);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d58:	0a1b      	lsrs	r3, r3, #8
 8003d5a:	b29b      	uxth	r3, r3
 8003d5c:	b2db      	uxtb	r3, r3
 8003d5e:	461a      	mov	r2, r3
 8003d60:	2120      	movs	r1, #32
 8003d62:	6878      	ldr	r0, [r7, #4]
 8003d64:	f7ff feff 	bl	8003b66 <LoRa_write>
			LoRa_write(_LoRa, RegPreambleLsb, _LoRa->preamble >> 0);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d6c:	b2db      	uxtb	r3, r3
 8003d6e:	461a      	mov	r2, r3
 8003d70:	2121      	movs	r1, #33	; 0x21
 8003d72:	6878      	ldr	r0, [r7, #4]
 8003d74:	f7ff fef7 	bl	8003b66 <LoRa_write>

		// DIO mapping:   --> DIO: RxDone
			read = LoRa_read(_LoRa, RegDioMapping1);
 8003d78:	2140      	movs	r1, #64	; 0x40
 8003d7a:	6878      	ldr	r0, [r7, #4]
 8003d7c:	f7ff fed9 	bl	8003b32 <LoRa_read>
 8003d80:	4603      	mov	r3, r0
 8003d82:	73fb      	strb	r3, [r7, #15]
			data = read | 0x3F;
 8003d84:	7bfb      	ldrb	r3, [r7, #15]
 8003d86:	f043 033f 	orr.w	r3, r3, #63	; 0x3f
 8003d8a:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegDioMapping1, data);
 8003d8c:	7bbb      	ldrb	r3, [r7, #14]
 8003d8e:	461a      	mov	r2, r3
 8003d90:	2140      	movs	r1, #64	; 0x40
 8003d92:	6878      	ldr	r0, [r7, #4]
 8003d94:	f7ff fee7 	bl	8003b66 <LoRa_write>

		// goto standby mode:
			LoRa_gotoMode(_LoRa, STNBY_MODE);
 8003d98:	2101      	movs	r1, #1
 8003d9a:	6878      	ldr	r0, [r7, #4]
 8003d9c:	f7ff fd20 	bl	80037e0 <LoRa_gotoMode>
			_LoRa->current_mode = STNBY_MODE;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2201      	movs	r2, #1
 8003da4:	61da      	str	r2, [r3, #28]
			HAL_Delay(10);
 8003da6:	200a      	movs	r0, #10
 8003da8:	f7fd fe48 	bl	8001a3c <HAL_Delay>

			read = LoRa_read(_LoRa, RegVersion);
 8003dac:	2142      	movs	r1, #66	; 0x42
 8003dae:	6878      	ldr	r0, [r7, #4]
 8003db0:	f7ff febf 	bl	8003b32 <LoRa_read>
 8003db4:	4603      	mov	r3, r0
 8003db6:	73fb      	strb	r3, [r7, #15]
			if(read == 0x12)
 8003db8:	7bfb      	ldrb	r3, [r7, #15]
 8003dba:	2b12      	cmp	r3, #18
 8003dbc:	d101      	bne.n	8003dc2 <LoRa_init+0x136>
				return LORA_OK;
 8003dbe:	23c8      	movs	r3, #200	; 0xc8
 8003dc0:	e004      	b.n	8003dcc <LoRa_init+0x140>
			else
				return LORA_NOT_FOUND;
 8003dc2:	f44f 73ca 	mov.w	r3, #404	; 0x194
 8003dc6:	e001      	b.n	8003dcc <LoRa_init+0x140>
	}
	else {
		return LORA_UNAVAILABLE;
 8003dc8:	f240 13f7 	movw	r3, #503	; 0x1f7
	}
}
 8003dcc:	4618      	mov	r0, r3
 8003dce:	3710      	adds	r7, #16
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	bd80      	pop	{r7, pc}

08003dd4 <ST7735_SPI_Trans>:
//*********************** Marco for HAL LIB ***************************************************///
#ifdef USE_HAL_LIB
extern SPI_HandleTypeDef ST7735_SPI_PORT;
/****************** Low Level Functions **********************************************************************/
void ST7735_SPI_Trans(uint8_t *buff, uint16_t buff_size)
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	b082      	sub	sp, #8
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
 8003ddc:	460b      	mov	r3, r1
 8003dde:	807b      	strh	r3, [r7, #2]
	HAL_SPI_Transmit(&ST7735_SPI_PORT, buff, buff_size, HAL_MAX_DELAY);
 8003de0:	887a      	ldrh	r2, [r7, #2]
 8003de2:	f04f 33ff 	mov.w	r3, #4294967295
 8003de6:	6879      	ldr	r1, [r7, #4]
 8003de8:	4803      	ldr	r0, [pc, #12]	; (8003df8 <ST7735_SPI_Trans+0x24>)
 8003dea:	f7fe fdab 	bl	8002944 <HAL_SPI_Transmit>
}
 8003dee:	bf00      	nop
 8003df0:	3708      	adds	r7, #8
 8003df2:	46bd      	mov	sp, r7
 8003df4:	bd80      	pop	{r7, pc}
 8003df6:	bf00      	nop
 8003df8:	2000025c 	.word	0x2000025c

08003dfc <delay_ms>:
void delay_ms(uint32_t time_delay)
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b082      	sub	sp, #8
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
	HAL_Delay(time_delay);
 8003e04:	6878      	ldr	r0, [r7, #4]
 8003e06:	f7fd fe19 	bl	8001a3c <HAL_Delay>
}
 8003e0a:	bf00      	nop
 8003e0c:	3708      	adds	r7, #8
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	bd80      	pop	{r7, pc}
	...

08003e14 <ST7735_Reset>:
#endif
/************************************ Middle Level Functions ************************************************/
void ST7735_Reset()
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	af00      	add	r7, sp, #0
    ST7735_RESET_ON();
 8003e18:	2200      	movs	r2, #0
 8003e1a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003e1e:	4807      	ldr	r0, [pc, #28]	; (8003e3c <ST7735_Reset+0x28>)
 8003e20:	f7fe f8c2 	bl	8001fa8 <HAL_GPIO_WritePin>
    delay_ms(5);
 8003e24:	2005      	movs	r0, #5
 8003e26:	f7ff ffe9 	bl	8003dfc <delay_ms>
    ST7735_RESET_OFF();
 8003e2a:	2201      	movs	r2, #1
 8003e2c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003e30:	4802      	ldr	r0, [pc, #8]	; (8003e3c <ST7735_Reset+0x28>)
 8003e32:	f7fe f8b9 	bl	8001fa8 <HAL_GPIO_WritePin>
}
 8003e36:	bf00      	nop
 8003e38:	bd80      	pop	{r7, pc}
 8003e3a:	bf00      	nop
 8003e3c:	40010800 	.word	0x40010800

08003e40 <ST7735_WriteCommand>:
void ST7735_WriteCommand(uint8_t cmd)
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b082      	sub	sp, #8
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	4603      	mov	r3, r0
 8003e48:	71fb      	strb	r3, [r7, #7]
    ST7735_CMD();
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003e50:	4805      	ldr	r0, [pc, #20]	; (8003e68 <ST7735_WriteCommand+0x28>)
 8003e52:	f7fe f8a9 	bl	8001fa8 <HAL_GPIO_WritePin>
		ST7735_SPI_Trans(&cmd, sizeof(cmd));
 8003e56:	1dfb      	adds	r3, r7, #7
 8003e58:	2101      	movs	r1, #1
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	f7ff ffba 	bl	8003dd4 <ST7735_SPI_Trans>
}
 8003e60:	bf00      	nop
 8003e62:	3708      	adds	r7, #8
 8003e64:	46bd      	mov	sp, r7
 8003e66:	bd80      	pop	{r7, pc}
 8003e68:	40010800 	.word	0x40010800

08003e6c <ST7735_WriteData>:
void ST7735_WriteData(uint8_t* buff, size_t buff_size)
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	b082      	sub	sp, #8
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
 8003e74:	6039      	str	r1, [r7, #0]
    ST7735_DATA();
 8003e76:	2201      	movs	r2, #1
 8003e78:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003e7c:	4806      	ldr	r0, [pc, #24]	; (8003e98 <ST7735_WriteData+0x2c>)
 8003e7e:	f7fe f893 	bl	8001fa8 <HAL_GPIO_WritePin>
    ST7735_SPI_Trans(buff, buff_size);
 8003e82:	683b      	ldr	r3, [r7, #0]
 8003e84:	b29b      	uxth	r3, r3
 8003e86:	4619      	mov	r1, r3
 8003e88:	6878      	ldr	r0, [r7, #4]
 8003e8a:	f7ff ffa3 	bl	8003dd4 <ST7735_SPI_Trans>
}
 8003e8e:	bf00      	nop
 8003e90:	3708      	adds	r7, #8
 8003e92:	46bd      	mov	sp, r7
 8003e94:	bd80      	pop	{r7, pc}
 8003e96:	bf00      	nop
 8003e98:	40010800 	.word	0x40010800

08003e9c <ST7735_ExecuteCommandList>:
		data8[1] = data &0xFF;
    ST7735_SPI_Trans(data8, sizeof(data8));
}

void ST7735_ExecuteCommandList(const uint8_t *addr)
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b084      	sub	sp, #16
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
    uint8_t numCommands, numArgs;
    uint16_t ms;
    numCommands = *addr++;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	1c5a      	adds	r2, r3, #1
 8003ea8:	607a      	str	r2, [r7, #4]
 8003eaa:	781b      	ldrb	r3, [r3, #0]
 8003eac:	73fb      	strb	r3, [r7, #15]
    while(numCommands--) {
 8003eae:	e034      	b.n	8003f1a <ST7735_ExecuteCommandList+0x7e>
        uint8_t cmd = *addr++;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	1c5a      	adds	r2, r3, #1
 8003eb4:	607a      	str	r2, [r7, #4]
 8003eb6:	781b      	ldrb	r3, [r3, #0]
 8003eb8:	72fb      	strb	r3, [r7, #11]
        ST7735_WriteCommand(cmd);
 8003eba:	7afb      	ldrb	r3, [r7, #11]
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	f7ff ffbf 	bl	8003e40 <ST7735_WriteCommand>
        numArgs = *addr++;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	1c5a      	adds	r2, r3, #1
 8003ec6:	607a      	str	r2, [r7, #4]
 8003ec8:	781b      	ldrb	r3, [r3, #0]
 8003eca:	72bb      	strb	r3, [r7, #10]
        // If high bit set, delay follows args
        ms = numArgs & DELAY;
 8003ecc:	7abb      	ldrb	r3, [r7, #10]
 8003ece:	b29b      	uxth	r3, r3
 8003ed0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ed4:	81bb      	strh	r3, [r7, #12]
        numArgs &= ~DELAY;
 8003ed6:	7abb      	ldrb	r3, [r7, #10]
 8003ed8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003edc:	72bb      	strb	r3, [r7, #10]
        if(numArgs) {
 8003ede:	7abb      	ldrb	r3, [r7, #10]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d008      	beq.n	8003ef6 <ST7735_ExecuteCommandList+0x5a>
            ST7735_WriteData((uint8_t*)addr, numArgs);
 8003ee4:	7abb      	ldrb	r3, [r7, #10]
 8003ee6:	4619      	mov	r1, r3
 8003ee8:	6878      	ldr	r0, [r7, #4]
 8003eea:	f7ff ffbf 	bl	8003e6c <ST7735_WriteData>
            addr += numArgs;
 8003eee:	7abb      	ldrb	r3, [r7, #10]
 8003ef0:	687a      	ldr	r2, [r7, #4]
 8003ef2:	4413      	add	r3, r2
 8003ef4:	607b      	str	r3, [r7, #4]
        }
        if(ms) {
 8003ef6:	89bb      	ldrh	r3, [r7, #12]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d00e      	beq.n	8003f1a <ST7735_ExecuteCommandList+0x7e>
            ms = *addr++;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	1c5a      	adds	r2, r3, #1
 8003f00:	607a      	str	r2, [r7, #4]
 8003f02:	781b      	ldrb	r3, [r3, #0]
 8003f04:	81bb      	strh	r3, [r7, #12]
            if(ms == 255) ms = 500;
 8003f06:	89bb      	ldrh	r3, [r7, #12]
 8003f08:	2bff      	cmp	r3, #255	; 0xff
 8003f0a:	d102      	bne.n	8003f12 <ST7735_ExecuteCommandList+0x76>
 8003f0c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8003f10:	81bb      	strh	r3, [r7, #12]
            delay_ms(ms);
 8003f12:	89bb      	ldrh	r3, [r7, #12]
 8003f14:	4618      	mov	r0, r3
 8003f16:	f7ff ff71 	bl	8003dfc <delay_ms>
    while(numCommands--) {
 8003f1a:	7bfb      	ldrb	r3, [r7, #15]
 8003f1c:	1e5a      	subs	r2, r3, #1
 8003f1e:	73fa      	strb	r2, [r7, #15]
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d1c5      	bne.n	8003eb0 <ST7735_ExecuteCommandList+0x14>
        }
    }
}
 8003f24:	bf00      	nop
 8003f26:	bf00      	nop
 8003f28:	3710      	adds	r7, #16
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	bd80      	pop	{r7, pc}

08003f2e <ST7735_SetAddressWindow>:
void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1) {
 8003f2e:	b590      	push	{r4, r7, lr}
 8003f30:	b085      	sub	sp, #20
 8003f32:	af00      	add	r7, sp, #0
 8003f34:	4604      	mov	r4, r0
 8003f36:	4608      	mov	r0, r1
 8003f38:	4611      	mov	r1, r2
 8003f3a:	461a      	mov	r2, r3
 8003f3c:	4623      	mov	r3, r4
 8003f3e:	71fb      	strb	r3, [r7, #7]
 8003f40:	4603      	mov	r3, r0
 8003f42:	71bb      	strb	r3, [r7, #6]
 8003f44:	460b      	mov	r3, r1
 8003f46:	717b      	strb	r3, [r7, #5]
 8003f48:	4613      	mov	r3, r2
 8003f4a:	713b      	strb	r3, [r7, #4]
    // column address set
    ST7735_WriteCommand(ST7735_CASET);
 8003f4c:	202a      	movs	r0, #42	; 0x2a
 8003f4e:	f7ff ff77 	bl	8003e40 <ST7735_WriteCommand>
    uint8_t data[] = { 0x00, x0 + ST7735_XSTART, 0x00, x1 + ST7735_XSTART };
 8003f52:	2300      	movs	r3, #0
 8003f54:	733b      	strb	r3, [r7, #12]
 8003f56:	79fb      	ldrb	r3, [r7, #7]
 8003f58:	3301      	adds	r3, #1
 8003f5a:	b2db      	uxtb	r3, r3
 8003f5c:	737b      	strb	r3, [r7, #13]
 8003f5e:	2300      	movs	r3, #0
 8003f60:	73bb      	strb	r3, [r7, #14]
 8003f62:	797b      	ldrb	r3, [r7, #5]
 8003f64:	3301      	adds	r3, #1
 8003f66:	b2db      	uxtb	r3, r3
 8003f68:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 8003f6a:	f107 030c 	add.w	r3, r7, #12
 8003f6e:	2104      	movs	r1, #4
 8003f70:	4618      	mov	r0, r3
 8003f72:	f7ff ff7b 	bl	8003e6c <ST7735_WriteData>

    // row address set
    ST7735_WriteCommand(ST7735_RASET);
 8003f76:	202b      	movs	r0, #43	; 0x2b
 8003f78:	f7ff ff62 	bl	8003e40 <ST7735_WriteCommand>
    data[1] = y0 + ST7735_YSTART;
 8003f7c:	79bb      	ldrb	r3, [r7, #6]
 8003f7e:	3302      	adds	r3, #2
 8003f80:	b2db      	uxtb	r3, r3
 8003f82:	737b      	strb	r3, [r7, #13]
    data[3] = y1 + ST7735_YSTART;
 8003f84:	793b      	ldrb	r3, [r7, #4]
 8003f86:	3302      	adds	r3, #2
 8003f88:	b2db      	uxtb	r3, r3
 8003f8a:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 8003f8c:	f107 030c 	add.w	r3, r7, #12
 8003f90:	2104      	movs	r1, #4
 8003f92:	4618      	mov	r0, r3
 8003f94:	f7ff ff6a 	bl	8003e6c <ST7735_WriteData>
    // write to RAM
    ST7735_WriteCommand(ST7735_RAMWR);
 8003f98:	202c      	movs	r0, #44	; 0x2c
 8003f9a:	f7ff ff51 	bl	8003e40 <ST7735_WriteCommand>
}
 8003f9e:	bf00      	nop
 8003fa0:	3714      	adds	r7, #20
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	bd90      	pop	{r4, r7, pc}

08003fa6 <ST7735_WriteChar>:
    uint8_t data[] = { color >> 8, color & 0xFF };
    ST7735_WriteData(data, sizeof(data));
    ST7735_Unselect();
}

static void ST7735_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor) {
 8003fa6:	b082      	sub	sp, #8
 8003fa8:	b590      	push	{r4, r7, lr}
 8003faa:	b089      	sub	sp, #36	; 0x24
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	637b      	str	r3, [r7, #52]	; 0x34
 8003fb0:	4603      	mov	r3, r0
 8003fb2:	80fb      	strh	r3, [r7, #6]
 8003fb4:	460b      	mov	r3, r1
 8003fb6:	80bb      	strh	r3, [r7, #4]
 8003fb8:	4613      	mov	r3, r2
 8003fba:	70fb      	strb	r3, [r7, #3]
    uint32_t i, b, j;
    ST7735_SetAddressWindow(x, y, x+font.width-1, y+font.height-1);
 8003fbc:	88fb      	ldrh	r3, [r7, #6]
 8003fbe:	b2d8      	uxtb	r0, r3
 8003fc0:	88bb      	ldrh	r3, [r7, #4]
 8003fc2:	b2d9      	uxtb	r1, r3
 8003fc4:	88fb      	ldrh	r3, [r7, #6]
 8003fc6:	b2da      	uxtb	r2, r3
 8003fc8:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8003fcc:	4413      	add	r3, r2
 8003fce:	b2db      	uxtb	r3, r3
 8003fd0:	3b01      	subs	r3, #1
 8003fd2:	b2dc      	uxtb	r4, r3
 8003fd4:	88bb      	ldrh	r3, [r7, #4]
 8003fd6:	b2da      	uxtb	r2, r3
 8003fd8:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8003fdc:	4413      	add	r3, r2
 8003fde:	b2db      	uxtb	r3, r3
 8003fe0:	3b01      	subs	r3, #1
 8003fe2:	b2db      	uxtb	r3, r3
 8003fe4:	4622      	mov	r2, r4
 8003fe6:	f7ff ffa2 	bl	8003f2e <ST7735_SetAddressWindow>
    for(i = 0; i < font.height; i++) {
 8003fea:	2300      	movs	r3, #0
 8003fec:	61fb      	str	r3, [r7, #28]
 8003fee:	e043      	b.n	8004078 <ST7735_WriteChar+0xd2>
        b = font.data[(ch - 32) * font.height + i];
 8003ff0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003ff2:	78fb      	ldrb	r3, [r7, #3]
 8003ff4:	3b20      	subs	r3, #32
 8003ff6:	f897 1035 	ldrb.w	r1, [r7, #53]	; 0x35
 8003ffa:	fb01 f303 	mul.w	r3, r1, r3
 8003ffe:	4619      	mov	r1, r3
 8004000:	69fb      	ldr	r3, [r7, #28]
 8004002:	440b      	add	r3, r1
 8004004:	005b      	lsls	r3, r3, #1
 8004006:	4413      	add	r3, r2
 8004008:	881b      	ldrh	r3, [r3, #0]
 800400a:	617b      	str	r3, [r7, #20]
        for(j = 0; j < font.width; j++) {
 800400c:	2300      	movs	r3, #0
 800400e:	61bb      	str	r3, [r7, #24]
 8004010:	e029      	b.n	8004066 <ST7735_WriteChar+0xc0>
            if((b << j) & 0x8000)  {
 8004012:	697a      	ldr	r2, [r7, #20]
 8004014:	69bb      	ldr	r3, [r7, #24]
 8004016:	fa02 f303 	lsl.w	r3, r2, r3
 800401a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800401e:	2b00      	cmp	r3, #0
 8004020:	d00e      	beq.n	8004040 <ST7735_WriteChar+0x9a>
                uint8_t data[] = { color >> 8, color & 0xFF };
 8004022:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8004024:	0a1b      	lsrs	r3, r3, #8
 8004026:	b29b      	uxth	r3, r3
 8004028:	b2db      	uxtb	r3, r3
 800402a:	743b      	strb	r3, [r7, #16]
 800402c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800402e:	b2db      	uxtb	r3, r3
 8004030:	747b      	strb	r3, [r7, #17]
                ST7735_WriteData(data, sizeof(data));
 8004032:	f107 0310 	add.w	r3, r7, #16
 8004036:	2102      	movs	r1, #2
 8004038:	4618      	mov	r0, r3
 800403a:	f7ff ff17 	bl	8003e6c <ST7735_WriteData>
 800403e:	e00f      	b.n	8004060 <ST7735_WriteChar+0xba>
            } else {
                uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 8004040:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004044:	0a1b      	lsrs	r3, r3, #8
 8004046:	b29b      	uxth	r3, r3
 8004048:	b2db      	uxtb	r3, r3
 800404a:	733b      	strb	r3, [r7, #12]
 800404c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004050:	b2db      	uxtb	r3, r3
 8004052:	737b      	strb	r3, [r7, #13]
                ST7735_WriteData(data, sizeof(data));
 8004054:	f107 030c 	add.w	r3, r7, #12
 8004058:	2102      	movs	r1, #2
 800405a:	4618      	mov	r0, r3
 800405c:	f7ff ff06 	bl	8003e6c <ST7735_WriteData>
        for(j = 0; j < font.width; j++) {
 8004060:	69bb      	ldr	r3, [r7, #24]
 8004062:	3301      	adds	r3, #1
 8004064:	61bb      	str	r3, [r7, #24]
 8004066:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800406a:	461a      	mov	r2, r3
 800406c:	69bb      	ldr	r3, [r7, #24]
 800406e:	4293      	cmp	r3, r2
 8004070:	d3cf      	bcc.n	8004012 <ST7735_WriteChar+0x6c>
    for(i = 0; i < font.height; i++) {
 8004072:	69fb      	ldr	r3, [r7, #28]
 8004074:	3301      	adds	r3, #1
 8004076:	61fb      	str	r3, [r7, #28]
 8004078:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800407c:	461a      	mov	r2, r3
 800407e:	69fb      	ldr	r3, [r7, #28]
 8004080:	4293      	cmp	r3, r2
 8004082:	d3b5      	bcc.n	8003ff0 <ST7735_WriteChar+0x4a>
            }
        }
    }
}
 8004084:	bf00      	nop
 8004086:	bf00      	nop
 8004088:	3724      	adds	r7, #36	; 0x24
 800408a:	46bd      	mov	sp, r7
 800408c:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8004090:	b002      	add	sp, #8
 8004092:	4770      	bx	lr

08004094 <ST7735_WriteString>:
void ST7735_WriteString(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor) {
 8004094:	b082      	sub	sp, #8
 8004096:	b580      	push	{r7, lr}
 8004098:	b086      	sub	sp, #24
 800409a:	af04      	add	r7, sp, #16
 800409c:	603a      	str	r2, [r7, #0]
 800409e:	617b      	str	r3, [r7, #20]
 80040a0:	4603      	mov	r3, r0
 80040a2:	80fb      	strh	r3, [r7, #6]
 80040a4:	460b      	mov	r3, r1
 80040a6:	80bb      	strh	r3, [r7, #4]
    ST7735_Select();
 80040a8:	2200      	movs	r2, #0
 80040aa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80040ae:	4822      	ldr	r0, [pc, #136]	; (8004138 <ST7735_WriteString+0xa4>)
 80040b0:	f7fd ff7a 	bl	8001fa8 <HAL_GPIO_WritePin>
    while(*str) {
 80040b4:	e02d      	b.n	8004112 <ST7735_WriteString+0x7e>
        if(x + font.width >= ST7735_WIDTH) {
 80040b6:	88fb      	ldrh	r3, [r7, #6]
 80040b8:	7d3a      	ldrb	r2, [r7, #20]
 80040ba:	4413      	add	r3, r2
 80040bc:	2b9f      	cmp	r3, #159	; 0x9f
 80040be:	dd13      	ble.n	80040e8 <ST7735_WriteString+0x54>
            x = 0;
 80040c0:	2300      	movs	r3, #0
 80040c2:	80fb      	strh	r3, [r7, #6]
            y += font.height;
 80040c4:	7d7b      	ldrb	r3, [r7, #21]
 80040c6:	b29a      	uxth	r2, r3
 80040c8:	88bb      	ldrh	r3, [r7, #4]
 80040ca:	4413      	add	r3, r2
 80040cc:	80bb      	strh	r3, [r7, #4]
            if(y + font.height >= ST7735_HEIGHT) {
 80040ce:	88bb      	ldrh	r3, [r7, #4]
 80040d0:	7d7a      	ldrb	r2, [r7, #21]
 80040d2:	4413      	add	r3, r2
 80040d4:	2b7f      	cmp	r3, #127	; 0x7f
 80040d6:	dc21      	bgt.n	800411c <ST7735_WriteString+0x88>
                break;
            }
            if(*str == ' ') {
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	781b      	ldrb	r3, [r3, #0]
 80040dc:	2b20      	cmp	r3, #32
 80040de:	d103      	bne.n	80040e8 <ST7735_WriteString+0x54>
                // skip spaces in the beginning of the new line
                str++;
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	3301      	adds	r3, #1
 80040e4:	603b      	str	r3, [r7, #0]
                continue;
 80040e6:	e014      	b.n	8004112 <ST7735_WriteString+0x7e>
            }
        }
        ST7735_WriteChar(x, y, *str, font, color, bgcolor);
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	781a      	ldrb	r2, [r3, #0]
 80040ec:	88b9      	ldrh	r1, [r7, #4]
 80040ee:	88f8      	ldrh	r0, [r7, #6]
 80040f0:	8c3b      	ldrh	r3, [r7, #32]
 80040f2:	9302      	str	r3, [sp, #8]
 80040f4:	8bbb      	ldrh	r3, [r7, #28]
 80040f6:	9301      	str	r3, [sp, #4]
 80040f8:	69bb      	ldr	r3, [r7, #24]
 80040fa:	9300      	str	r3, [sp, #0]
 80040fc:	697b      	ldr	r3, [r7, #20]
 80040fe:	f7ff ff52 	bl	8003fa6 <ST7735_WriteChar>
        x += font.width;
 8004102:	7d3b      	ldrb	r3, [r7, #20]
 8004104:	b29a      	uxth	r2, r3
 8004106:	88fb      	ldrh	r3, [r7, #6]
 8004108:	4413      	add	r3, r2
 800410a:	80fb      	strh	r3, [r7, #6]
        str++;
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	3301      	adds	r3, #1
 8004110:	603b      	str	r3, [r7, #0]
    while(*str) {
 8004112:	683b      	ldr	r3, [r7, #0]
 8004114:	781b      	ldrb	r3, [r3, #0]
 8004116:	2b00      	cmp	r3, #0
 8004118:	d1cd      	bne.n	80040b6 <ST7735_WriteString+0x22>
 800411a:	e000      	b.n	800411e <ST7735_WriteString+0x8a>
                break;
 800411c:	bf00      	nop
    }
    ST7735_Unselect();
 800411e:	2201      	movs	r2, #1
 8004120:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004124:	4804      	ldr	r0, [pc, #16]	; (8004138 <ST7735_WriteString+0xa4>)
 8004126:	f7fd ff3f 	bl	8001fa8 <HAL_GPIO_WritePin>
}
 800412a:	bf00      	nop
 800412c:	3708      	adds	r7, #8
 800412e:	46bd      	mov	sp, r7
 8004130:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004134:	b002      	add	sp, #8
 8004136:	4770      	bx	lr
 8004138:	40010800 	.word	0x40010800

0800413c <ST7735_FillRectangle>:
void ST7735_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 800413c:	b590      	push	{r4, r7, lr}
 800413e:	b085      	sub	sp, #20
 8004140:	af00      	add	r7, sp, #0
 8004142:	4604      	mov	r4, r0
 8004144:	4608      	mov	r0, r1
 8004146:	4611      	mov	r1, r2
 8004148:	461a      	mov	r2, r3
 800414a:	4623      	mov	r3, r4
 800414c:	80fb      	strh	r3, [r7, #6]
 800414e:	4603      	mov	r3, r0
 8004150:	80bb      	strh	r3, [r7, #4]
 8004152:	460b      	mov	r3, r1
 8004154:	807b      	strh	r3, [r7, #2]
 8004156:	4613      	mov	r3, r2
 8004158:	803b      	strh	r3, [r7, #0]
    // clipping
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 800415a:	88fb      	ldrh	r3, [r7, #6]
 800415c:	2b9f      	cmp	r3, #159	; 0x9f
 800415e:	d858      	bhi.n	8004212 <ST7735_FillRectangle+0xd6>
 8004160:	88bb      	ldrh	r3, [r7, #4]
 8004162:	2b7f      	cmp	r3, #127	; 0x7f
 8004164:	d855      	bhi.n	8004212 <ST7735_FillRectangle+0xd6>
    if((x + w - 1) >= ST7735_WIDTH) w = ST7735_WIDTH - x;
 8004166:	88fa      	ldrh	r2, [r7, #6]
 8004168:	887b      	ldrh	r3, [r7, #2]
 800416a:	4413      	add	r3, r2
 800416c:	2ba0      	cmp	r3, #160	; 0xa0
 800416e:	dd03      	ble.n	8004178 <ST7735_FillRectangle+0x3c>
 8004170:	88fb      	ldrh	r3, [r7, #6]
 8004172:	f1c3 03a0 	rsb	r3, r3, #160	; 0xa0
 8004176:	807b      	strh	r3, [r7, #2]
    if((y + h - 1) >= ST7735_HEIGHT) h = ST7735_HEIGHT - y;
 8004178:	88ba      	ldrh	r2, [r7, #4]
 800417a:	883b      	ldrh	r3, [r7, #0]
 800417c:	4413      	add	r3, r2
 800417e:	2b80      	cmp	r3, #128	; 0x80
 8004180:	dd03      	ble.n	800418a <ST7735_FillRectangle+0x4e>
 8004182:	88bb      	ldrh	r3, [r7, #4]
 8004184:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8004188:	803b      	strh	r3, [r7, #0]

    ST7735_Select();
 800418a:	2200      	movs	r2, #0
 800418c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004190:	4822      	ldr	r0, [pc, #136]	; (800421c <ST7735_FillRectangle+0xe0>)
 8004192:	f7fd ff09 	bl	8001fa8 <HAL_GPIO_WritePin>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 8004196:	88fb      	ldrh	r3, [r7, #6]
 8004198:	b2d8      	uxtb	r0, r3
 800419a:	88bb      	ldrh	r3, [r7, #4]
 800419c:	b2d9      	uxtb	r1, r3
 800419e:	88fb      	ldrh	r3, [r7, #6]
 80041a0:	b2da      	uxtb	r2, r3
 80041a2:	887b      	ldrh	r3, [r7, #2]
 80041a4:	b2db      	uxtb	r3, r3
 80041a6:	4413      	add	r3, r2
 80041a8:	b2db      	uxtb	r3, r3
 80041aa:	3b01      	subs	r3, #1
 80041ac:	b2dc      	uxtb	r4, r3
 80041ae:	88bb      	ldrh	r3, [r7, #4]
 80041b0:	b2da      	uxtb	r2, r3
 80041b2:	883b      	ldrh	r3, [r7, #0]
 80041b4:	b2db      	uxtb	r3, r3
 80041b6:	4413      	add	r3, r2
 80041b8:	b2db      	uxtb	r3, r3
 80041ba:	3b01      	subs	r3, #1
 80041bc:	b2db      	uxtb	r3, r3
 80041be:	4622      	mov	r2, r4
 80041c0:	f7ff feb5 	bl	8003f2e <ST7735_SetAddressWindow>

    uint8_t data[] = { color >> 8, color & 0xFF };
 80041c4:	8c3b      	ldrh	r3, [r7, #32]
 80041c6:	0a1b      	lsrs	r3, r3, #8
 80041c8:	b29b      	uxth	r3, r3
 80041ca:	b2db      	uxtb	r3, r3
 80041cc:	733b      	strb	r3, [r7, #12]
 80041ce:	8c3b      	ldrh	r3, [r7, #32]
 80041d0:	b2db      	uxtb	r3, r3
 80041d2:	737b      	strb	r3, [r7, #13]
    for(y = h; y > 0; y--) {
 80041d4:	883b      	ldrh	r3, [r7, #0]
 80041d6:	80bb      	strh	r3, [r7, #4]
 80041d8:	e011      	b.n	80041fe <ST7735_FillRectangle+0xc2>
        for(x = w; x > 0; x--) {
 80041da:	887b      	ldrh	r3, [r7, #2]
 80041dc:	80fb      	strh	r3, [r7, #6]
 80041de:	e008      	b.n	80041f2 <ST7735_FillRectangle+0xb6>
            ST7735_WriteData(data, sizeof(data));
 80041e0:	f107 030c 	add.w	r3, r7, #12
 80041e4:	2102      	movs	r1, #2
 80041e6:	4618      	mov	r0, r3
 80041e8:	f7ff fe40 	bl	8003e6c <ST7735_WriteData>
        for(x = w; x > 0; x--) {
 80041ec:	88fb      	ldrh	r3, [r7, #6]
 80041ee:	3b01      	subs	r3, #1
 80041f0:	80fb      	strh	r3, [r7, #6]
 80041f2:	88fb      	ldrh	r3, [r7, #6]
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d1f3      	bne.n	80041e0 <ST7735_FillRectangle+0xa4>
    for(y = h; y > 0; y--) {
 80041f8:	88bb      	ldrh	r3, [r7, #4]
 80041fa:	3b01      	subs	r3, #1
 80041fc:	80bb      	strh	r3, [r7, #4]
 80041fe:	88bb      	ldrh	r3, [r7, #4]
 8004200:	2b00      	cmp	r3, #0
 8004202:	d1ea      	bne.n	80041da <ST7735_FillRectangle+0x9e>
        }
    }
    ST7735_Unselect();
 8004204:	2201      	movs	r2, #1
 8004206:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800420a:	4804      	ldr	r0, [pc, #16]	; (800421c <ST7735_FillRectangle+0xe0>)
 800420c:	f7fd fecc 	bl	8001fa8 <HAL_GPIO_WritePin>
 8004210:	e000      	b.n	8004214 <ST7735_FillRectangle+0xd8>
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 8004212:	bf00      	nop
}
 8004214:	3714      	adds	r7, #20
 8004216:	46bd      	mov	sp, r7
 8004218:	bd90      	pop	{r4, r7, pc}
 800421a:	bf00      	nop
 800421c:	40010800 	.word	0x40010800

08004220 <ST7735_FillScreen>:
void ST7735_FillScreen(uint16_t color) {
 8004220:	b580      	push	{r7, lr}
 8004222:	b084      	sub	sp, #16
 8004224:	af02      	add	r7, sp, #8
 8004226:	4603      	mov	r3, r0
 8004228:	80fb      	strh	r3, [r7, #6]
    ST7735_FillRectangle(0, 0, ST7735_WIDTH, ST7735_HEIGHT, color);
 800422a:	88fb      	ldrh	r3, [r7, #6]
 800422c:	9300      	str	r3, [sp, #0]
 800422e:	2380      	movs	r3, #128	; 0x80
 8004230:	22a0      	movs	r2, #160	; 0xa0
 8004232:	2100      	movs	r1, #0
 8004234:	2000      	movs	r0, #0
 8004236:	f7ff ff81 	bl	800413c <ST7735_FillRectangle>
}
 800423a:	bf00      	nop
 800423c:	3708      	adds	r7, #8
 800423e:	46bd      	mov	sp, r7
 8004240:	bd80      	pop	{r7, pc}
	...

08004244 <ST7735_Init>:
	drawHline(xStart, yStart, Width , Color);
	drawHline(xStart, yStart + Height - 1, Width , Color);

}
void ST7735_Init()
{
 8004244:	b580      	push	{r7, lr}
 8004246:	af00      	add	r7, sp, #0
    ST7735_Select();
 8004248:	2200      	movs	r2, #0
 800424a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800424e:	480b      	ldr	r0, [pc, #44]	; (800427c <ST7735_Init+0x38>)
 8004250:	f7fd feaa 	bl	8001fa8 <HAL_GPIO_WritePin>
    ST7735_Reset();
 8004254:	f7ff fdde 	bl	8003e14 <ST7735_Reset>
    ST7735_ExecuteCommandList(init_cmds1);
 8004258:	4809      	ldr	r0, [pc, #36]	; (8004280 <ST7735_Init+0x3c>)
 800425a:	f7ff fe1f 	bl	8003e9c <ST7735_ExecuteCommandList>
    ST7735_ExecuteCommandList(init_cmds2);
 800425e:	4809      	ldr	r0, [pc, #36]	; (8004284 <ST7735_Init+0x40>)
 8004260:	f7ff fe1c 	bl	8003e9c <ST7735_ExecuteCommandList>
    ST7735_ExecuteCommandList(init_cmds3);
 8004264:	4808      	ldr	r0, [pc, #32]	; (8004288 <ST7735_Init+0x44>)
 8004266:	f7ff fe19 	bl	8003e9c <ST7735_ExecuteCommandList>
    ST7735_Unselect();
 800426a:	2201      	movs	r2, #1
 800426c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004270:	4802      	ldr	r0, [pc, #8]	; (800427c <ST7735_Init+0x38>)
 8004272:	f7fd fe99 	bl	8001fa8 <HAL_GPIO_WritePin>
}
 8004276:	bf00      	nop
 8004278:	bd80      	pop	{r7, pc}
 800427a:	bf00      	nop
 800427c:	40010800 	.word	0x40010800
 8004280:	08008de8 	.word	0x08008de8
 8004284:	08008e24 	.word	0x08008e24
 8004288:	08008e34 	.word	0x08008e34

0800428c <unpack754_32>:

#include "function.h"


float unpack754_32( uint32_t floatingToIntValue )
{
 800428c:	b480      	push	{r7}
 800428e:	b089      	sub	sp, #36	; 0x24
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
	 myfloat ieee754;
	 unsigned int mantissa = 0;
 8004294:	2300      	movs	r3, #0
 8004296:	61fb      	str	r3, [r7, #28]
	 unsigned int exponent = 0 ;
 8004298:	2300      	movs	r3, #0
 800429a:	61bb      	str	r3, [r7, #24]
	 unsigned int sign = 0;
 800429c:	2300      	movs	r3, #0
 800429e:	60fb      	str	r3, [r7, #12]

	 sign = NTH_BIT(floatingToIntValue, 31);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	0fdb      	lsrs	r3, r3, #31
 80042a4:	60fb      	str	r3, [r7, #12]
	 for( int ix=0; ix<8; ix++)
 80042a6:	2300      	movs	r3, #0
 80042a8:	617b      	str	r3, [r7, #20]
 80042aa:	e00e      	b.n	80042ca <unpack754_32+0x3e>
	   exponent = (exponent | (NTH_BIT(floatingToIntValue, (30-ix))))<<1;
 80042ac:	697b      	ldr	r3, [r7, #20]
 80042ae:	f1c3 031e 	rsb	r3, r3, #30
 80042b2:	687a      	ldr	r2, [r7, #4]
 80042b4:	fa22 f303 	lsr.w	r3, r2, r3
 80042b8:	f003 0201 	and.w	r2, r3, #1
 80042bc:	69bb      	ldr	r3, [r7, #24]
 80042be:	4313      	orrs	r3, r2
 80042c0:	005b      	lsls	r3, r3, #1
 80042c2:	61bb      	str	r3, [r7, #24]
	 for( int ix=0; ix<8; ix++)
 80042c4:	697b      	ldr	r3, [r7, #20]
 80042c6:	3301      	adds	r3, #1
 80042c8:	617b      	str	r3, [r7, #20]
 80042ca:	697b      	ldr	r3, [r7, #20]
 80042cc:	2b07      	cmp	r3, #7
 80042ce:	dded      	ble.n	80042ac <unpack754_32+0x20>
	 exponent = exponent>>1;
 80042d0:	69bb      	ldr	r3, [r7, #24]
 80042d2:	085b      	lsrs	r3, r3, #1
 80042d4:	61bb      	str	r3, [r7, #24]
	 for( int ix=0; ix<23; ix++)
 80042d6:	2300      	movs	r3, #0
 80042d8:	613b      	str	r3, [r7, #16]
 80042da:	e00e      	b.n	80042fa <unpack754_32+0x6e>
	   mantissa = (mantissa | (NTH_BIT(floatingToIntValue, (22-ix))))<<1;
 80042dc:	693b      	ldr	r3, [r7, #16]
 80042de:	f1c3 0316 	rsb	r3, r3, #22
 80042e2:	687a      	ldr	r2, [r7, #4]
 80042e4:	fa22 f303 	lsr.w	r3, r2, r3
 80042e8:	f003 0201 	and.w	r2, r3, #1
 80042ec:	69fb      	ldr	r3, [r7, #28]
 80042ee:	4313      	orrs	r3, r2
 80042f0:	005b      	lsls	r3, r3, #1
 80042f2:	61fb      	str	r3, [r7, #28]
	 for( int ix=0; ix<23; ix++)
 80042f4:	693b      	ldr	r3, [r7, #16]
 80042f6:	3301      	adds	r3, #1
 80042f8:	613b      	str	r3, [r7, #16]
 80042fa:	693b      	ldr	r3, [r7, #16]
 80042fc:	2b16      	cmp	r3, #22
 80042fe:	dded      	ble.n	80042dc <unpack754_32+0x50>
	 mantissa = mantissa >> 1;
 8004300:	69fb      	ldr	r3, [r7, #28]
 8004302:	085b      	lsrs	r3, r3, #1
 8004304:	61fb      	str	r3, [r7, #28]

	 ieee754.raw.sign = sign;
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	f003 0301 	and.w	r3, r3, #1
 800430c:	b2da      	uxtb	r2, r3
 800430e:	7afb      	ldrb	r3, [r7, #11]
 8004310:	f362 13c7 	bfi	r3, r2, #7, #1
 8004314:	72fb      	strb	r3, [r7, #11]
	 ieee754.raw.exponent = exponent;
 8004316:	69bb      	ldr	r3, [r7, #24]
 8004318:	b2da      	uxtb	r2, r3
 800431a:	897b      	ldrh	r3, [r7, #10]
 800431c:	f362 13ce 	bfi	r3, r2, #7, #8
 8004320:	817b      	strh	r3, [r7, #10]
	 ieee754.raw.mantissa = mantissa;
 8004322:	69fb      	ldr	r3, [r7, #28]
 8004324:	f3c3 0216 	ubfx	r2, r3, #0, #23
 8004328:	68bb      	ldr	r3, [r7, #8]
 800432a:	f362 0316 	bfi	r3, r2, #0, #23
 800432e:	60bb      	str	r3, [r7, #8]
	 return ieee754.f;
 8004330:	68bb      	ldr	r3, [r7, #8]
}
 8004332:	4618      	mov	r0, r3
 8004334:	3724      	adds	r7, #36	; 0x24
 8004336:	46bd      	mov	sp, r7
 8004338:	bc80      	pop	{r7}
 800433a:	4770      	bx	lr

0800433c <__errno>:
 800433c:	4b01      	ldr	r3, [pc, #4]	; (8004344 <__errno+0x8>)
 800433e:	6818      	ldr	r0, [r3, #0]
 8004340:	4770      	bx	lr
 8004342:	bf00      	nop
 8004344:	20000014 	.word	0x20000014

08004348 <__libc_init_array>:
 8004348:	b570      	push	{r4, r5, r6, lr}
 800434a:	2600      	movs	r6, #0
 800434c:	4d0c      	ldr	r5, [pc, #48]	; (8004380 <__libc_init_array+0x38>)
 800434e:	4c0d      	ldr	r4, [pc, #52]	; (8004384 <__libc_init_array+0x3c>)
 8004350:	1b64      	subs	r4, r4, r5
 8004352:	10a4      	asrs	r4, r4, #2
 8004354:	42a6      	cmp	r6, r4
 8004356:	d109      	bne.n	800436c <__libc_init_array+0x24>
 8004358:	f004 fc60 	bl	8008c1c <_init>
 800435c:	2600      	movs	r6, #0
 800435e:	4d0a      	ldr	r5, [pc, #40]	; (8004388 <__libc_init_array+0x40>)
 8004360:	4c0a      	ldr	r4, [pc, #40]	; (800438c <__libc_init_array+0x44>)
 8004362:	1b64      	subs	r4, r4, r5
 8004364:	10a4      	asrs	r4, r4, #2
 8004366:	42a6      	cmp	r6, r4
 8004368:	d105      	bne.n	8004376 <__libc_init_array+0x2e>
 800436a:	bd70      	pop	{r4, r5, r6, pc}
 800436c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004370:	4798      	blx	r3
 8004372:	3601      	adds	r6, #1
 8004374:	e7ee      	b.n	8004354 <__libc_init_array+0xc>
 8004376:	f855 3b04 	ldr.w	r3, [r5], #4
 800437a:	4798      	blx	r3
 800437c:	3601      	adds	r6, #1
 800437e:	e7f2      	b.n	8004366 <__libc_init_array+0x1e>
 8004380:	0800a064 	.word	0x0800a064
 8004384:	0800a064 	.word	0x0800a064
 8004388:	0800a064 	.word	0x0800a064
 800438c:	0800a068 	.word	0x0800a068

08004390 <memset>:
 8004390:	4603      	mov	r3, r0
 8004392:	4402      	add	r2, r0
 8004394:	4293      	cmp	r3, r2
 8004396:	d100      	bne.n	800439a <memset+0xa>
 8004398:	4770      	bx	lr
 800439a:	f803 1b01 	strb.w	r1, [r3], #1
 800439e:	e7f9      	b.n	8004394 <memset+0x4>

080043a0 <__cvt>:
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80043a6:	461f      	mov	r7, r3
 80043a8:	bfbb      	ittet	lt
 80043aa:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 80043ae:	461f      	movlt	r7, r3
 80043b0:	2300      	movge	r3, #0
 80043b2:	232d      	movlt	r3, #45	; 0x2d
 80043b4:	b088      	sub	sp, #32
 80043b6:	4614      	mov	r4, r2
 80043b8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80043ba:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80043bc:	7013      	strb	r3, [r2, #0]
 80043be:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80043c0:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 80043c4:	f023 0820 	bic.w	r8, r3, #32
 80043c8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80043cc:	d005      	beq.n	80043da <__cvt+0x3a>
 80043ce:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80043d2:	d100      	bne.n	80043d6 <__cvt+0x36>
 80043d4:	3501      	adds	r5, #1
 80043d6:	2302      	movs	r3, #2
 80043d8:	e000      	b.n	80043dc <__cvt+0x3c>
 80043da:	2303      	movs	r3, #3
 80043dc:	aa07      	add	r2, sp, #28
 80043de:	9204      	str	r2, [sp, #16]
 80043e0:	aa06      	add	r2, sp, #24
 80043e2:	e9cd a202 	strd	sl, r2, [sp, #8]
 80043e6:	e9cd 3500 	strd	r3, r5, [sp]
 80043ea:	4622      	mov	r2, r4
 80043ec:	463b      	mov	r3, r7
 80043ee:	f001 fd93 	bl	8005f18 <_dtoa_r>
 80043f2:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80043f6:	4606      	mov	r6, r0
 80043f8:	d102      	bne.n	8004400 <__cvt+0x60>
 80043fa:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80043fc:	07db      	lsls	r3, r3, #31
 80043fe:	d522      	bpl.n	8004446 <__cvt+0xa6>
 8004400:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004404:	eb06 0905 	add.w	r9, r6, r5
 8004408:	d110      	bne.n	800442c <__cvt+0x8c>
 800440a:	7833      	ldrb	r3, [r6, #0]
 800440c:	2b30      	cmp	r3, #48	; 0x30
 800440e:	d10a      	bne.n	8004426 <__cvt+0x86>
 8004410:	2200      	movs	r2, #0
 8004412:	2300      	movs	r3, #0
 8004414:	4620      	mov	r0, r4
 8004416:	4639      	mov	r1, r7
 8004418:	f7fc fac6 	bl	80009a8 <__aeabi_dcmpeq>
 800441c:	b918      	cbnz	r0, 8004426 <__cvt+0x86>
 800441e:	f1c5 0501 	rsb	r5, r5, #1
 8004422:	f8ca 5000 	str.w	r5, [sl]
 8004426:	f8da 3000 	ldr.w	r3, [sl]
 800442a:	4499      	add	r9, r3
 800442c:	2200      	movs	r2, #0
 800442e:	2300      	movs	r3, #0
 8004430:	4620      	mov	r0, r4
 8004432:	4639      	mov	r1, r7
 8004434:	f7fc fab8 	bl	80009a8 <__aeabi_dcmpeq>
 8004438:	b108      	cbz	r0, 800443e <__cvt+0x9e>
 800443a:	f8cd 901c 	str.w	r9, [sp, #28]
 800443e:	2230      	movs	r2, #48	; 0x30
 8004440:	9b07      	ldr	r3, [sp, #28]
 8004442:	454b      	cmp	r3, r9
 8004444:	d307      	bcc.n	8004456 <__cvt+0xb6>
 8004446:	4630      	mov	r0, r6
 8004448:	9b07      	ldr	r3, [sp, #28]
 800444a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800444c:	1b9b      	subs	r3, r3, r6
 800444e:	6013      	str	r3, [r2, #0]
 8004450:	b008      	add	sp, #32
 8004452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004456:	1c59      	adds	r1, r3, #1
 8004458:	9107      	str	r1, [sp, #28]
 800445a:	701a      	strb	r2, [r3, #0]
 800445c:	e7f0      	b.n	8004440 <__cvt+0xa0>

0800445e <__exponent>:
 800445e:	4603      	mov	r3, r0
 8004460:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004462:	2900      	cmp	r1, #0
 8004464:	f803 2b02 	strb.w	r2, [r3], #2
 8004468:	bfb6      	itet	lt
 800446a:	222d      	movlt	r2, #45	; 0x2d
 800446c:	222b      	movge	r2, #43	; 0x2b
 800446e:	4249      	neglt	r1, r1
 8004470:	2909      	cmp	r1, #9
 8004472:	7042      	strb	r2, [r0, #1]
 8004474:	dd2b      	ble.n	80044ce <__exponent+0x70>
 8004476:	f10d 0407 	add.w	r4, sp, #7
 800447a:	46a4      	mov	ip, r4
 800447c:	270a      	movs	r7, #10
 800447e:	fb91 f6f7 	sdiv	r6, r1, r7
 8004482:	460a      	mov	r2, r1
 8004484:	46a6      	mov	lr, r4
 8004486:	fb07 1516 	mls	r5, r7, r6, r1
 800448a:	2a63      	cmp	r2, #99	; 0x63
 800448c:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8004490:	4631      	mov	r1, r6
 8004492:	f104 34ff 	add.w	r4, r4, #4294967295
 8004496:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800449a:	dcf0      	bgt.n	800447e <__exponent+0x20>
 800449c:	3130      	adds	r1, #48	; 0x30
 800449e:	f1ae 0502 	sub.w	r5, lr, #2
 80044a2:	f804 1c01 	strb.w	r1, [r4, #-1]
 80044a6:	4629      	mov	r1, r5
 80044a8:	1c44      	adds	r4, r0, #1
 80044aa:	4561      	cmp	r1, ip
 80044ac:	d30a      	bcc.n	80044c4 <__exponent+0x66>
 80044ae:	f10d 0209 	add.w	r2, sp, #9
 80044b2:	eba2 020e 	sub.w	r2, r2, lr
 80044b6:	4565      	cmp	r5, ip
 80044b8:	bf88      	it	hi
 80044ba:	2200      	movhi	r2, #0
 80044bc:	4413      	add	r3, r2
 80044be:	1a18      	subs	r0, r3, r0
 80044c0:	b003      	add	sp, #12
 80044c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80044c4:	f811 2b01 	ldrb.w	r2, [r1], #1
 80044c8:	f804 2f01 	strb.w	r2, [r4, #1]!
 80044cc:	e7ed      	b.n	80044aa <__exponent+0x4c>
 80044ce:	2330      	movs	r3, #48	; 0x30
 80044d0:	3130      	adds	r1, #48	; 0x30
 80044d2:	7083      	strb	r3, [r0, #2]
 80044d4:	70c1      	strb	r1, [r0, #3]
 80044d6:	1d03      	adds	r3, r0, #4
 80044d8:	e7f1      	b.n	80044be <__exponent+0x60>
	...

080044dc <_printf_float>:
 80044dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80044e0:	b091      	sub	sp, #68	; 0x44
 80044e2:	460c      	mov	r4, r1
 80044e4:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 80044e8:	4616      	mov	r6, r2
 80044ea:	461f      	mov	r7, r3
 80044ec:	4605      	mov	r5, r0
 80044ee:	f002 fe67 	bl	80071c0 <_localeconv_r>
 80044f2:	6803      	ldr	r3, [r0, #0]
 80044f4:	4618      	mov	r0, r3
 80044f6:	9309      	str	r3, [sp, #36]	; 0x24
 80044f8:	f7fb fe2a 	bl	8000150 <strlen>
 80044fc:	2300      	movs	r3, #0
 80044fe:	930e      	str	r3, [sp, #56]	; 0x38
 8004500:	f8d8 3000 	ldr.w	r3, [r8]
 8004504:	900a      	str	r0, [sp, #40]	; 0x28
 8004506:	3307      	adds	r3, #7
 8004508:	f023 0307 	bic.w	r3, r3, #7
 800450c:	f103 0208 	add.w	r2, r3, #8
 8004510:	f894 9018 	ldrb.w	r9, [r4, #24]
 8004514:	f8d4 b000 	ldr.w	fp, [r4]
 8004518:	f8c8 2000 	str.w	r2, [r8]
 800451c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004520:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004524:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8004528:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 800452c:	930b      	str	r3, [sp, #44]	; 0x2c
 800452e:	f04f 32ff 	mov.w	r2, #4294967295
 8004532:	4640      	mov	r0, r8
 8004534:	4b9c      	ldr	r3, [pc, #624]	; (80047a8 <_printf_float+0x2cc>)
 8004536:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004538:	f7fc fa68 	bl	8000a0c <__aeabi_dcmpun>
 800453c:	bb70      	cbnz	r0, 800459c <_printf_float+0xc0>
 800453e:	f04f 32ff 	mov.w	r2, #4294967295
 8004542:	4640      	mov	r0, r8
 8004544:	4b98      	ldr	r3, [pc, #608]	; (80047a8 <_printf_float+0x2cc>)
 8004546:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004548:	f7fc fa42 	bl	80009d0 <__aeabi_dcmple>
 800454c:	bb30      	cbnz	r0, 800459c <_printf_float+0xc0>
 800454e:	2200      	movs	r2, #0
 8004550:	2300      	movs	r3, #0
 8004552:	4640      	mov	r0, r8
 8004554:	4651      	mov	r1, sl
 8004556:	f7fc fa31 	bl	80009bc <__aeabi_dcmplt>
 800455a:	b110      	cbz	r0, 8004562 <_printf_float+0x86>
 800455c:	232d      	movs	r3, #45	; 0x2d
 800455e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004562:	4b92      	ldr	r3, [pc, #584]	; (80047ac <_printf_float+0x2d0>)
 8004564:	4892      	ldr	r0, [pc, #584]	; (80047b0 <_printf_float+0x2d4>)
 8004566:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800456a:	bf94      	ite	ls
 800456c:	4698      	movls	r8, r3
 800456e:	4680      	movhi	r8, r0
 8004570:	2303      	movs	r3, #3
 8004572:	f04f 0a00 	mov.w	sl, #0
 8004576:	6123      	str	r3, [r4, #16]
 8004578:	f02b 0304 	bic.w	r3, fp, #4
 800457c:	6023      	str	r3, [r4, #0]
 800457e:	4633      	mov	r3, r6
 8004580:	4621      	mov	r1, r4
 8004582:	4628      	mov	r0, r5
 8004584:	9700      	str	r7, [sp, #0]
 8004586:	aa0f      	add	r2, sp, #60	; 0x3c
 8004588:	f000 f9d4 	bl	8004934 <_printf_common>
 800458c:	3001      	adds	r0, #1
 800458e:	f040 8090 	bne.w	80046b2 <_printf_float+0x1d6>
 8004592:	f04f 30ff 	mov.w	r0, #4294967295
 8004596:	b011      	add	sp, #68	; 0x44
 8004598:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800459c:	4642      	mov	r2, r8
 800459e:	4653      	mov	r3, sl
 80045a0:	4640      	mov	r0, r8
 80045a2:	4651      	mov	r1, sl
 80045a4:	f7fc fa32 	bl	8000a0c <__aeabi_dcmpun>
 80045a8:	b148      	cbz	r0, 80045be <_printf_float+0xe2>
 80045aa:	f1ba 0f00 	cmp.w	sl, #0
 80045ae:	bfb8      	it	lt
 80045b0:	232d      	movlt	r3, #45	; 0x2d
 80045b2:	4880      	ldr	r0, [pc, #512]	; (80047b4 <_printf_float+0x2d8>)
 80045b4:	bfb8      	it	lt
 80045b6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80045ba:	4b7f      	ldr	r3, [pc, #508]	; (80047b8 <_printf_float+0x2dc>)
 80045bc:	e7d3      	b.n	8004566 <_printf_float+0x8a>
 80045be:	6863      	ldr	r3, [r4, #4]
 80045c0:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80045c4:	1c5a      	adds	r2, r3, #1
 80045c6:	d142      	bne.n	800464e <_printf_float+0x172>
 80045c8:	2306      	movs	r3, #6
 80045ca:	6063      	str	r3, [r4, #4]
 80045cc:	2200      	movs	r2, #0
 80045ce:	9206      	str	r2, [sp, #24]
 80045d0:	aa0e      	add	r2, sp, #56	; 0x38
 80045d2:	e9cd 9204 	strd	r9, r2, [sp, #16]
 80045d6:	aa0d      	add	r2, sp, #52	; 0x34
 80045d8:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 80045dc:	9203      	str	r2, [sp, #12]
 80045de:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 80045e2:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80045e6:	6023      	str	r3, [r4, #0]
 80045e8:	6863      	ldr	r3, [r4, #4]
 80045ea:	4642      	mov	r2, r8
 80045ec:	9300      	str	r3, [sp, #0]
 80045ee:	4628      	mov	r0, r5
 80045f0:	4653      	mov	r3, sl
 80045f2:	910b      	str	r1, [sp, #44]	; 0x2c
 80045f4:	f7ff fed4 	bl	80043a0 <__cvt>
 80045f8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80045fa:	4680      	mov	r8, r0
 80045fc:	2947      	cmp	r1, #71	; 0x47
 80045fe:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004600:	d108      	bne.n	8004614 <_printf_float+0x138>
 8004602:	1cc8      	adds	r0, r1, #3
 8004604:	db02      	blt.n	800460c <_printf_float+0x130>
 8004606:	6863      	ldr	r3, [r4, #4]
 8004608:	4299      	cmp	r1, r3
 800460a:	dd40      	ble.n	800468e <_printf_float+0x1b2>
 800460c:	f1a9 0902 	sub.w	r9, r9, #2
 8004610:	fa5f f989 	uxtb.w	r9, r9
 8004614:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004618:	d81f      	bhi.n	800465a <_printf_float+0x17e>
 800461a:	464a      	mov	r2, r9
 800461c:	3901      	subs	r1, #1
 800461e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004622:	910d      	str	r1, [sp, #52]	; 0x34
 8004624:	f7ff ff1b 	bl	800445e <__exponent>
 8004628:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800462a:	4682      	mov	sl, r0
 800462c:	1813      	adds	r3, r2, r0
 800462e:	2a01      	cmp	r2, #1
 8004630:	6123      	str	r3, [r4, #16]
 8004632:	dc02      	bgt.n	800463a <_printf_float+0x15e>
 8004634:	6822      	ldr	r2, [r4, #0]
 8004636:	07d2      	lsls	r2, r2, #31
 8004638:	d501      	bpl.n	800463e <_printf_float+0x162>
 800463a:	3301      	adds	r3, #1
 800463c:	6123      	str	r3, [r4, #16]
 800463e:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8004642:	2b00      	cmp	r3, #0
 8004644:	d09b      	beq.n	800457e <_printf_float+0xa2>
 8004646:	232d      	movs	r3, #45	; 0x2d
 8004648:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800464c:	e797      	b.n	800457e <_printf_float+0xa2>
 800464e:	2947      	cmp	r1, #71	; 0x47
 8004650:	d1bc      	bne.n	80045cc <_printf_float+0xf0>
 8004652:	2b00      	cmp	r3, #0
 8004654:	d1ba      	bne.n	80045cc <_printf_float+0xf0>
 8004656:	2301      	movs	r3, #1
 8004658:	e7b7      	b.n	80045ca <_printf_float+0xee>
 800465a:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800465e:	d118      	bne.n	8004692 <_printf_float+0x1b6>
 8004660:	2900      	cmp	r1, #0
 8004662:	6863      	ldr	r3, [r4, #4]
 8004664:	dd0b      	ble.n	800467e <_printf_float+0x1a2>
 8004666:	6121      	str	r1, [r4, #16]
 8004668:	b913      	cbnz	r3, 8004670 <_printf_float+0x194>
 800466a:	6822      	ldr	r2, [r4, #0]
 800466c:	07d0      	lsls	r0, r2, #31
 800466e:	d502      	bpl.n	8004676 <_printf_float+0x19a>
 8004670:	3301      	adds	r3, #1
 8004672:	440b      	add	r3, r1
 8004674:	6123      	str	r3, [r4, #16]
 8004676:	f04f 0a00 	mov.w	sl, #0
 800467a:	65a1      	str	r1, [r4, #88]	; 0x58
 800467c:	e7df      	b.n	800463e <_printf_float+0x162>
 800467e:	b913      	cbnz	r3, 8004686 <_printf_float+0x1aa>
 8004680:	6822      	ldr	r2, [r4, #0]
 8004682:	07d2      	lsls	r2, r2, #31
 8004684:	d501      	bpl.n	800468a <_printf_float+0x1ae>
 8004686:	3302      	adds	r3, #2
 8004688:	e7f4      	b.n	8004674 <_printf_float+0x198>
 800468a:	2301      	movs	r3, #1
 800468c:	e7f2      	b.n	8004674 <_printf_float+0x198>
 800468e:	f04f 0967 	mov.w	r9, #103	; 0x67
 8004692:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004694:	4299      	cmp	r1, r3
 8004696:	db05      	blt.n	80046a4 <_printf_float+0x1c8>
 8004698:	6823      	ldr	r3, [r4, #0]
 800469a:	6121      	str	r1, [r4, #16]
 800469c:	07d8      	lsls	r0, r3, #31
 800469e:	d5ea      	bpl.n	8004676 <_printf_float+0x19a>
 80046a0:	1c4b      	adds	r3, r1, #1
 80046a2:	e7e7      	b.n	8004674 <_printf_float+0x198>
 80046a4:	2900      	cmp	r1, #0
 80046a6:	bfcc      	ite	gt
 80046a8:	2201      	movgt	r2, #1
 80046aa:	f1c1 0202 	rsble	r2, r1, #2
 80046ae:	4413      	add	r3, r2
 80046b0:	e7e0      	b.n	8004674 <_printf_float+0x198>
 80046b2:	6823      	ldr	r3, [r4, #0]
 80046b4:	055a      	lsls	r2, r3, #21
 80046b6:	d407      	bmi.n	80046c8 <_printf_float+0x1ec>
 80046b8:	6923      	ldr	r3, [r4, #16]
 80046ba:	4642      	mov	r2, r8
 80046bc:	4631      	mov	r1, r6
 80046be:	4628      	mov	r0, r5
 80046c0:	47b8      	blx	r7
 80046c2:	3001      	adds	r0, #1
 80046c4:	d12b      	bne.n	800471e <_printf_float+0x242>
 80046c6:	e764      	b.n	8004592 <_printf_float+0xb6>
 80046c8:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80046cc:	f240 80dd 	bls.w	800488a <_printf_float+0x3ae>
 80046d0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80046d4:	2200      	movs	r2, #0
 80046d6:	2300      	movs	r3, #0
 80046d8:	f7fc f966 	bl	80009a8 <__aeabi_dcmpeq>
 80046dc:	2800      	cmp	r0, #0
 80046de:	d033      	beq.n	8004748 <_printf_float+0x26c>
 80046e0:	2301      	movs	r3, #1
 80046e2:	4631      	mov	r1, r6
 80046e4:	4628      	mov	r0, r5
 80046e6:	4a35      	ldr	r2, [pc, #212]	; (80047bc <_printf_float+0x2e0>)
 80046e8:	47b8      	blx	r7
 80046ea:	3001      	adds	r0, #1
 80046ec:	f43f af51 	beq.w	8004592 <_printf_float+0xb6>
 80046f0:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80046f4:	429a      	cmp	r2, r3
 80046f6:	db02      	blt.n	80046fe <_printf_float+0x222>
 80046f8:	6823      	ldr	r3, [r4, #0]
 80046fa:	07d8      	lsls	r0, r3, #31
 80046fc:	d50f      	bpl.n	800471e <_printf_float+0x242>
 80046fe:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004702:	4631      	mov	r1, r6
 8004704:	4628      	mov	r0, r5
 8004706:	47b8      	blx	r7
 8004708:	3001      	adds	r0, #1
 800470a:	f43f af42 	beq.w	8004592 <_printf_float+0xb6>
 800470e:	f04f 0800 	mov.w	r8, #0
 8004712:	f104 091a 	add.w	r9, r4, #26
 8004716:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004718:	3b01      	subs	r3, #1
 800471a:	4543      	cmp	r3, r8
 800471c:	dc09      	bgt.n	8004732 <_printf_float+0x256>
 800471e:	6823      	ldr	r3, [r4, #0]
 8004720:	079b      	lsls	r3, r3, #30
 8004722:	f100 8102 	bmi.w	800492a <_printf_float+0x44e>
 8004726:	68e0      	ldr	r0, [r4, #12]
 8004728:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800472a:	4298      	cmp	r0, r3
 800472c:	bfb8      	it	lt
 800472e:	4618      	movlt	r0, r3
 8004730:	e731      	b.n	8004596 <_printf_float+0xba>
 8004732:	2301      	movs	r3, #1
 8004734:	464a      	mov	r2, r9
 8004736:	4631      	mov	r1, r6
 8004738:	4628      	mov	r0, r5
 800473a:	47b8      	blx	r7
 800473c:	3001      	adds	r0, #1
 800473e:	f43f af28 	beq.w	8004592 <_printf_float+0xb6>
 8004742:	f108 0801 	add.w	r8, r8, #1
 8004746:	e7e6      	b.n	8004716 <_printf_float+0x23a>
 8004748:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800474a:	2b00      	cmp	r3, #0
 800474c:	dc38      	bgt.n	80047c0 <_printf_float+0x2e4>
 800474e:	2301      	movs	r3, #1
 8004750:	4631      	mov	r1, r6
 8004752:	4628      	mov	r0, r5
 8004754:	4a19      	ldr	r2, [pc, #100]	; (80047bc <_printf_float+0x2e0>)
 8004756:	47b8      	blx	r7
 8004758:	3001      	adds	r0, #1
 800475a:	f43f af1a 	beq.w	8004592 <_printf_float+0xb6>
 800475e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004762:	4313      	orrs	r3, r2
 8004764:	d102      	bne.n	800476c <_printf_float+0x290>
 8004766:	6823      	ldr	r3, [r4, #0]
 8004768:	07d9      	lsls	r1, r3, #31
 800476a:	d5d8      	bpl.n	800471e <_printf_float+0x242>
 800476c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004770:	4631      	mov	r1, r6
 8004772:	4628      	mov	r0, r5
 8004774:	47b8      	blx	r7
 8004776:	3001      	adds	r0, #1
 8004778:	f43f af0b 	beq.w	8004592 <_printf_float+0xb6>
 800477c:	f04f 0900 	mov.w	r9, #0
 8004780:	f104 0a1a 	add.w	sl, r4, #26
 8004784:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004786:	425b      	negs	r3, r3
 8004788:	454b      	cmp	r3, r9
 800478a:	dc01      	bgt.n	8004790 <_printf_float+0x2b4>
 800478c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800478e:	e794      	b.n	80046ba <_printf_float+0x1de>
 8004790:	2301      	movs	r3, #1
 8004792:	4652      	mov	r2, sl
 8004794:	4631      	mov	r1, r6
 8004796:	4628      	mov	r0, r5
 8004798:	47b8      	blx	r7
 800479a:	3001      	adds	r0, #1
 800479c:	f43f aef9 	beq.w	8004592 <_printf_float+0xb6>
 80047a0:	f109 0901 	add.w	r9, r9, #1
 80047a4:	e7ee      	b.n	8004784 <_printf_float+0x2a8>
 80047a6:	bf00      	nop
 80047a8:	7fefffff 	.word	0x7fefffff
 80047ac:	08009bc0 	.word	0x08009bc0
 80047b0:	08009bc4 	.word	0x08009bc4
 80047b4:	08009bcc 	.word	0x08009bcc
 80047b8:	08009bc8 	.word	0x08009bc8
 80047bc:	08009bd0 	.word	0x08009bd0
 80047c0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80047c2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80047c4:	429a      	cmp	r2, r3
 80047c6:	bfa8      	it	ge
 80047c8:	461a      	movge	r2, r3
 80047ca:	2a00      	cmp	r2, #0
 80047cc:	4691      	mov	r9, r2
 80047ce:	dc37      	bgt.n	8004840 <_printf_float+0x364>
 80047d0:	f04f 0b00 	mov.w	fp, #0
 80047d4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80047d8:	f104 021a 	add.w	r2, r4, #26
 80047dc:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80047e0:	ebaa 0309 	sub.w	r3, sl, r9
 80047e4:	455b      	cmp	r3, fp
 80047e6:	dc33      	bgt.n	8004850 <_printf_float+0x374>
 80047e8:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80047ec:	429a      	cmp	r2, r3
 80047ee:	db3b      	blt.n	8004868 <_printf_float+0x38c>
 80047f0:	6823      	ldr	r3, [r4, #0]
 80047f2:	07da      	lsls	r2, r3, #31
 80047f4:	d438      	bmi.n	8004868 <_printf_float+0x38c>
 80047f6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80047f8:	990d      	ldr	r1, [sp, #52]	; 0x34
 80047fa:	eba3 020a 	sub.w	r2, r3, sl
 80047fe:	eba3 0901 	sub.w	r9, r3, r1
 8004802:	4591      	cmp	r9, r2
 8004804:	bfa8      	it	ge
 8004806:	4691      	movge	r9, r2
 8004808:	f1b9 0f00 	cmp.w	r9, #0
 800480c:	dc34      	bgt.n	8004878 <_printf_float+0x39c>
 800480e:	f04f 0800 	mov.w	r8, #0
 8004812:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004816:	f104 0a1a 	add.w	sl, r4, #26
 800481a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800481e:	1a9b      	subs	r3, r3, r2
 8004820:	eba3 0309 	sub.w	r3, r3, r9
 8004824:	4543      	cmp	r3, r8
 8004826:	f77f af7a 	ble.w	800471e <_printf_float+0x242>
 800482a:	2301      	movs	r3, #1
 800482c:	4652      	mov	r2, sl
 800482e:	4631      	mov	r1, r6
 8004830:	4628      	mov	r0, r5
 8004832:	47b8      	blx	r7
 8004834:	3001      	adds	r0, #1
 8004836:	f43f aeac 	beq.w	8004592 <_printf_float+0xb6>
 800483a:	f108 0801 	add.w	r8, r8, #1
 800483e:	e7ec      	b.n	800481a <_printf_float+0x33e>
 8004840:	4613      	mov	r3, r2
 8004842:	4631      	mov	r1, r6
 8004844:	4642      	mov	r2, r8
 8004846:	4628      	mov	r0, r5
 8004848:	47b8      	blx	r7
 800484a:	3001      	adds	r0, #1
 800484c:	d1c0      	bne.n	80047d0 <_printf_float+0x2f4>
 800484e:	e6a0      	b.n	8004592 <_printf_float+0xb6>
 8004850:	2301      	movs	r3, #1
 8004852:	4631      	mov	r1, r6
 8004854:	4628      	mov	r0, r5
 8004856:	920b      	str	r2, [sp, #44]	; 0x2c
 8004858:	47b8      	blx	r7
 800485a:	3001      	adds	r0, #1
 800485c:	f43f ae99 	beq.w	8004592 <_printf_float+0xb6>
 8004860:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004862:	f10b 0b01 	add.w	fp, fp, #1
 8004866:	e7b9      	b.n	80047dc <_printf_float+0x300>
 8004868:	4631      	mov	r1, r6
 800486a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800486e:	4628      	mov	r0, r5
 8004870:	47b8      	blx	r7
 8004872:	3001      	adds	r0, #1
 8004874:	d1bf      	bne.n	80047f6 <_printf_float+0x31a>
 8004876:	e68c      	b.n	8004592 <_printf_float+0xb6>
 8004878:	464b      	mov	r3, r9
 800487a:	4631      	mov	r1, r6
 800487c:	4628      	mov	r0, r5
 800487e:	eb08 020a 	add.w	r2, r8, sl
 8004882:	47b8      	blx	r7
 8004884:	3001      	adds	r0, #1
 8004886:	d1c2      	bne.n	800480e <_printf_float+0x332>
 8004888:	e683      	b.n	8004592 <_printf_float+0xb6>
 800488a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800488c:	2a01      	cmp	r2, #1
 800488e:	dc01      	bgt.n	8004894 <_printf_float+0x3b8>
 8004890:	07db      	lsls	r3, r3, #31
 8004892:	d537      	bpl.n	8004904 <_printf_float+0x428>
 8004894:	2301      	movs	r3, #1
 8004896:	4642      	mov	r2, r8
 8004898:	4631      	mov	r1, r6
 800489a:	4628      	mov	r0, r5
 800489c:	47b8      	blx	r7
 800489e:	3001      	adds	r0, #1
 80048a0:	f43f ae77 	beq.w	8004592 <_printf_float+0xb6>
 80048a4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80048a8:	4631      	mov	r1, r6
 80048aa:	4628      	mov	r0, r5
 80048ac:	47b8      	blx	r7
 80048ae:	3001      	adds	r0, #1
 80048b0:	f43f ae6f 	beq.w	8004592 <_printf_float+0xb6>
 80048b4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80048b8:	2200      	movs	r2, #0
 80048ba:	2300      	movs	r3, #0
 80048bc:	f7fc f874 	bl	80009a8 <__aeabi_dcmpeq>
 80048c0:	b9d8      	cbnz	r0, 80048fa <_printf_float+0x41e>
 80048c2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80048c4:	f108 0201 	add.w	r2, r8, #1
 80048c8:	3b01      	subs	r3, #1
 80048ca:	4631      	mov	r1, r6
 80048cc:	4628      	mov	r0, r5
 80048ce:	47b8      	blx	r7
 80048d0:	3001      	adds	r0, #1
 80048d2:	d10e      	bne.n	80048f2 <_printf_float+0x416>
 80048d4:	e65d      	b.n	8004592 <_printf_float+0xb6>
 80048d6:	2301      	movs	r3, #1
 80048d8:	464a      	mov	r2, r9
 80048da:	4631      	mov	r1, r6
 80048dc:	4628      	mov	r0, r5
 80048de:	47b8      	blx	r7
 80048e0:	3001      	adds	r0, #1
 80048e2:	f43f ae56 	beq.w	8004592 <_printf_float+0xb6>
 80048e6:	f108 0801 	add.w	r8, r8, #1
 80048ea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80048ec:	3b01      	subs	r3, #1
 80048ee:	4543      	cmp	r3, r8
 80048f0:	dcf1      	bgt.n	80048d6 <_printf_float+0x3fa>
 80048f2:	4653      	mov	r3, sl
 80048f4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80048f8:	e6e0      	b.n	80046bc <_printf_float+0x1e0>
 80048fa:	f04f 0800 	mov.w	r8, #0
 80048fe:	f104 091a 	add.w	r9, r4, #26
 8004902:	e7f2      	b.n	80048ea <_printf_float+0x40e>
 8004904:	2301      	movs	r3, #1
 8004906:	4642      	mov	r2, r8
 8004908:	e7df      	b.n	80048ca <_printf_float+0x3ee>
 800490a:	2301      	movs	r3, #1
 800490c:	464a      	mov	r2, r9
 800490e:	4631      	mov	r1, r6
 8004910:	4628      	mov	r0, r5
 8004912:	47b8      	blx	r7
 8004914:	3001      	adds	r0, #1
 8004916:	f43f ae3c 	beq.w	8004592 <_printf_float+0xb6>
 800491a:	f108 0801 	add.w	r8, r8, #1
 800491e:	68e3      	ldr	r3, [r4, #12]
 8004920:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8004922:	1a5b      	subs	r3, r3, r1
 8004924:	4543      	cmp	r3, r8
 8004926:	dcf0      	bgt.n	800490a <_printf_float+0x42e>
 8004928:	e6fd      	b.n	8004726 <_printf_float+0x24a>
 800492a:	f04f 0800 	mov.w	r8, #0
 800492e:	f104 0919 	add.w	r9, r4, #25
 8004932:	e7f4      	b.n	800491e <_printf_float+0x442>

08004934 <_printf_common>:
 8004934:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004938:	4616      	mov	r6, r2
 800493a:	4699      	mov	r9, r3
 800493c:	688a      	ldr	r2, [r1, #8]
 800493e:	690b      	ldr	r3, [r1, #16]
 8004940:	4607      	mov	r7, r0
 8004942:	4293      	cmp	r3, r2
 8004944:	bfb8      	it	lt
 8004946:	4613      	movlt	r3, r2
 8004948:	6033      	str	r3, [r6, #0]
 800494a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800494e:	460c      	mov	r4, r1
 8004950:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004954:	b10a      	cbz	r2, 800495a <_printf_common+0x26>
 8004956:	3301      	adds	r3, #1
 8004958:	6033      	str	r3, [r6, #0]
 800495a:	6823      	ldr	r3, [r4, #0]
 800495c:	0699      	lsls	r1, r3, #26
 800495e:	bf42      	ittt	mi
 8004960:	6833      	ldrmi	r3, [r6, #0]
 8004962:	3302      	addmi	r3, #2
 8004964:	6033      	strmi	r3, [r6, #0]
 8004966:	6825      	ldr	r5, [r4, #0]
 8004968:	f015 0506 	ands.w	r5, r5, #6
 800496c:	d106      	bne.n	800497c <_printf_common+0x48>
 800496e:	f104 0a19 	add.w	sl, r4, #25
 8004972:	68e3      	ldr	r3, [r4, #12]
 8004974:	6832      	ldr	r2, [r6, #0]
 8004976:	1a9b      	subs	r3, r3, r2
 8004978:	42ab      	cmp	r3, r5
 800497a:	dc28      	bgt.n	80049ce <_printf_common+0x9a>
 800497c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004980:	1e13      	subs	r3, r2, #0
 8004982:	6822      	ldr	r2, [r4, #0]
 8004984:	bf18      	it	ne
 8004986:	2301      	movne	r3, #1
 8004988:	0692      	lsls	r2, r2, #26
 800498a:	d42d      	bmi.n	80049e8 <_printf_common+0xb4>
 800498c:	4649      	mov	r1, r9
 800498e:	4638      	mov	r0, r7
 8004990:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004994:	47c0      	blx	r8
 8004996:	3001      	adds	r0, #1
 8004998:	d020      	beq.n	80049dc <_printf_common+0xa8>
 800499a:	6823      	ldr	r3, [r4, #0]
 800499c:	68e5      	ldr	r5, [r4, #12]
 800499e:	f003 0306 	and.w	r3, r3, #6
 80049a2:	2b04      	cmp	r3, #4
 80049a4:	bf18      	it	ne
 80049a6:	2500      	movne	r5, #0
 80049a8:	6832      	ldr	r2, [r6, #0]
 80049aa:	f04f 0600 	mov.w	r6, #0
 80049ae:	68a3      	ldr	r3, [r4, #8]
 80049b0:	bf08      	it	eq
 80049b2:	1aad      	subeq	r5, r5, r2
 80049b4:	6922      	ldr	r2, [r4, #16]
 80049b6:	bf08      	it	eq
 80049b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80049bc:	4293      	cmp	r3, r2
 80049be:	bfc4      	itt	gt
 80049c0:	1a9b      	subgt	r3, r3, r2
 80049c2:	18ed      	addgt	r5, r5, r3
 80049c4:	341a      	adds	r4, #26
 80049c6:	42b5      	cmp	r5, r6
 80049c8:	d11a      	bne.n	8004a00 <_printf_common+0xcc>
 80049ca:	2000      	movs	r0, #0
 80049cc:	e008      	b.n	80049e0 <_printf_common+0xac>
 80049ce:	2301      	movs	r3, #1
 80049d0:	4652      	mov	r2, sl
 80049d2:	4649      	mov	r1, r9
 80049d4:	4638      	mov	r0, r7
 80049d6:	47c0      	blx	r8
 80049d8:	3001      	adds	r0, #1
 80049da:	d103      	bne.n	80049e4 <_printf_common+0xb0>
 80049dc:	f04f 30ff 	mov.w	r0, #4294967295
 80049e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80049e4:	3501      	adds	r5, #1
 80049e6:	e7c4      	b.n	8004972 <_printf_common+0x3e>
 80049e8:	2030      	movs	r0, #48	; 0x30
 80049ea:	18e1      	adds	r1, r4, r3
 80049ec:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80049f0:	1c5a      	adds	r2, r3, #1
 80049f2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80049f6:	4422      	add	r2, r4
 80049f8:	3302      	adds	r3, #2
 80049fa:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80049fe:	e7c5      	b.n	800498c <_printf_common+0x58>
 8004a00:	2301      	movs	r3, #1
 8004a02:	4622      	mov	r2, r4
 8004a04:	4649      	mov	r1, r9
 8004a06:	4638      	mov	r0, r7
 8004a08:	47c0      	blx	r8
 8004a0a:	3001      	adds	r0, #1
 8004a0c:	d0e6      	beq.n	80049dc <_printf_common+0xa8>
 8004a0e:	3601      	adds	r6, #1
 8004a10:	e7d9      	b.n	80049c6 <_printf_common+0x92>
	...

08004a14 <_printf_i>:
 8004a14:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004a18:	7e0f      	ldrb	r7, [r1, #24]
 8004a1a:	4691      	mov	r9, r2
 8004a1c:	2f78      	cmp	r7, #120	; 0x78
 8004a1e:	4680      	mov	r8, r0
 8004a20:	460c      	mov	r4, r1
 8004a22:	469a      	mov	sl, r3
 8004a24:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004a26:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004a2a:	d807      	bhi.n	8004a3c <_printf_i+0x28>
 8004a2c:	2f62      	cmp	r7, #98	; 0x62
 8004a2e:	d80a      	bhi.n	8004a46 <_printf_i+0x32>
 8004a30:	2f00      	cmp	r7, #0
 8004a32:	f000 80d9 	beq.w	8004be8 <_printf_i+0x1d4>
 8004a36:	2f58      	cmp	r7, #88	; 0x58
 8004a38:	f000 80a4 	beq.w	8004b84 <_printf_i+0x170>
 8004a3c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004a40:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004a44:	e03a      	b.n	8004abc <_printf_i+0xa8>
 8004a46:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004a4a:	2b15      	cmp	r3, #21
 8004a4c:	d8f6      	bhi.n	8004a3c <_printf_i+0x28>
 8004a4e:	a101      	add	r1, pc, #4	; (adr r1, 8004a54 <_printf_i+0x40>)
 8004a50:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004a54:	08004aad 	.word	0x08004aad
 8004a58:	08004ac1 	.word	0x08004ac1
 8004a5c:	08004a3d 	.word	0x08004a3d
 8004a60:	08004a3d 	.word	0x08004a3d
 8004a64:	08004a3d 	.word	0x08004a3d
 8004a68:	08004a3d 	.word	0x08004a3d
 8004a6c:	08004ac1 	.word	0x08004ac1
 8004a70:	08004a3d 	.word	0x08004a3d
 8004a74:	08004a3d 	.word	0x08004a3d
 8004a78:	08004a3d 	.word	0x08004a3d
 8004a7c:	08004a3d 	.word	0x08004a3d
 8004a80:	08004bcf 	.word	0x08004bcf
 8004a84:	08004af1 	.word	0x08004af1
 8004a88:	08004bb1 	.word	0x08004bb1
 8004a8c:	08004a3d 	.word	0x08004a3d
 8004a90:	08004a3d 	.word	0x08004a3d
 8004a94:	08004bf1 	.word	0x08004bf1
 8004a98:	08004a3d 	.word	0x08004a3d
 8004a9c:	08004af1 	.word	0x08004af1
 8004aa0:	08004a3d 	.word	0x08004a3d
 8004aa4:	08004a3d 	.word	0x08004a3d
 8004aa8:	08004bb9 	.word	0x08004bb9
 8004aac:	682b      	ldr	r3, [r5, #0]
 8004aae:	1d1a      	adds	r2, r3, #4
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	602a      	str	r2, [r5, #0]
 8004ab4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004ab8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004abc:	2301      	movs	r3, #1
 8004abe:	e0a4      	b.n	8004c0a <_printf_i+0x1f6>
 8004ac0:	6820      	ldr	r0, [r4, #0]
 8004ac2:	6829      	ldr	r1, [r5, #0]
 8004ac4:	0606      	lsls	r6, r0, #24
 8004ac6:	f101 0304 	add.w	r3, r1, #4
 8004aca:	d50a      	bpl.n	8004ae2 <_printf_i+0xce>
 8004acc:	680e      	ldr	r6, [r1, #0]
 8004ace:	602b      	str	r3, [r5, #0]
 8004ad0:	2e00      	cmp	r6, #0
 8004ad2:	da03      	bge.n	8004adc <_printf_i+0xc8>
 8004ad4:	232d      	movs	r3, #45	; 0x2d
 8004ad6:	4276      	negs	r6, r6
 8004ad8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004adc:	230a      	movs	r3, #10
 8004ade:	485e      	ldr	r0, [pc, #376]	; (8004c58 <_printf_i+0x244>)
 8004ae0:	e019      	b.n	8004b16 <_printf_i+0x102>
 8004ae2:	680e      	ldr	r6, [r1, #0]
 8004ae4:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004ae8:	602b      	str	r3, [r5, #0]
 8004aea:	bf18      	it	ne
 8004aec:	b236      	sxthne	r6, r6
 8004aee:	e7ef      	b.n	8004ad0 <_printf_i+0xbc>
 8004af0:	682b      	ldr	r3, [r5, #0]
 8004af2:	6820      	ldr	r0, [r4, #0]
 8004af4:	1d19      	adds	r1, r3, #4
 8004af6:	6029      	str	r1, [r5, #0]
 8004af8:	0601      	lsls	r1, r0, #24
 8004afa:	d501      	bpl.n	8004b00 <_printf_i+0xec>
 8004afc:	681e      	ldr	r6, [r3, #0]
 8004afe:	e002      	b.n	8004b06 <_printf_i+0xf2>
 8004b00:	0646      	lsls	r6, r0, #25
 8004b02:	d5fb      	bpl.n	8004afc <_printf_i+0xe8>
 8004b04:	881e      	ldrh	r6, [r3, #0]
 8004b06:	2f6f      	cmp	r7, #111	; 0x6f
 8004b08:	bf0c      	ite	eq
 8004b0a:	2308      	moveq	r3, #8
 8004b0c:	230a      	movne	r3, #10
 8004b0e:	4852      	ldr	r0, [pc, #328]	; (8004c58 <_printf_i+0x244>)
 8004b10:	2100      	movs	r1, #0
 8004b12:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004b16:	6865      	ldr	r5, [r4, #4]
 8004b18:	2d00      	cmp	r5, #0
 8004b1a:	bfa8      	it	ge
 8004b1c:	6821      	ldrge	r1, [r4, #0]
 8004b1e:	60a5      	str	r5, [r4, #8]
 8004b20:	bfa4      	itt	ge
 8004b22:	f021 0104 	bicge.w	r1, r1, #4
 8004b26:	6021      	strge	r1, [r4, #0]
 8004b28:	b90e      	cbnz	r6, 8004b2e <_printf_i+0x11a>
 8004b2a:	2d00      	cmp	r5, #0
 8004b2c:	d04d      	beq.n	8004bca <_printf_i+0x1b6>
 8004b2e:	4615      	mov	r5, r2
 8004b30:	fbb6 f1f3 	udiv	r1, r6, r3
 8004b34:	fb03 6711 	mls	r7, r3, r1, r6
 8004b38:	5dc7      	ldrb	r7, [r0, r7]
 8004b3a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004b3e:	4637      	mov	r7, r6
 8004b40:	42bb      	cmp	r3, r7
 8004b42:	460e      	mov	r6, r1
 8004b44:	d9f4      	bls.n	8004b30 <_printf_i+0x11c>
 8004b46:	2b08      	cmp	r3, #8
 8004b48:	d10b      	bne.n	8004b62 <_printf_i+0x14e>
 8004b4a:	6823      	ldr	r3, [r4, #0]
 8004b4c:	07de      	lsls	r6, r3, #31
 8004b4e:	d508      	bpl.n	8004b62 <_printf_i+0x14e>
 8004b50:	6923      	ldr	r3, [r4, #16]
 8004b52:	6861      	ldr	r1, [r4, #4]
 8004b54:	4299      	cmp	r1, r3
 8004b56:	bfde      	ittt	le
 8004b58:	2330      	movle	r3, #48	; 0x30
 8004b5a:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004b5e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004b62:	1b52      	subs	r2, r2, r5
 8004b64:	6122      	str	r2, [r4, #16]
 8004b66:	464b      	mov	r3, r9
 8004b68:	4621      	mov	r1, r4
 8004b6a:	4640      	mov	r0, r8
 8004b6c:	f8cd a000 	str.w	sl, [sp]
 8004b70:	aa03      	add	r2, sp, #12
 8004b72:	f7ff fedf 	bl	8004934 <_printf_common>
 8004b76:	3001      	adds	r0, #1
 8004b78:	d14c      	bne.n	8004c14 <_printf_i+0x200>
 8004b7a:	f04f 30ff 	mov.w	r0, #4294967295
 8004b7e:	b004      	add	sp, #16
 8004b80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b84:	4834      	ldr	r0, [pc, #208]	; (8004c58 <_printf_i+0x244>)
 8004b86:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004b8a:	6829      	ldr	r1, [r5, #0]
 8004b8c:	6823      	ldr	r3, [r4, #0]
 8004b8e:	f851 6b04 	ldr.w	r6, [r1], #4
 8004b92:	6029      	str	r1, [r5, #0]
 8004b94:	061d      	lsls	r5, r3, #24
 8004b96:	d514      	bpl.n	8004bc2 <_printf_i+0x1ae>
 8004b98:	07df      	lsls	r7, r3, #31
 8004b9a:	bf44      	itt	mi
 8004b9c:	f043 0320 	orrmi.w	r3, r3, #32
 8004ba0:	6023      	strmi	r3, [r4, #0]
 8004ba2:	b91e      	cbnz	r6, 8004bac <_printf_i+0x198>
 8004ba4:	6823      	ldr	r3, [r4, #0]
 8004ba6:	f023 0320 	bic.w	r3, r3, #32
 8004baa:	6023      	str	r3, [r4, #0]
 8004bac:	2310      	movs	r3, #16
 8004bae:	e7af      	b.n	8004b10 <_printf_i+0xfc>
 8004bb0:	6823      	ldr	r3, [r4, #0]
 8004bb2:	f043 0320 	orr.w	r3, r3, #32
 8004bb6:	6023      	str	r3, [r4, #0]
 8004bb8:	2378      	movs	r3, #120	; 0x78
 8004bba:	4828      	ldr	r0, [pc, #160]	; (8004c5c <_printf_i+0x248>)
 8004bbc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004bc0:	e7e3      	b.n	8004b8a <_printf_i+0x176>
 8004bc2:	0659      	lsls	r1, r3, #25
 8004bc4:	bf48      	it	mi
 8004bc6:	b2b6      	uxthmi	r6, r6
 8004bc8:	e7e6      	b.n	8004b98 <_printf_i+0x184>
 8004bca:	4615      	mov	r5, r2
 8004bcc:	e7bb      	b.n	8004b46 <_printf_i+0x132>
 8004bce:	682b      	ldr	r3, [r5, #0]
 8004bd0:	6826      	ldr	r6, [r4, #0]
 8004bd2:	1d18      	adds	r0, r3, #4
 8004bd4:	6961      	ldr	r1, [r4, #20]
 8004bd6:	6028      	str	r0, [r5, #0]
 8004bd8:	0635      	lsls	r5, r6, #24
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	d501      	bpl.n	8004be2 <_printf_i+0x1ce>
 8004bde:	6019      	str	r1, [r3, #0]
 8004be0:	e002      	b.n	8004be8 <_printf_i+0x1d4>
 8004be2:	0670      	lsls	r0, r6, #25
 8004be4:	d5fb      	bpl.n	8004bde <_printf_i+0x1ca>
 8004be6:	8019      	strh	r1, [r3, #0]
 8004be8:	2300      	movs	r3, #0
 8004bea:	4615      	mov	r5, r2
 8004bec:	6123      	str	r3, [r4, #16]
 8004bee:	e7ba      	b.n	8004b66 <_printf_i+0x152>
 8004bf0:	682b      	ldr	r3, [r5, #0]
 8004bf2:	2100      	movs	r1, #0
 8004bf4:	1d1a      	adds	r2, r3, #4
 8004bf6:	602a      	str	r2, [r5, #0]
 8004bf8:	681d      	ldr	r5, [r3, #0]
 8004bfa:	6862      	ldr	r2, [r4, #4]
 8004bfc:	4628      	mov	r0, r5
 8004bfe:	f002 fafd 	bl	80071fc <memchr>
 8004c02:	b108      	cbz	r0, 8004c08 <_printf_i+0x1f4>
 8004c04:	1b40      	subs	r0, r0, r5
 8004c06:	6060      	str	r0, [r4, #4]
 8004c08:	6863      	ldr	r3, [r4, #4]
 8004c0a:	6123      	str	r3, [r4, #16]
 8004c0c:	2300      	movs	r3, #0
 8004c0e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004c12:	e7a8      	b.n	8004b66 <_printf_i+0x152>
 8004c14:	462a      	mov	r2, r5
 8004c16:	4649      	mov	r1, r9
 8004c18:	4640      	mov	r0, r8
 8004c1a:	6923      	ldr	r3, [r4, #16]
 8004c1c:	47d0      	blx	sl
 8004c1e:	3001      	adds	r0, #1
 8004c20:	d0ab      	beq.n	8004b7a <_printf_i+0x166>
 8004c22:	6823      	ldr	r3, [r4, #0]
 8004c24:	079b      	lsls	r3, r3, #30
 8004c26:	d413      	bmi.n	8004c50 <_printf_i+0x23c>
 8004c28:	68e0      	ldr	r0, [r4, #12]
 8004c2a:	9b03      	ldr	r3, [sp, #12]
 8004c2c:	4298      	cmp	r0, r3
 8004c2e:	bfb8      	it	lt
 8004c30:	4618      	movlt	r0, r3
 8004c32:	e7a4      	b.n	8004b7e <_printf_i+0x16a>
 8004c34:	2301      	movs	r3, #1
 8004c36:	4632      	mov	r2, r6
 8004c38:	4649      	mov	r1, r9
 8004c3a:	4640      	mov	r0, r8
 8004c3c:	47d0      	blx	sl
 8004c3e:	3001      	adds	r0, #1
 8004c40:	d09b      	beq.n	8004b7a <_printf_i+0x166>
 8004c42:	3501      	adds	r5, #1
 8004c44:	68e3      	ldr	r3, [r4, #12]
 8004c46:	9903      	ldr	r1, [sp, #12]
 8004c48:	1a5b      	subs	r3, r3, r1
 8004c4a:	42ab      	cmp	r3, r5
 8004c4c:	dcf2      	bgt.n	8004c34 <_printf_i+0x220>
 8004c4e:	e7eb      	b.n	8004c28 <_printf_i+0x214>
 8004c50:	2500      	movs	r5, #0
 8004c52:	f104 0619 	add.w	r6, r4, #25
 8004c56:	e7f5      	b.n	8004c44 <_printf_i+0x230>
 8004c58:	08009bd2 	.word	0x08009bd2
 8004c5c:	08009be3 	.word	0x08009be3

08004c60 <_scanf_float>:
 8004c60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c64:	b087      	sub	sp, #28
 8004c66:	9303      	str	r3, [sp, #12]
 8004c68:	688b      	ldr	r3, [r1, #8]
 8004c6a:	4617      	mov	r7, r2
 8004c6c:	1e5a      	subs	r2, r3, #1
 8004c6e:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8004c72:	bf85      	ittet	hi
 8004c74:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8004c78:	195b      	addhi	r3, r3, r5
 8004c7a:	2300      	movls	r3, #0
 8004c7c:	9302      	strhi	r3, [sp, #8]
 8004c7e:	bf88      	it	hi
 8004c80:	f240 135d 	movwhi	r3, #349	; 0x15d
 8004c84:	468b      	mov	fp, r1
 8004c86:	f04f 0500 	mov.w	r5, #0
 8004c8a:	bf8c      	ite	hi
 8004c8c:	608b      	strhi	r3, [r1, #8]
 8004c8e:	9302      	strls	r3, [sp, #8]
 8004c90:	680b      	ldr	r3, [r1, #0]
 8004c92:	4680      	mov	r8, r0
 8004c94:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8004c98:	f84b 3b1c 	str.w	r3, [fp], #28
 8004c9c:	460c      	mov	r4, r1
 8004c9e:	465e      	mov	r6, fp
 8004ca0:	46aa      	mov	sl, r5
 8004ca2:	46a9      	mov	r9, r5
 8004ca4:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8004ca8:	9501      	str	r5, [sp, #4]
 8004caa:	68a2      	ldr	r2, [r4, #8]
 8004cac:	b152      	cbz	r2, 8004cc4 <_scanf_float+0x64>
 8004cae:	683b      	ldr	r3, [r7, #0]
 8004cb0:	781b      	ldrb	r3, [r3, #0]
 8004cb2:	2b4e      	cmp	r3, #78	; 0x4e
 8004cb4:	d864      	bhi.n	8004d80 <_scanf_float+0x120>
 8004cb6:	2b40      	cmp	r3, #64	; 0x40
 8004cb8:	d83c      	bhi.n	8004d34 <_scanf_float+0xd4>
 8004cba:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8004cbe:	b2c8      	uxtb	r0, r1
 8004cc0:	280e      	cmp	r0, #14
 8004cc2:	d93a      	bls.n	8004d3a <_scanf_float+0xda>
 8004cc4:	f1b9 0f00 	cmp.w	r9, #0
 8004cc8:	d003      	beq.n	8004cd2 <_scanf_float+0x72>
 8004cca:	6823      	ldr	r3, [r4, #0]
 8004ccc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004cd0:	6023      	str	r3, [r4, #0]
 8004cd2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004cd6:	f1ba 0f01 	cmp.w	sl, #1
 8004cda:	f200 8113 	bhi.w	8004f04 <_scanf_float+0x2a4>
 8004cde:	455e      	cmp	r6, fp
 8004ce0:	f200 8105 	bhi.w	8004eee <_scanf_float+0x28e>
 8004ce4:	2501      	movs	r5, #1
 8004ce6:	4628      	mov	r0, r5
 8004ce8:	b007      	add	sp, #28
 8004cea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004cee:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8004cf2:	2a0d      	cmp	r2, #13
 8004cf4:	d8e6      	bhi.n	8004cc4 <_scanf_float+0x64>
 8004cf6:	a101      	add	r1, pc, #4	; (adr r1, 8004cfc <_scanf_float+0x9c>)
 8004cf8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8004cfc:	08004e3b 	.word	0x08004e3b
 8004d00:	08004cc5 	.word	0x08004cc5
 8004d04:	08004cc5 	.word	0x08004cc5
 8004d08:	08004cc5 	.word	0x08004cc5
 8004d0c:	08004e9b 	.word	0x08004e9b
 8004d10:	08004e73 	.word	0x08004e73
 8004d14:	08004cc5 	.word	0x08004cc5
 8004d18:	08004cc5 	.word	0x08004cc5
 8004d1c:	08004e49 	.word	0x08004e49
 8004d20:	08004cc5 	.word	0x08004cc5
 8004d24:	08004cc5 	.word	0x08004cc5
 8004d28:	08004cc5 	.word	0x08004cc5
 8004d2c:	08004cc5 	.word	0x08004cc5
 8004d30:	08004e01 	.word	0x08004e01
 8004d34:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8004d38:	e7db      	b.n	8004cf2 <_scanf_float+0x92>
 8004d3a:	290e      	cmp	r1, #14
 8004d3c:	d8c2      	bhi.n	8004cc4 <_scanf_float+0x64>
 8004d3e:	a001      	add	r0, pc, #4	; (adr r0, 8004d44 <_scanf_float+0xe4>)
 8004d40:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8004d44:	08004df3 	.word	0x08004df3
 8004d48:	08004cc5 	.word	0x08004cc5
 8004d4c:	08004df3 	.word	0x08004df3
 8004d50:	08004e87 	.word	0x08004e87
 8004d54:	08004cc5 	.word	0x08004cc5
 8004d58:	08004da1 	.word	0x08004da1
 8004d5c:	08004ddd 	.word	0x08004ddd
 8004d60:	08004ddd 	.word	0x08004ddd
 8004d64:	08004ddd 	.word	0x08004ddd
 8004d68:	08004ddd 	.word	0x08004ddd
 8004d6c:	08004ddd 	.word	0x08004ddd
 8004d70:	08004ddd 	.word	0x08004ddd
 8004d74:	08004ddd 	.word	0x08004ddd
 8004d78:	08004ddd 	.word	0x08004ddd
 8004d7c:	08004ddd 	.word	0x08004ddd
 8004d80:	2b6e      	cmp	r3, #110	; 0x6e
 8004d82:	d809      	bhi.n	8004d98 <_scanf_float+0x138>
 8004d84:	2b60      	cmp	r3, #96	; 0x60
 8004d86:	d8b2      	bhi.n	8004cee <_scanf_float+0x8e>
 8004d88:	2b54      	cmp	r3, #84	; 0x54
 8004d8a:	d077      	beq.n	8004e7c <_scanf_float+0x21c>
 8004d8c:	2b59      	cmp	r3, #89	; 0x59
 8004d8e:	d199      	bne.n	8004cc4 <_scanf_float+0x64>
 8004d90:	2d07      	cmp	r5, #7
 8004d92:	d197      	bne.n	8004cc4 <_scanf_float+0x64>
 8004d94:	2508      	movs	r5, #8
 8004d96:	e029      	b.n	8004dec <_scanf_float+0x18c>
 8004d98:	2b74      	cmp	r3, #116	; 0x74
 8004d9a:	d06f      	beq.n	8004e7c <_scanf_float+0x21c>
 8004d9c:	2b79      	cmp	r3, #121	; 0x79
 8004d9e:	e7f6      	b.n	8004d8e <_scanf_float+0x12e>
 8004da0:	6821      	ldr	r1, [r4, #0]
 8004da2:	05c8      	lsls	r0, r1, #23
 8004da4:	d51a      	bpl.n	8004ddc <_scanf_float+0x17c>
 8004da6:	9b02      	ldr	r3, [sp, #8]
 8004da8:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8004dac:	6021      	str	r1, [r4, #0]
 8004dae:	f109 0901 	add.w	r9, r9, #1
 8004db2:	b11b      	cbz	r3, 8004dbc <_scanf_float+0x15c>
 8004db4:	3b01      	subs	r3, #1
 8004db6:	3201      	adds	r2, #1
 8004db8:	9302      	str	r3, [sp, #8]
 8004dba:	60a2      	str	r2, [r4, #8]
 8004dbc:	68a3      	ldr	r3, [r4, #8]
 8004dbe:	3b01      	subs	r3, #1
 8004dc0:	60a3      	str	r3, [r4, #8]
 8004dc2:	6923      	ldr	r3, [r4, #16]
 8004dc4:	3301      	adds	r3, #1
 8004dc6:	6123      	str	r3, [r4, #16]
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	3b01      	subs	r3, #1
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	607b      	str	r3, [r7, #4]
 8004dd0:	f340 8084 	ble.w	8004edc <_scanf_float+0x27c>
 8004dd4:	683b      	ldr	r3, [r7, #0]
 8004dd6:	3301      	adds	r3, #1
 8004dd8:	603b      	str	r3, [r7, #0]
 8004dda:	e766      	b.n	8004caa <_scanf_float+0x4a>
 8004ddc:	eb1a 0f05 	cmn.w	sl, r5
 8004de0:	f47f af70 	bne.w	8004cc4 <_scanf_float+0x64>
 8004de4:	6822      	ldr	r2, [r4, #0]
 8004de6:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8004dea:	6022      	str	r2, [r4, #0]
 8004dec:	f806 3b01 	strb.w	r3, [r6], #1
 8004df0:	e7e4      	b.n	8004dbc <_scanf_float+0x15c>
 8004df2:	6822      	ldr	r2, [r4, #0]
 8004df4:	0610      	lsls	r0, r2, #24
 8004df6:	f57f af65 	bpl.w	8004cc4 <_scanf_float+0x64>
 8004dfa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004dfe:	e7f4      	b.n	8004dea <_scanf_float+0x18a>
 8004e00:	f1ba 0f00 	cmp.w	sl, #0
 8004e04:	d10e      	bne.n	8004e24 <_scanf_float+0x1c4>
 8004e06:	f1b9 0f00 	cmp.w	r9, #0
 8004e0a:	d10e      	bne.n	8004e2a <_scanf_float+0x1ca>
 8004e0c:	6822      	ldr	r2, [r4, #0]
 8004e0e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8004e12:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8004e16:	d108      	bne.n	8004e2a <_scanf_float+0x1ca>
 8004e18:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8004e1c:	f04f 0a01 	mov.w	sl, #1
 8004e20:	6022      	str	r2, [r4, #0]
 8004e22:	e7e3      	b.n	8004dec <_scanf_float+0x18c>
 8004e24:	f1ba 0f02 	cmp.w	sl, #2
 8004e28:	d055      	beq.n	8004ed6 <_scanf_float+0x276>
 8004e2a:	2d01      	cmp	r5, #1
 8004e2c:	d002      	beq.n	8004e34 <_scanf_float+0x1d4>
 8004e2e:	2d04      	cmp	r5, #4
 8004e30:	f47f af48 	bne.w	8004cc4 <_scanf_float+0x64>
 8004e34:	3501      	adds	r5, #1
 8004e36:	b2ed      	uxtb	r5, r5
 8004e38:	e7d8      	b.n	8004dec <_scanf_float+0x18c>
 8004e3a:	f1ba 0f01 	cmp.w	sl, #1
 8004e3e:	f47f af41 	bne.w	8004cc4 <_scanf_float+0x64>
 8004e42:	f04f 0a02 	mov.w	sl, #2
 8004e46:	e7d1      	b.n	8004dec <_scanf_float+0x18c>
 8004e48:	b97d      	cbnz	r5, 8004e6a <_scanf_float+0x20a>
 8004e4a:	f1b9 0f00 	cmp.w	r9, #0
 8004e4e:	f47f af3c 	bne.w	8004cca <_scanf_float+0x6a>
 8004e52:	6822      	ldr	r2, [r4, #0]
 8004e54:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8004e58:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8004e5c:	f47f af39 	bne.w	8004cd2 <_scanf_float+0x72>
 8004e60:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8004e64:	2501      	movs	r5, #1
 8004e66:	6022      	str	r2, [r4, #0]
 8004e68:	e7c0      	b.n	8004dec <_scanf_float+0x18c>
 8004e6a:	2d03      	cmp	r5, #3
 8004e6c:	d0e2      	beq.n	8004e34 <_scanf_float+0x1d4>
 8004e6e:	2d05      	cmp	r5, #5
 8004e70:	e7de      	b.n	8004e30 <_scanf_float+0x1d0>
 8004e72:	2d02      	cmp	r5, #2
 8004e74:	f47f af26 	bne.w	8004cc4 <_scanf_float+0x64>
 8004e78:	2503      	movs	r5, #3
 8004e7a:	e7b7      	b.n	8004dec <_scanf_float+0x18c>
 8004e7c:	2d06      	cmp	r5, #6
 8004e7e:	f47f af21 	bne.w	8004cc4 <_scanf_float+0x64>
 8004e82:	2507      	movs	r5, #7
 8004e84:	e7b2      	b.n	8004dec <_scanf_float+0x18c>
 8004e86:	6822      	ldr	r2, [r4, #0]
 8004e88:	0591      	lsls	r1, r2, #22
 8004e8a:	f57f af1b 	bpl.w	8004cc4 <_scanf_float+0x64>
 8004e8e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8004e92:	6022      	str	r2, [r4, #0]
 8004e94:	f8cd 9004 	str.w	r9, [sp, #4]
 8004e98:	e7a8      	b.n	8004dec <_scanf_float+0x18c>
 8004e9a:	6822      	ldr	r2, [r4, #0]
 8004e9c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8004ea0:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8004ea4:	d006      	beq.n	8004eb4 <_scanf_float+0x254>
 8004ea6:	0550      	lsls	r0, r2, #21
 8004ea8:	f57f af0c 	bpl.w	8004cc4 <_scanf_float+0x64>
 8004eac:	f1b9 0f00 	cmp.w	r9, #0
 8004eb0:	f43f af0f 	beq.w	8004cd2 <_scanf_float+0x72>
 8004eb4:	0591      	lsls	r1, r2, #22
 8004eb6:	bf58      	it	pl
 8004eb8:	9901      	ldrpl	r1, [sp, #4]
 8004eba:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8004ebe:	bf58      	it	pl
 8004ec0:	eba9 0101 	subpl.w	r1, r9, r1
 8004ec4:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8004ec8:	f04f 0900 	mov.w	r9, #0
 8004ecc:	bf58      	it	pl
 8004ece:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8004ed2:	6022      	str	r2, [r4, #0]
 8004ed4:	e78a      	b.n	8004dec <_scanf_float+0x18c>
 8004ed6:	f04f 0a03 	mov.w	sl, #3
 8004eda:	e787      	b.n	8004dec <_scanf_float+0x18c>
 8004edc:	4639      	mov	r1, r7
 8004ede:	4640      	mov	r0, r8
 8004ee0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8004ee4:	4798      	blx	r3
 8004ee6:	2800      	cmp	r0, #0
 8004ee8:	f43f aedf 	beq.w	8004caa <_scanf_float+0x4a>
 8004eec:	e6ea      	b.n	8004cc4 <_scanf_float+0x64>
 8004eee:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004ef2:	463a      	mov	r2, r7
 8004ef4:	4640      	mov	r0, r8
 8004ef6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004efa:	4798      	blx	r3
 8004efc:	6923      	ldr	r3, [r4, #16]
 8004efe:	3b01      	subs	r3, #1
 8004f00:	6123      	str	r3, [r4, #16]
 8004f02:	e6ec      	b.n	8004cde <_scanf_float+0x7e>
 8004f04:	1e6b      	subs	r3, r5, #1
 8004f06:	2b06      	cmp	r3, #6
 8004f08:	d825      	bhi.n	8004f56 <_scanf_float+0x2f6>
 8004f0a:	2d02      	cmp	r5, #2
 8004f0c:	d836      	bhi.n	8004f7c <_scanf_float+0x31c>
 8004f0e:	455e      	cmp	r6, fp
 8004f10:	f67f aee8 	bls.w	8004ce4 <_scanf_float+0x84>
 8004f14:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004f18:	463a      	mov	r2, r7
 8004f1a:	4640      	mov	r0, r8
 8004f1c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004f20:	4798      	blx	r3
 8004f22:	6923      	ldr	r3, [r4, #16]
 8004f24:	3b01      	subs	r3, #1
 8004f26:	6123      	str	r3, [r4, #16]
 8004f28:	e7f1      	b.n	8004f0e <_scanf_float+0x2ae>
 8004f2a:	9802      	ldr	r0, [sp, #8]
 8004f2c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004f30:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8004f34:	463a      	mov	r2, r7
 8004f36:	9002      	str	r0, [sp, #8]
 8004f38:	4640      	mov	r0, r8
 8004f3a:	4798      	blx	r3
 8004f3c:	6923      	ldr	r3, [r4, #16]
 8004f3e:	3b01      	subs	r3, #1
 8004f40:	6123      	str	r3, [r4, #16]
 8004f42:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004f46:	fa5f fa8a 	uxtb.w	sl, sl
 8004f4a:	f1ba 0f02 	cmp.w	sl, #2
 8004f4e:	d1ec      	bne.n	8004f2a <_scanf_float+0x2ca>
 8004f50:	3d03      	subs	r5, #3
 8004f52:	b2ed      	uxtb	r5, r5
 8004f54:	1b76      	subs	r6, r6, r5
 8004f56:	6823      	ldr	r3, [r4, #0]
 8004f58:	05da      	lsls	r2, r3, #23
 8004f5a:	d52f      	bpl.n	8004fbc <_scanf_float+0x35c>
 8004f5c:	055b      	lsls	r3, r3, #21
 8004f5e:	d510      	bpl.n	8004f82 <_scanf_float+0x322>
 8004f60:	455e      	cmp	r6, fp
 8004f62:	f67f aebf 	bls.w	8004ce4 <_scanf_float+0x84>
 8004f66:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004f6a:	463a      	mov	r2, r7
 8004f6c:	4640      	mov	r0, r8
 8004f6e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004f72:	4798      	blx	r3
 8004f74:	6923      	ldr	r3, [r4, #16]
 8004f76:	3b01      	subs	r3, #1
 8004f78:	6123      	str	r3, [r4, #16]
 8004f7a:	e7f1      	b.n	8004f60 <_scanf_float+0x300>
 8004f7c:	46aa      	mov	sl, r5
 8004f7e:	9602      	str	r6, [sp, #8]
 8004f80:	e7df      	b.n	8004f42 <_scanf_float+0x2e2>
 8004f82:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8004f86:	6923      	ldr	r3, [r4, #16]
 8004f88:	2965      	cmp	r1, #101	; 0x65
 8004f8a:	f103 33ff 	add.w	r3, r3, #4294967295
 8004f8e:	f106 35ff 	add.w	r5, r6, #4294967295
 8004f92:	6123      	str	r3, [r4, #16]
 8004f94:	d00c      	beq.n	8004fb0 <_scanf_float+0x350>
 8004f96:	2945      	cmp	r1, #69	; 0x45
 8004f98:	d00a      	beq.n	8004fb0 <_scanf_float+0x350>
 8004f9a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004f9e:	463a      	mov	r2, r7
 8004fa0:	4640      	mov	r0, r8
 8004fa2:	4798      	blx	r3
 8004fa4:	6923      	ldr	r3, [r4, #16]
 8004fa6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8004faa:	3b01      	subs	r3, #1
 8004fac:	1eb5      	subs	r5, r6, #2
 8004fae:	6123      	str	r3, [r4, #16]
 8004fb0:	463a      	mov	r2, r7
 8004fb2:	4640      	mov	r0, r8
 8004fb4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004fb8:	4798      	blx	r3
 8004fba:	462e      	mov	r6, r5
 8004fbc:	6825      	ldr	r5, [r4, #0]
 8004fbe:	f015 0510 	ands.w	r5, r5, #16
 8004fc2:	d155      	bne.n	8005070 <_scanf_float+0x410>
 8004fc4:	7035      	strb	r5, [r6, #0]
 8004fc6:	6823      	ldr	r3, [r4, #0]
 8004fc8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004fcc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004fd0:	d11b      	bne.n	800500a <_scanf_float+0x3aa>
 8004fd2:	9b01      	ldr	r3, [sp, #4]
 8004fd4:	454b      	cmp	r3, r9
 8004fd6:	eba3 0209 	sub.w	r2, r3, r9
 8004fda:	d123      	bne.n	8005024 <_scanf_float+0x3c4>
 8004fdc:	2200      	movs	r2, #0
 8004fde:	4659      	mov	r1, fp
 8004fe0:	4640      	mov	r0, r8
 8004fe2:	f000 fe89 	bl	8005cf8 <_strtod_r>
 8004fe6:	6822      	ldr	r2, [r4, #0]
 8004fe8:	9b03      	ldr	r3, [sp, #12]
 8004fea:	f012 0f02 	tst.w	r2, #2
 8004fee:	4606      	mov	r6, r0
 8004ff0:	460f      	mov	r7, r1
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	d021      	beq.n	800503a <_scanf_float+0x3da>
 8004ff6:	1d1a      	adds	r2, r3, #4
 8004ff8:	9903      	ldr	r1, [sp, #12]
 8004ffa:	600a      	str	r2, [r1, #0]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	e9c3 6700 	strd	r6, r7, [r3]
 8005002:	68e3      	ldr	r3, [r4, #12]
 8005004:	3301      	adds	r3, #1
 8005006:	60e3      	str	r3, [r4, #12]
 8005008:	e66d      	b.n	8004ce6 <_scanf_float+0x86>
 800500a:	9b04      	ldr	r3, [sp, #16]
 800500c:	2b00      	cmp	r3, #0
 800500e:	d0e5      	beq.n	8004fdc <_scanf_float+0x37c>
 8005010:	9905      	ldr	r1, [sp, #20]
 8005012:	230a      	movs	r3, #10
 8005014:	462a      	mov	r2, r5
 8005016:	4640      	mov	r0, r8
 8005018:	3101      	adds	r1, #1
 800501a:	f000 feef 	bl	8005dfc <_strtol_r>
 800501e:	9b04      	ldr	r3, [sp, #16]
 8005020:	9e05      	ldr	r6, [sp, #20]
 8005022:	1ac2      	subs	r2, r0, r3
 8005024:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8005028:	429e      	cmp	r6, r3
 800502a:	bf28      	it	cs
 800502c:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8005030:	4630      	mov	r0, r6
 8005032:	4910      	ldr	r1, [pc, #64]	; (8005074 <_scanf_float+0x414>)
 8005034:	f000 f826 	bl	8005084 <siprintf>
 8005038:	e7d0      	b.n	8004fdc <_scanf_float+0x37c>
 800503a:	f012 0f04 	tst.w	r2, #4
 800503e:	f103 0204 	add.w	r2, r3, #4
 8005042:	d1d9      	bne.n	8004ff8 <_scanf_float+0x398>
 8005044:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8005048:	f8cc 2000 	str.w	r2, [ip]
 800504c:	f8d3 8000 	ldr.w	r8, [r3]
 8005050:	4602      	mov	r2, r0
 8005052:	460b      	mov	r3, r1
 8005054:	f7fb fcda 	bl	8000a0c <__aeabi_dcmpun>
 8005058:	b128      	cbz	r0, 8005066 <_scanf_float+0x406>
 800505a:	4807      	ldr	r0, [pc, #28]	; (8005078 <_scanf_float+0x418>)
 800505c:	f000 f80e 	bl	800507c <nanf>
 8005060:	f8c8 0000 	str.w	r0, [r8]
 8005064:	e7cd      	b.n	8005002 <_scanf_float+0x3a2>
 8005066:	4630      	mov	r0, r6
 8005068:	4639      	mov	r1, r7
 800506a:	f7fb fd2d 	bl	8000ac8 <__aeabi_d2f>
 800506e:	e7f7      	b.n	8005060 <_scanf_float+0x400>
 8005070:	2500      	movs	r5, #0
 8005072:	e638      	b.n	8004ce6 <_scanf_float+0x86>
 8005074:	08009bf4 	.word	0x08009bf4
 8005078:	0800a000 	.word	0x0800a000

0800507c <nanf>:
 800507c:	4800      	ldr	r0, [pc, #0]	; (8005080 <nanf+0x4>)
 800507e:	4770      	bx	lr
 8005080:	7fc00000 	.word	0x7fc00000

08005084 <siprintf>:
 8005084:	b40e      	push	{r1, r2, r3}
 8005086:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800508a:	b500      	push	{lr}
 800508c:	b09c      	sub	sp, #112	; 0x70
 800508e:	ab1d      	add	r3, sp, #116	; 0x74
 8005090:	9002      	str	r0, [sp, #8]
 8005092:	9006      	str	r0, [sp, #24]
 8005094:	9107      	str	r1, [sp, #28]
 8005096:	9104      	str	r1, [sp, #16]
 8005098:	4808      	ldr	r0, [pc, #32]	; (80050bc <siprintf+0x38>)
 800509a:	4909      	ldr	r1, [pc, #36]	; (80050c0 <siprintf+0x3c>)
 800509c:	f853 2b04 	ldr.w	r2, [r3], #4
 80050a0:	9105      	str	r1, [sp, #20]
 80050a2:	6800      	ldr	r0, [r0, #0]
 80050a4:	a902      	add	r1, sp, #8
 80050a6:	9301      	str	r3, [sp, #4]
 80050a8:	f002 fec8 	bl	8007e3c <_svfiprintf_r>
 80050ac:	2200      	movs	r2, #0
 80050ae:	9b02      	ldr	r3, [sp, #8]
 80050b0:	701a      	strb	r2, [r3, #0]
 80050b2:	b01c      	add	sp, #112	; 0x70
 80050b4:	f85d eb04 	ldr.w	lr, [sp], #4
 80050b8:	b003      	add	sp, #12
 80050ba:	4770      	bx	lr
 80050bc:	20000014 	.word	0x20000014
 80050c0:	ffff0208 	.word	0xffff0208

080050c4 <strcat>:
 80050c4:	4602      	mov	r2, r0
 80050c6:	b510      	push	{r4, lr}
 80050c8:	7814      	ldrb	r4, [r2, #0]
 80050ca:	4613      	mov	r3, r2
 80050cc:	3201      	adds	r2, #1
 80050ce:	2c00      	cmp	r4, #0
 80050d0:	d1fa      	bne.n	80050c8 <strcat+0x4>
 80050d2:	3b01      	subs	r3, #1
 80050d4:	f811 2b01 	ldrb.w	r2, [r1], #1
 80050d8:	f803 2f01 	strb.w	r2, [r3, #1]!
 80050dc:	2a00      	cmp	r2, #0
 80050de:	d1f9      	bne.n	80050d4 <strcat+0x10>
 80050e0:	bd10      	pop	{r4, pc}

080050e2 <sulp>:
 80050e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80050e6:	460f      	mov	r7, r1
 80050e8:	4690      	mov	r8, r2
 80050ea:	f002 fc13 	bl	8007914 <__ulp>
 80050ee:	4604      	mov	r4, r0
 80050f0:	460d      	mov	r5, r1
 80050f2:	f1b8 0f00 	cmp.w	r8, #0
 80050f6:	d011      	beq.n	800511c <sulp+0x3a>
 80050f8:	f3c7 530a 	ubfx	r3, r7, #20, #11
 80050fc:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8005100:	2b00      	cmp	r3, #0
 8005102:	dd0b      	ble.n	800511c <sulp+0x3a>
 8005104:	2400      	movs	r4, #0
 8005106:	051b      	lsls	r3, r3, #20
 8005108:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800510c:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8005110:	4622      	mov	r2, r4
 8005112:	462b      	mov	r3, r5
 8005114:	f7fb f9e0 	bl	80004d8 <__aeabi_dmul>
 8005118:	4604      	mov	r4, r0
 800511a:	460d      	mov	r5, r1
 800511c:	4620      	mov	r0, r4
 800511e:	4629      	mov	r1, r5
 8005120:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005124:	0000      	movs	r0, r0
	...

08005128 <_strtod_l>:
 8005128:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800512c:	469b      	mov	fp, r3
 800512e:	2300      	movs	r3, #0
 8005130:	b09f      	sub	sp, #124	; 0x7c
 8005132:	931a      	str	r3, [sp, #104]	; 0x68
 8005134:	4b9e      	ldr	r3, [pc, #632]	; (80053b0 <_strtod_l+0x288>)
 8005136:	4682      	mov	sl, r0
 8005138:	681f      	ldr	r7, [r3, #0]
 800513a:	460e      	mov	r6, r1
 800513c:	4638      	mov	r0, r7
 800513e:	9215      	str	r2, [sp, #84]	; 0x54
 8005140:	f7fb f806 	bl	8000150 <strlen>
 8005144:	f04f 0800 	mov.w	r8, #0
 8005148:	4604      	mov	r4, r0
 800514a:	f04f 0900 	mov.w	r9, #0
 800514e:	9619      	str	r6, [sp, #100]	; 0x64
 8005150:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005152:	781a      	ldrb	r2, [r3, #0]
 8005154:	2a2b      	cmp	r2, #43	; 0x2b
 8005156:	d04c      	beq.n	80051f2 <_strtod_l+0xca>
 8005158:	d83a      	bhi.n	80051d0 <_strtod_l+0xa8>
 800515a:	2a0d      	cmp	r2, #13
 800515c:	d833      	bhi.n	80051c6 <_strtod_l+0x9e>
 800515e:	2a08      	cmp	r2, #8
 8005160:	d833      	bhi.n	80051ca <_strtod_l+0xa2>
 8005162:	2a00      	cmp	r2, #0
 8005164:	d03d      	beq.n	80051e2 <_strtod_l+0xba>
 8005166:	2300      	movs	r3, #0
 8005168:	930a      	str	r3, [sp, #40]	; 0x28
 800516a:	9d19      	ldr	r5, [sp, #100]	; 0x64
 800516c:	782b      	ldrb	r3, [r5, #0]
 800516e:	2b30      	cmp	r3, #48	; 0x30
 8005170:	f040 80aa 	bne.w	80052c8 <_strtod_l+0x1a0>
 8005174:	786b      	ldrb	r3, [r5, #1]
 8005176:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800517a:	2b58      	cmp	r3, #88	; 0x58
 800517c:	d166      	bne.n	800524c <_strtod_l+0x124>
 800517e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005180:	4650      	mov	r0, sl
 8005182:	9301      	str	r3, [sp, #4]
 8005184:	ab1a      	add	r3, sp, #104	; 0x68
 8005186:	9300      	str	r3, [sp, #0]
 8005188:	4a8a      	ldr	r2, [pc, #552]	; (80053b4 <_strtod_l+0x28c>)
 800518a:	f8cd b008 	str.w	fp, [sp, #8]
 800518e:	ab1b      	add	r3, sp, #108	; 0x6c
 8005190:	a919      	add	r1, sp, #100	; 0x64
 8005192:	f001 fd17 	bl	8006bc4 <__gethex>
 8005196:	f010 0607 	ands.w	r6, r0, #7
 800519a:	4604      	mov	r4, r0
 800519c:	d005      	beq.n	80051aa <_strtod_l+0x82>
 800519e:	2e06      	cmp	r6, #6
 80051a0:	d129      	bne.n	80051f6 <_strtod_l+0xce>
 80051a2:	2300      	movs	r3, #0
 80051a4:	3501      	adds	r5, #1
 80051a6:	9519      	str	r5, [sp, #100]	; 0x64
 80051a8:	930a      	str	r3, [sp, #40]	; 0x28
 80051aa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	f040 858a 	bne.w	8005cc6 <_strtod_l+0xb9e>
 80051b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80051b4:	b1d3      	cbz	r3, 80051ec <_strtod_l+0xc4>
 80051b6:	4642      	mov	r2, r8
 80051b8:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80051bc:	4610      	mov	r0, r2
 80051be:	4619      	mov	r1, r3
 80051c0:	b01f      	add	sp, #124	; 0x7c
 80051c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80051c6:	2a20      	cmp	r2, #32
 80051c8:	d1cd      	bne.n	8005166 <_strtod_l+0x3e>
 80051ca:	3301      	adds	r3, #1
 80051cc:	9319      	str	r3, [sp, #100]	; 0x64
 80051ce:	e7bf      	b.n	8005150 <_strtod_l+0x28>
 80051d0:	2a2d      	cmp	r2, #45	; 0x2d
 80051d2:	d1c8      	bne.n	8005166 <_strtod_l+0x3e>
 80051d4:	2201      	movs	r2, #1
 80051d6:	920a      	str	r2, [sp, #40]	; 0x28
 80051d8:	1c5a      	adds	r2, r3, #1
 80051da:	9219      	str	r2, [sp, #100]	; 0x64
 80051dc:	785b      	ldrb	r3, [r3, #1]
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d1c3      	bne.n	800516a <_strtod_l+0x42>
 80051e2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80051e4:	9619      	str	r6, [sp, #100]	; 0x64
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	f040 856b 	bne.w	8005cc2 <_strtod_l+0xb9a>
 80051ec:	4642      	mov	r2, r8
 80051ee:	464b      	mov	r3, r9
 80051f0:	e7e4      	b.n	80051bc <_strtod_l+0x94>
 80051f2:	2200      	movs	r2, #0
 80051f4:	e7ef      	b.n	80051d6 <_strtod_l+0xae>
 80051f6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80051f8:	b13a      	cbz	r2, 800520a <_strtod_l+0xe2>
 80051fa:	2135      	movs	r1, #53	; 0x35
 80051fc:	a81c      	add	r0, sp, #112	; 0x70
 80051fe:	f002 fc8d 	bl	8007b1c <__copybits>
 8005202:	4650      	mov	r0, sl
 8005204:	991a      	ldr	r1, [sp, #104]	; 0x68
 8005206:	f002 f855 	bl	80072b4 <_Bfree>
 800520a:	3e01      	subs	r6, #1
 800520c:	2e04      	cmp	r6, #4
 800520e:	d806      	bhi.n	800521e <_strtod_l+0xf6>
 8005210:	e8df f006 	tbb	[pc, r6]
 8005214:	1714030a 	.word	0x1714030a
 8005218:	0a          	.byte	0x0a
 8005219:	00          	.byte	0x00
 800521a:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 800521e:	0721      	lsls	r1, r4, #28
 8005220:	d5c3      	bpl.n	80051aa <_strtod_l+0x82>
 8005222:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 8005226:	e7c0      	b.n	80051aa <_strtod_l+0x82>
 8005228:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800522a:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 800522e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8005232:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8005236:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800523a:	e7f0      	b.n	800521e <_strtod_l+0xf6>
 800523c:	f8df 9178 	ldr.w	r9, [pc, #376]	; 80053b8 <_strtod_l+0x290>
 8005240:	e7ed      	b.n	800521e <_strtod_l+0xf6>
 8005242:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8005246:	f04f 38ff 	mov.w	r8, #4294967295
 800524a:	e7e8      	b.n	800521e <_strtod_l+0xf6>
 800524c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800524e:	1c5a      	adds	r2, r3, #1
 8005250:	9219      	str	r2, [sp, #100]	; 0x64
 8005252:	785b      	ldrb	r3, [r3, #1]
 8005254:	2b30      	cmp	r3, #48	; 0x30
 8005256:	d0f9      	beq.n	800524c <_strtod_l+0x124>
 8005258:	2b00      	cmp	r3, #0
 800525a:	d0a6      	beq.n	80051aa <_strtod_l+0x82>
 800525c:	2301      	movs	r3, #1
 800525e:	9307      	str	r3, [sp, #28]
 8005260:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005262:	220a      	movs	r2, #10
 8005264:	9308      	str	r3, [sp, #32]
 8005266:	2300      	movs	r3, #0
 8005268:	469b      	mov	fp, r3
 800526a:	e9cd 3305 	strd	r3, r3, [sp, #20]
 800526e:	9819      	ldr	r0, [sp, #100]	; 0x64
 8005270:	7805      	ldrb	r5, [r0, #0]
 8005272:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 8005276:	b2d9      	uxtb	r1, r3
 8005278:	2909      	cmp	r1, #9
 800527a:	d927      	bls.n	80052cc <_strtod_l+0x1a4>
 800527c:	4622      	mov	r2, r4
 800527e:	4639      	mov	r1, r7
 8005280:	f002 fef2 	bl	8008068 <strncmp>
 8005284:	2800      	cmp	r0, #0
 8005286:	d033      	beq.n	80052f0 <_strtod_l+0x1c8>
 8005288:	2000      	movs	r0, #0
 800528a:	462a      	mov	r2, r5
 800528c:	465c      	mov	r4, fp
 800528e:	4603      	mov	r3, r0
 8005290:	9004      	str	r0, [sp, #16]
 8005292:	2a65      	cmp	r2, #101	; 0x65
 8005294:	d001      	beq.n	800529a <_strtod_l+0x172>
 8005296:	2a45      	cmp	r2, #69	; 0x45
 8005298:	d114      	bne.n	80052c4 <_strtod_l+0x19c>
 800529a:	b91c      	cbnz	r4, 80052a4 <_strtod_l+0x17c>
 800529c:	9a07      	ldr	r2, [sp, #28]
 800529e:	4302      	orrs	r2, r0
 80052a0:	d09f      	beq.n	80051e2 <_strtod_l+0xba>
 80052a2:	2400      	movs	r4, #0
 80052a4:	9e19      	ldr	r6, [sp, #100]	; 0x64
 80052a6:	1c72      	adds	r2, r6, #1
 80052a8:	9219      	str	r2, [sp, #100]	; 0x64
 80052aa:	7872      	ldrb	r2, [r6, #1]
 80052ac:	2a2b      	cmp	r2, #43	; 0x2b
 80052ae:	d079      	beq.n	80053a4 <_strtod_l+0x27c>
 80052b0:	2a2d      	cmp	r2, #45	; 0x2d
 80052b2:	f000 8083 	beq.w	80053bc <_strtod_l+0x294>
 80052b6:	2700      	movs	r7, #0
 80052b8:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80052bc:	2909      	cmp	r1, #9
 80052be:	f240 8083 	bls.w	80053c8 <_strtod_l+0x2a0>
 80052c2:	9619      	str	r6, [sp, #100]	; 0x64
 80052c4:	2500      	movs	r5, #0
 80052c6:	e09f      	b.n	8005408 <_strtod_l+0x2e0>
 80052c8:	2300      	movs	r3, #0
 80052ca:	e7c8      	b.n	800525e <_strtod_l+0x136>
 80052cc:	f1bb 0f08 	cmp.w	fp, #8
 80052d0:	bfd5      	itete	le
 80052d2:	9906      	ldrle	r1, [sp, #24]
 80052d4:	9905      	ldrgt	r1, [sp, #20]
 80052d6:	fb02 3301 	mlale	r3, r2, r1, r3
 80052da:	fb02 3301 	mlagt	r3, r2, r1, r3
 80052de:	f100 0001 	add.w	r0, r0, #1
 80052e2:	bfd4      	ite	le
 80052e4:	9306      	strle	r3, [sp, #24]
 80052e6:	9305      	strgt	r3, [sp, #20]
 80052e8:	f10b 0b01 	add.w	fp, fp, #1
 80052ec:	9019      	str	r0, [sp, #100]	; 0x64
 80052ee:	e7be      	b.n	800526e <_strtod_l+0x146>
 80052f0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80052f2:	191a      	adds	r2, r3, r4
 80052f4:	9219      	str	r2, [sp, #100]	; 0x64
 80052f6:	5d1a      	ldrb	r2, [r3, r4]
 80052f8:	f1bb 0f00 	cmp.w	fp, #0
 80052fc:	d036      	beq.n	800536c <_strtod_l+0x244>
 80052fe:	465c      	mov	r4, fp
 8005300:	9004      	str	r0, [sp, #16]
 8005302:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8005306:	2b09      	cmp	r3, #9
 8005308:	d912      	bls.n	8005330 <_strtod_l+0x208>
 800530a:	2301      	movs	r3, #1
 800530c:	e7c1      	b.n	8005292 <_strtod_l+0x16a>
 800530e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005310:	3001      	adds	r0, #1
 8005312:	1c5a      	adds	r2, r3, #1
 8005314:	9219      	str	r2, [sp, #100]	; 0x64
 8005316:	785a      	ldrb	r2, [r3, #1]
 8005318:	2a30      	cmp	r2, #48	; 0x30
 800531a:	d0f8      	beq.n	800530e <_strtod_l+0x1e6>
 800531c:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8005320:	2b08      	cmp	r3, #8
 8005322:	f200 84d5 	bhi.w	8005cd0 <_strtod_l+0xba8>
 8005326:	9004      	str	r0, [sp, #16]
 8005328:	2000      	movs	r0, #0
 800532a:	4604      	mov	r4, r0
 800532c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800532e:	9308      	str	r3, [sp, #32]
 8005330:	3a30      	subs	r2, #48	; 0x30
 8005332:	f100 0301 	add.w	r3, r0, #1
 8005336:	d013      	beq.n	8005360 <_strtod_l+0x238>
 8005338:	9904      	ldr	r1, [sp, #16]
 800533a:	1905      	adds	r5, r0, r4
 800533c:	4419      	add	r1, r3
 800533e:	9104      	str	r1, [sp, #16]
 8005340:	4623      	mov	r3, r4
 8005342:	210a      	movs	r1, #10
 8005344:	42ab      	cmp	r3, r5
 8005346:	d113      	bne.n	8005370 <_strtod_l+0x248>
 8005348:	1823      	adds	r3, r4, r0
 800534a:	2b08      	cmp	r3, #8
 800534c:	f104 0401 	add.w	r4, r4, #1
 8005350:	4404      	add	r4, r0
 8005352:	dc1b      	bgt.n	800538c <_strtod_l+0x264>
 8005354:	230a      	movs	r3, #10
 8005356:	9906      	ldr	r1, [sp, #24]
 8005358:	fb03 2301 	mla	r3, r3, r1, r2
 800535c:	9306      	str	r3, [sp, #24]
 800535e:	2300      	movs	r3, #0
 8005360:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8005362:	4618      	mov	r0, r3
 8005364:	1c51      	adds	r1, r2, #1
 8005366:	9119      	str	r1, [sp, #100]	; 0x64
 8005368:	7852      	ldrb	r2, [r2, #1]
 800536a:	e7ca      	b.n	8005302 <_strtod_l+0x1da>
 800536c:	4658      	mov	r0, fp
 800536e:	e7d3      	b.n	8005318 <_strtod_l+0x1f0>
 8005370:	2b08      	cmp	r3, #8
 8005372:	dc04      	bgt.n	800537e <_strtod_l+0x256>
 8005374:	9f06      	ldr	r7, [sp, #24]
 8005376:	434f      	muls	r7, r1
 8005378:	9706      	str	r7, [sp, #24]
 800537a:	3301      	adds	r3, #1
 800537c:	e7e2      	b.n	8005344 <_strtod_l+0x21c>
 800537e:	1c5f      	adds	r7, r3, #1
 8005380:	2f10      	cmp	r7, #16
 8005382:	bfde      	ittt	le
 8005384:	9f05      	ldrle	r7, [sp, #20]
 8005386:	434f      	mulle	r7, r1
 8005388:	9705      	strle	r7, [sp, #20]
 800538a:	e7f6      	b.n	800537a <_strtod_l+0x252>
 800538c:	2c10      	cmp	r4, #16
 800538e:	bfdf      	itttt	le
 8005390:	230a      	movle	r3, #10
 8005392:	9905      	ldrle	r1, [sp, #20]
 8005394:	fb03 2301 	mlale	r3, r3, r1, r2
 8005398:	9305      	strle	r3, [sp, #20]
 800539a:	e7e0      	b.n	800535e <_strtod_l+0x236>
 800539c:	2300      	movs	r3, #0
 800539e:	9304      	str	r3, [sp, #16]
 80053a0:	2301      	movs	r3, #1
 80053a2:	e77b      	b.n	800529c <_strtod_l+0x174>
 80053a4:	2700      	movs	r7, #0
 80053a6:	1cb2      	adds	r2, r6, #2
 80053a8:	9219      	str	r2, [sp, #100]	; 0x64
 80053aa:	78b2      	ldrb	r2, [r6, #2]
 80053ac:	e784      	b.n	80052b8 <_strtod_l+0x190>
 80053ae:	bf00      	nop
 80053b0:	08009e48 	.word	0x08009e48
 80053b4:	08009bfc 	.word	0x08009bfc
 80053b8:	7ff00000 	.word	0x7ff00000
 80053bc:	2701      	movs	r7, #1
 80053be:	e7f2      	b.n	80053a6 <_strtod_l+0x27e>
 80053c0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80053c2:	1c51      	adds	r1, r2, #1
 80053c4:	9119      	str	r1, [sp, #100]	; 0x64
 80053c6:	7852      	ldrb	r2, [r2, #1]
 80053c8:	2a30      	cmp	r2, #48	; 0x30
 80053ca:	d0f9      	beq.n	80053c0 <_strtod_l+0x298>
 80053cc:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 80053d0:	2908      	cmp	r1, #8
 80053d2:	f63f af77 	bhi.w	80052c4 <_strtod_l+0x19c>
 80053d6:	f04f 0e0a 	mov.w	lr, #10
 80053da:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 80053de:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80053e0:	9209      	str	r2, [sp, #36]	; 0x24
 80053e2:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80053e4:	1c51      	adds	r1, r2, #1
 80053e6:	9119      	str	r1, [sp, #100]	; 0x64
 80053e8:	7852      	ldrb	r2, [r2, #1]
 80053ea:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 80053ee:	2d09      	cmp	r5, #9
 80053f0:	d935      	bls.n	800545e <_strtod_l+0x336>
 80053f2:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80053f4:	1b49      	subs	r1, r1, r5
 80053f6:	2908      	cmp	r1, #8
 80053f8:	f644 651f 	movw	r5, #19999	; 0x4e1f
 80053fc:	dc02      	bgt.n	8005404 <_strtod_l+0x2dc>
 80053fe:	4565      	cmp	r5, ip
 8005400:	bfa8      	it	ge
 8005402:	4665      	movge	r5, ip
 8005404:	b107      	cbz	r7, 8005408 <_strtod_l+0x2e0>
 8005406:	426d      	negs	r5, r5
 8005408:	2c00      	cmp	r4, #0
 800540a:	d14c      	bne.n	80054a6 <_strtod_l+0x37e>
 800540c:	9907      	ldr	r1, [sp, #28]
 800540e:	4301      	orrs	r1, r0
 8005410:	f47f aecb 	bne.w	80051aa <_strtod_l+0x82>
 8005414:	2b00      	cmp	r3, #0
 8005416:	f47f aee4 	bne.w	80051e2 <_strtod_l+0xba>
 800541a:	2a69      	cmp	r2, #105	; 0x69
 800541c:	d026      	beq.n	800546c <_strtod_l+0x344>
 800541e:	dc23      	bgt.n	8005468 <_strtod_l+0x340>
 8005420:	2a49      	cmp	r2, #73	; 0x49
 8005422:	d023      	beq.n	800546c <_strtod_l+0x344>
 8005424:	2a4e      	cmp	r2, #78	; 0x4e
 8005426:	f47f aedc 	bne.w	80051e2 <_strtod_l+0xba>
 800542a:	499d      	ldr	r1, [pc, #628]	; (80056a0 <_strtod_l+0x578>)
 800542c:	a819      	add	r0, sp, #100	; 0x64
 800542e:	f001 fe17 	bl	8007060 <__match>
 8005432:	2800      	cmp	r0, #0
 8005434:	f43f aed5 	beq.w	80051e2 <_strtod_l+0xba>
 8005438:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800543a:	781b      	ldrb	r3, [r3, #0]
 800543c:	2b28      	cmp	r3, #40	; 0x28
 800543e:	d12c      	bne.n	800549a <_strtod_l+0x372>
 8005440:	4998      	ldr	r1, [pc, #608]	; (80056a4 <_strtod_l+0x57c>)
 8005442:	aa1c      	add	r2, sp, #112	; 0x70
 8005444:	a819      	add	r0, sp, #100	; 0x64
 8005446:	f001 fe1f 	bl	8007088 <__hexnan>
 800544a:	2805      	cmp	r0, #5
 800544c:	d125      	bne.n	800549a <_strtod_l+0x372>
 800544e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005450:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 8005454:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8005458:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800545c:	e6a5      	b.n	80051aa <_strtod_l+0x82>
 800545e:	fb0e 2c0c 	mla	ip, lr, ip, r2
 8005462:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 8005466:	e7bc      	b.n	80053e2 <_strtod_l+0x2ba>
 8005468:	2a6e      	cmp	r2, #110	; 0x6e
 800546a:	e7dc      	b.n	8005426 <_strtod_l+0x2fe>
 800546c:	498e      	ldr	r1, [pc, #568]	; (80056a8 <_strtod_l+0x580>)
 800546e:	a819      	add	r0, sp, #100	; 0x64
 8005470:	f001 fdf6 	bl	8007060 <__match>
 8005474:	2800      	cmp	r0, #0
 8005476:	f43f aeb4 	beq.w	80051e2 <_strtod_l+0xba>
 800547a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800547c:	498b      	ldr	r1, [pc, #556]	; (80056ac <_strtod_l+0x584>)
 800547e:	3b01      	subs	r3, #1
 8005480:	a819      	add	r0, sp, #100	; 0x64
 8005482:	9319      	str	r3, [sp, #100]	; 0x64
 8005484:	f001 fdec 	bl	8007060 <__match>
 8005488:	b910      	cbnz	r0, 8005490 <_strtod_l+0x368>
 800548a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800548c:	3301      	adds	r3, #1
 800548e:	9319      	str	r3, [sp, #100]	; 0x64
 8005490:	f04f 0800 	mov.w	r8, #0
 8005494:	f8df 9218 	ldr.w	r9, [pc, #536]	; 80056b0 <_strtod_l+0x588>
 8005498:	e687      	b.n	80051aa <_strtod_l+0x82>
 800549a:	4886      	ldr	r0, [pc, #536]	; (80056b4 <_strtod_l+0x58c>)
 800549c:	f002 fdce 	bl	800803c <nan>
 80054a0:	4680      	mov	r8, r0
 80054a2:	4689      	mov	r9, r1
 80054a4:	e681      	b.n	80051aa <_strtod_l+0x82>
 80054a6:	9b04      	ldr	r3, [sp, #16]
 80054a8:	f1bb 0f00 	cmp.w	fp, #0
 80054ac:	bf08      	it	eq
 80054ae:	46a3      	moveq	fp, r4
 80054b0:	1aeb      	subs	r3, r5, r3
 80054b2:	2c10      	cmp	r4, #16
 80054b4:	9806      	ldr	r0, [sp, #24]
 80054b6:	4626      	mov	r6, r4
 80054b8:	9307      	str	r3, [sp, #28]
 80054ba:	bfa8      	it	ge
 80054bc:	2610      	movge	r6, #16
 80054be:	f7fa ff91 	bl	80003e4 <__aeabi_ui2d>
 80054c2:	2c09      	cmp	r4, #9
 80054c4:	4680      	mov	r8, r0
 80054c6:	4689      	mov	r9, r1
 80054c8:	dd13      	ble.n	80054f2 <_strtod_l+0x3ca>
 80054ca:	4b7b      	ldr	r3, [pc, #492]	; (80056b8 <_strtod_l+0x590>)
 80054cc:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80054d0:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80054d4:	f7fb f800 	bl	80004d8 <__aeabi_dmul>
 80054d8:	4680      	mov	r8, r0
 80054da:	9805      	ldr	r0, [sp, #20]
 80054dc:	4689      	mov	r9, r1
 80054de:	f7fa ff81 	bl	80003e4 <__aeabi_ui2d>
 80054e2:	4602      	mov	r2, r0
 80054e4:	460b      	mov	r3, r1
 80054e6:	4640      	mov	r0, r8
 80054e8:	4649      	mov	r1, r9
 80054ea:	f7fa fe3f 	bl	800016c <__adddf3>
 80054ee:	4680      	mov	r8, r0
 80054f0:	4689      	mov	r9, r1
 80054f2:	2c0f      	cmp	r4, #15
 80054f4:	dc36      	bgt.n	8005564 <_strtod_l+0x43c>
 80054f6:	9b07      	ldr	r3, [sp, #28]
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	f43f ae56 	beq.w	80051aa <_strtod_l+0x82>
 80054fe:	dd22      	ble.n	8005546 <_strtod_l+0x41e>
 8005500:	2b16      	cmp	r3, #22
 8005502:	dc09      	bgt.n	8005518 <_strtod_l+0x3f0>
 8005504:	496c      	ldr	r1, [pc, #432]	; (80056b8 <_strtod_l+0x590>)
 8005506:	4642      	mov	r2, r8
 8005508:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800550c:	464b      	mov	r3, r9
 800550e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005512:	f7fa ffe1 	bl	80004d8 <__aeabi_dmul>
 8005516:	e7c3      	b.n	80054a0 <_strtod_l+0x378>
 8005518:	9a07      	ldr	r2, [sp, #28]
 800551a:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 800551e:	4293      	cmp	r3, r2
 8005520:	db20      	blt.n	8005564 <_strtod_l+0x43c>
 8005522:	4d65      	ldr	r5, [pc, #404]	; (80056b8 <_strtod_l+0x590>)
 8005524:	f1c4 040f 	rsb	r4, r4, #15
 8005528:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 800552c:	4642      	mov	r2, r8
 800552e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005532:	464b      	mov	r3, r9
 8005534:	f7fa ffd0 	bl	80004d8 <__aeabi_dmul>
 8005538:	9b07      	ldr	r3, [sp, #28]
 800553a:	1b1c      	subs	r4, r3, r4
 800553c:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8005540:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005544:	e7e5      	b.n	8005512 <_strtod_l+0x3ea>
 8005546:	9b07      	ldr	r3, [sp, #28]
 8005548:	3316      	adds	r3, #22
 800554a:	db0b      	blt.n	8005564 <_strtod_l+0x43c>
 800554c:	9b04      	ldr	r3, [sp, #16]
 800554e:	4640      	mov	r0, r8
 8005550:	1b5d      	subs	r5, r3, r5
 8005552:	4b59      	ldr	r3, [pc, #356]	; (80056b8 <_strtod_l+0x590>)
 8005554:	4649      	mov	r1, r9
 8005556:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800555a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800555e:	f7fb f8e5 	bl	800072c <__aeabi_ddiv>
 8005562:	e79d      	b.n	80054a0 <_strtod_l+0x378>
 8005564:	9b07      	ldr	r3, [sp, #28]
 8005566:	1ba6      	subs	r6, r4, r6
 8005568:	441e      	add	r6, r3
 800556a:	2e00      	cmp	r6, #0
 800556c:	dd74      	ble.n	8005658 <_strtod_l+0x530>
 800556e:	f016 030f 	ands.w	r3, r6, #15
 8005572:	d00a      	beq.n	800558a <_strtod_l+0x462>
 8005574:	4950      	ldr	r1, [pc, #320]	; (80056b8 <_strtod_l+0x590>)
 8005576:	4642      	mov	r2, r8
 8005578:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800557c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005580:	464b      	mov	r3, r9
 8005582:	f7fa ffa9 	bl	80004d8 <__aeabi_dmul>
 8005586:	4680      	mov	r8, r0
 8005588:	4689      	mov	r9, r1
 800558a:	f036 060f 	bics.w	r6, r6, #15
 800558e:	d052      	beq.n	8005636 <_strtod_l+0x50e>
 8005590:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 8005594:	dd27      	ble.n	80055e6 <_strtod_l+0x4be>
 8005596:	f04f 0b00 	mov.w	fp, #0
 800559a:	f8cd b010 	str.w	fp, [sp, #16]
 800559e:	f8cd b020 	str.w	fp, [sp, #32]
 80055a2:	f8cd b018 	str.w	fp, [sp, #24]
 80055a6:	2322      	movs	r3, #34	; 0x22
 80055a8:	f04f 0800 	mov.w	r8, #0
 80055ac:	f8df 9100 	ldr.w	r9, [pc, #256]	; 80056b0 <_strtod_l+0x588>
 80055b0:	f8ca 3000 	str.w	r3, [sl]
 80055b4:	9b08      	ldr	r3, [sp, #32]
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	f43f adf7 	beq.w	80051aa <_strtod_l+0x82>
 80055bc:	4650      	mov	r0, sl
 80055be:	991a      	ldr	r1, [sp, #104]	; 0x68
 80055c0:	f001 fe78 	bl	80072b4 <_Bfree>
 80055c4:	4650      	mov	r0, sl
 80055c6:	9906      	ldr	r1, [sp, #24]
 80055c8:	f001 fe74 	bl	80072b4 <_Bfree>
 80055cc:	4650      	mov	r0, sl
 80055ce:	9904      	ldr	r1, [sp, #16]
 80055d0:	f001 fe70 	bl	80072b4 <_Bfree>
 80055d4:	4650      	mov	r0, sl
 80055d6:	9908      	ldr	r1, [sp, #32]
 80055d8:	f001 fe6c 	bl	80072b4 <_Bfree>
 80055dc:	4659      	mov	r1, fp
 80055de:	4650      	mov	r0, sl
 80055e0:	f001 fe68 	bl	80072b4 <_Bfree>
 80055e4:	e5e1      	b.n	80051aa <_strtod_l+0x82>
 80055e6:	4b35      	ldr	r3, [pc, #212]	; (80056bc <_strtod_l+0x594>)
 80055e8:	4640      	mov	r0, r8
 80055ea:	9305      	str	r3, [sp, #20]
 80055ec:	2300      	movs	r3, #0
 80055ee:	4649      	mov	r1, r9
 80055f0:	461f      	mov	r7, r3
 80055f2:	1136      	asrs	r6, r6, #4
 80055f4:	2e01      	cmp	r6, #1
 80055f6:	dc21      	bgt.n	800563c <_strtod_l+0x514>
 80055f8:	b10b      	cbz	r3, 80055fe <_strtod_l+0x4d6>
 80055fa:	4680      	mov	r8, r0
 80055fc:	4689      	mov	r9, r1
 80055fe:	4b2f      	ldr	r3, [pc, #188]	; (80056bc <_strtod_l+0x594>)
 8005600:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8005604:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8005608:	4642      	mov	r2, r8
 800560a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800560e:	464b      	mov	r3, r9
 8005610:	f7fa ff62 	bl	80004d8 <__aeabi_dmul>
 8005614:	4b26      	ldr	r3, [pc, #152]	; (80056b0 <_strtod_l+0x588>)
 8005616:	460a      	mov	r2, r1
 8005618:	400b      	ands	r3, r1
 800561a:	4929      	ldr	r1, [pc, #164]	; (80056c0 <_strtod_l+0x598>)
 800561c:	4680      	mov	r8, r0
 800561e:	428b      	cmp	r3, r1
 8005620:	d8b9      	bhi.n	8005596 <_strtod_l+0x46e>
 8005622:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8005626:	428b      	cmp	r3, r1
 8005628:	bf86      	itte	hi
 800562a:	f04f 38ff 	movhi.w	r8, #4294967295
 800562e:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 80056c4 <_strtod_l+0x59c>
 8005632:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8005636:	2300      	movs	r3, #0
 8005638:	9305      	str	r3, [sp, #20]
 800563a:	e07f      	b.n	800573c <_strtod_l+0x614>
 800563c:	07f2      	lsls	r2, r6, #31
 800563e:	d505      	bpl.n	800564c <_strtod_l+0x524>
 8005640:	9b05      	ldr	r3, [sp, #20]
 8005642:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005646:	f7fa ff47 	bl	80004d8 <__aeabi_dmul>
 800564a:	2301      	movs	r3, #1
 800564c:	9a05      	ldr	r2, [sp, #20]
 800564e:	3701      	adds	r7, #1
 8005650:	3208      	adds	r2, #8
 8005652:	1076      	asrs	r6, r6, #1
 8005654:	9205      	str	r2, [sp, #20]
 8005656:	e7cd      	b.n	80055f4 <_strtod_l+0x4cc>
 8005658:	d0ed      	beq.n	8005636 <_strtod_l+0x50e>
 800565a:	4276      	negs	r6, r6
 800565c:	f016 020f 	ands.w	r2, r6, #15
 8005660:	d00a      	beq.n	8005678 <_strtod_l+0x550>
 8005662:	4b15      	ldr	r3, [pc, #84]	; (80056b8 <_strtod_l+0x590>)
 8005664:	4640      	mov	r0, r8
 8005666:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800566a:	4649      	mov	r1, r9
 800566c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005670:	f7fb f85c 	bl	800072c <__aeabi_ddiv>
 8005674:	4680      	mov	r8, r0
 8005676:	4689      	mov	r9, r1
 8005678:	1136      	asrs	r6, r6, #4
 800567a:	d0dc      	beq.n	8005636 <_strtod_l+0x50e>
 800567c:	2e1f      	cmp	r6, #31
 800567e:	dd23      	ble.n	80056c8 <_strtod_l+0x5a0>
 8005680:	f04f 0b00 	mov.w	fp, #0
 8005684:	f8cd b010 	str.w	fp, [sp, #16]
 8005688:	f8cd b020 	str.w	fp, [sp, #32]
 800568c:	f8cd b018 	str.w	fp, [sp, #24]
 8005690:	2322      	movs	r3, #34	; 0x22
 8005692:	f04f 0800 	mov.w	r8, #0
 8005696:	f04f 0900 	mov.w	r9, #0
 800569a:	f8ca 3000 	str.w	r3, [sl]
 800569e:	e789      	b.n	80055b4 <_strtod_l+0x48c>
 80056a0:	08009bcd 	.word	0x08009bcd
 80056a4:	08009c10 	.word	0x08009c10
 80056a8:	08009bc5 	.word	0x08009bc5
 80056ac:	08009d54 	.word	0x08009d54
 80056b0:	7ff00000 	.word	0x7ff00000
 80056b4:	0800a000 	.word	0x0800a000
 80056b8:	08009ee0 	.word	0x08009ee0
 80056bc:	08009eb8 	.word	0x08009eb8
 80056c0:	7ca00000 	.word	0x7ca00000
 80056c4:	7fefffff 	.word	0x7fefffff
 80056c8:	f016 0310 	ands.w	r3, r6, #16
 80056cc:	bf18      	it	ne
 80056ce:	236a      	movne	r3, #106	; 0x6a
 80056d0:	4640      	mov	r0, r8
 80056d2:	9305      	str	r3, [sp, #20]
 80056d4:	4649      	mov	r1, r9
 80056d6:	2300      	movs	r3, #0
 80056d8:	4fb0      	ldr	r7, [pc, #704]	; (800599c <_strtod_l+0x874>)
 80056da:	07f2      	lsls	r2, r6, #31
 80056dc:	d504      	bpl.n	80056e8 <_strtod_l+0x5c0>
 80056de:	e9d7 2300 	ldrd	r2, r3, [r7]
 80056e2:	f7fa fef9 	bl	80004d8 <__aeabi_dmul>
 80056e6:	2301      	movs	r3, #1
 80056e8:	1076      	asrs	r6, r6, #1
 80056ea:	f107 0708 	add.w	r7, r7, #8
 80056ee:	d1f4      	bne.n	80056da <_strtod_l+0x5b2>
 80056f0:	b10b      	cbz	r3, 80056f6 <_strtod_l+0x5ce>
 80056f2:	4680      	mov	r8, r0
 80056f4:	4689      	mov	r9, r1
 80056f6:	9b05      	ldr	r3, [sp, #20]
 80056f8:	b1c3      	cbz	r3, 800572c <_strtod_l+0x604>
 80056fa:	f3c9 520a 	ubfx	r2, r9, #20, #11
 80056fe:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8005702:	2b00      	cmp	r3, #0
 8005704:	4649      	mov	r1, r9
 8005706:	dd11      	ble.n	800572c <_strtod_l+0x604>
 8005708:	2b1f      	cmp	r3, #31
 800570a:	f340 8127 	ble.w	800595c <_strtod_l+0x834>
 800570e:	2b34      	cmp	r3, #52	; 0x34
 8005710:	bfd8      	it	le
 8005712:	f04f 33ff 	movle.w	r3, #4294967295
 8005716:	f04f 0800 	mov.w	r8, #0
 800571a:	bfcf      	iteee	gt
 800571c:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8005720:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8005724:	fa03 f202 	lslle.w	r2, r3, r2
 8005728:	ea02 0901 	andle.w	r9, r2, r1
 800572c:	2200      	movs	r2, #0
 800572e:	2300      	movs	r3, #0
 8005730:	4640      	mov	r0, r8
 8005732:	4649      	mov	r1, r9
 8005734:	f7fb f938 	bl	80009a8 <__aeabi_dcmpeq>
 8005738:	2800      	cmp	r0, #0
 800573a:	d1a1      	bne.n	8005680 <_strtod_l+0x558>
 800573c:	9b06      	ldr	r3, [sp, #24]
 800573e:	465a      	mov	r2, fp
 8005740:	9300      	str	r3, [sp, #0]
 8005742:	4650      	mov	r0, sl
 8005744:	4623      	mov	r3, r4
 8005746:	9908      	ldr	r1, [sp, #32]
 8005748:	f001 fe1c 	bl	8007384 <__s2b>
 800574c:	9008      	str	r0, [sp, #32]
 800574e:	2800      	cmp	r0, #0
 8005750:	f43f af21 	beq.w	8005596 <_strtod_l+0x46e>
 8005754:	9b04      	ldr	r3, [sp, #16]
 8005756:	f04f 0b00 	mov.w	fp, #0
 800575a:	1b5d      	subs	r5, r3, r5
 800575c:	9b07      	ldr	r3, [sp, #28]
 800575e:	f8cd b010 	str.w	fp, [sp, #16]
 8005762:	2b00      	cmp	r3, #0
 8005764:	bfb4      	ite	lt
 8005766:	462b      	movlt	r3, r5
 8005768:	2300      	movge	r3, #0
 800576a:	930e      	str	r3, [sp, #56]	; 0x38
 800576c:	9b07      	ldr	r3, [sp, #28]
 800576e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8005772:	9314      	str	r3, [sp, #80]	; 0x50
 8005774:	9b08      	ldr	r3, [sp, #32]
 8005776:	4650      	mov	r0, sl
 8005778:	6859      	ldr	r1, [r3, #4]
 800577a:	f001 fd5b 	bl	8007234 <_Balloc>
 800577e:	9006      	str	r0, [sp, #24]
 8005780:	2800      	cmp	r0, #0
 8005782:	f43f af10 	beq.w	80055a6 <_strtod_l+0x47e>
 8005786:	9b08      	ldr	r3, [sp, #32]
 8005788:	300c      	adds	r0, #12
 800578a:	691a      	ldr	r2, [r3, #16]
 800578c:	f103 010c 	add.w	r1, r3, #12
 8005790:	3202      	adds	r2, #2
 8005792:	0092      	lsls	r2, r2, #2
 8005794:	f001 fd40 	bl	8007218 <memcpy>
 8005798:	ab1c      	add	r3, sp, #112	; 0x70
 800579a:	9301      	str	r3, [sp, #4]
 800579c:	ab1b      	add	r3, sp, #108	; 0x6c
 800579e:	9300      	str	r3, [sp, #0]
 80057a0:	4642      	mov	r2, r8
 80057a2:	464b      	mov	r3, r9
 80057a4:	4650      	mov	r0, sl
 80057a6:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 80057aa:	f002 f92d 	bl	8007a08 <__d2b>
 80057ae:	901a      	str	r0, [sp, #104]	; 0x68
 80057b0:	2800      	cmp	r0, #0
 80057b2:	f43f aef8 	beq.w	80055a6 <_strtod_l+0x47e>
 80057b6:	2101      	movs	r1, #1
 80057b8:	4650      	mov	r0, sl
 80057ba:	f001 fe7b 	bl	80074b4 <__i2b>
 80057be:	4603      	mov	r3, r0
 80057c0:	9004      	str	r0, [sp, #16]
 80057c2:	2800      	cmp	r0, #0
 80057c4:	f43f aeef 	beq.w	80055a6 <_strtod_l+0x47e>
 80057c8:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 80057ca:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80057cc:	2d00      	cmp	r5, #0
 80057ce:	bfab      	itete	ge
 80057d0:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 80057d2:	9b14      	ldrlt	r3, [sp, #80]	; 0x50
 80057d4:	18ee      	addge	r6, r5, r3
 80057d6:	1b5c      	sublt	r4, r3, r5
 80057d8:	9b05      	ldr	r3, [sp, #20]
 80057da:	bfa8      	it	ge
 80057dc:	9c14      	ldrge	r4, [sp, #80]	; 0x50
 80057de:	eba5 0503 	sub.w	r5, r5, r3
 80057e2:	4415      	add	r5, r2
 80057e4:	4b6e      	ldr	r3, [pc, #440]	; (80059a0 <_strtod_l+0x878>)
 80057e6:	f105 35ff 	add.w	r5, r5, #4294967295
 80057ea:	bfb8      	it	lt
 80057ec:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 80057ee:	429d      	cmp	r5, r3
 80057f0:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80057f4:	f280 80c4 	bge.w	8005980 <_strtod_l+0x858>
 80057f8:	1b5b      	subs	r3, r3, r5
 80057fa:	2b1f      	cmp	r3, #31
 80057fc:	f04f 0701 	mov.w	r7, #1
 8005800:	eba2 0203 	sub.w	r2, r2, r3
 8005804:	f300 80b1 	bgt.w	800596a <_strtod_l+0x842>
 8005808:	2500      	movs	r5, #0
 800580a:	fa07 f303 	lsl.w	r3, r7, r3
 800580e:	930f      	str	r3, [sp, #60]	; 0x3c
 8005810:	18b7      	adds	r7, r6, r2
 8005812:	9b05      	ldr	r3, [sp, #20]
 8005814:	42be      	cmp	r6, r7
 8005816:	4414      	add	r4, r2
 8005818:	441c      	add	r4, r3
 800581a:	4633      	mov	r3, r6
 800581c:	bfa8      	it	ge
 800581e:	463b      	movge	r3, r7
 8005820:	42a3      	cmp	r3, r4
 8005822:	bfa8      	it	ge
 8005824:	4623      	movge	r3, r4
 8005826:	2b00      	cmp	r3, #0
 8005828:	bfc2      	ittt	gt
 800582a:	1aff      	subgt	r7, r7, r3
 800582c:	1ae4      	subgt	r4, r4, r3
 800582e:	1af6      	subgt	r6, r6, r3
 8005830:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005832:	2b00      	cmp	r3, #0
 8005834:	dd17      	ble.n	8005866 <_strtod_l+0x73e>
 8005836:	461a      	mov	r2, r3
 8005838:	4650      	mov	r0, sl
 800583a:	9904      	ldr	r1, [sp, #16]
 800583c:	f001 fef8 	bl	8007630 <__pow5mult>
 8005840:	9004      	str	r0, [sp, #16]
 8005842:	2800      	cmp	r0, #0
 8005844:	f43f aeaf 	beq.w	80055a6 <_strtod_l+0x47e>
 8005848:	4601      	mov	r1, r0
 800584a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800584c:	4650      	mov	r0, sl
 800584e:	f001 fe47 	bl	80074e0 <__multiply>
 8005852:	9009      	str	r0, [sp, #36]	; 0x24
 8005854:	2800      	cmp	r0, #0
 8005856:	f43f aea6 	beq.w	80055a6 <_strtod_l+0x47e>
 800585a:	4650      	mov	r0, sl
 800585c:	991a      	ldr	r1, [sp, #104]	; 0x68
 800585e:	f001 fd29 	bl	80072b4 <_Bfree>
 8005862:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005864:	931a      	str	r3, [sp, #104]	; 0x68
 8005866:	2f00      	cmp	r7, #0
 8005868:	f300 808e 	bgt.w	8005988 <_strtod_l+0x860>
 800586c:	9b07      	ldr	r3, [sp, #28]
 800586e:	2b00      	cmp	r3, #0
 8005870:	dd08      	ble.n	8005884 <_strtod_l+0x75c>
 8005872:	4650      	mov	r0, sl
 8005874:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8005876:	9906      	ldr	r1, [sp, #24]
 8005878:	f001 feda 	bl	8007630 <__pow5mult>
 800587c:	9006      	str	r0, [sp, #24]
 800587e:	2800      	cmp	r0, #0
 8005880:	f43f ae91 	beq.w	80055a6 <_strtod_l+0x47e>
 8005884:	2c00      	cmp	r4, #0
 8005886:	dd08      	ble.n	800589a <_strtod_l+0x772>
 8005888:	4622      	mov	r2, r4
 800588a:	4650      	mov	r0, sl
 800588c:	9906      	ldr	r1, [sp, #24]
 800588e:	f001 ff29 	bl	80076e4 <__lshift>
 8005892:	9006      	str	r0, [sp, #24]
 8005894:	2800      	cmp	r0, #0
 8005896:	f43f ae86 	beq.w	80055a6 <_strtod_l+0x47e>
 800589a:	2e00      	cmp	r6, #0
 800589c:	dd08      	ble.n	80058b0 <_strtod_l+0x788>
 800589e:	4632      	mov	r2, r6
 80058a0:	4650      	mov	r0, sl
 80058a2:	9904      	ldr	r1, [sp, #16]
 80058a4:	f001 ff1e 	bl	80076e4 <__lshift>
 80058a8:	9004      	str	r0, [sp, #16]
 80058aa:	2800      	cmp	r0, #0
 80058ac:	f43f ae7b 	beq.w	80055a6 <_strtod_l+0x47e>
 80058b0:	4650      	mov	r0, sl
 80058b2:	9a06      	ldr	r2, [sp, #24]
 80058b4:	991a      	ldr	r1, [sp, #104]	; 0x68
 80058b6:	f001 ffa1 	bl	80077fc <__mdiff>
 80058ba:	4683      	mov	fp, r0
 80058bc:	2800      	cmp	r0, #0
 80058be:	f43f ae72 	beq.w	80055a6 <_strtod_l+0x47e>
 80058c2:	2400      	movs	r4, #0
 80058c4:	68c3      	ldr	r3, [r0, #12]
 80058c6:	9904      	ldr	r1, [sp, #16]
 80058c8:	60c4      	str	r4, [r0, #12]
 80058ca:	930b      	str	r3, [sp, #44]	; 0x2c
 80058cc:	f001 ff7a 	bl	80077c4 <__mcmp>
 80058d0:	42a0      	cmp	r0, r4
 80058d2:	da6b      	bge.n	80059ac <_strtod_l+0x884>
 80058d4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80058d6:	ea53 0308 	orrs.w	r3, r3, r8
 80058da:	f040 8091 	bne.w	8005a00 <_strtod_l+0x8d8>
 80058de:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	f040 808c 	bne.w	8005a00 <_strtod_l+0x8d8>
 80058e8:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80058ec:	0d1b      	lsrs	r3, r3, #20
 80058ee:	051b      	lsls	r3, r3, #20
 80058f0:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80058f4:	f240 8084 	bls.w	8005a00 <_strtod_l+0x8d8>
 80058f8:	f8db 3014 	ldr.w	r3, [fp, #20]
 80058fc:	b91b      	cbnz	r3, 8005906 <_strtod_l+0x7de>
 80058fe:	f8db 3010 	ldr.w	r3, [fp, #16]
 8005902:	2b01      	cmp	r3, #1
 8005904:	dd7c      	ble.n	8005a00 <_strtod_l+0x8d8>
 8005906:	4659      	mov	r1, fp
 8005908:	2201      	movs	r2, #1
 800590a:	4650      	mov	r0, sl
 800590c:	f001 feea 	bl	80076e4 <__lshift>
 8005910:	9904      	ldr	r1, [sp, #16]
 8005912:	4683      	mov	fp, r0
 8005914:	f001 ff56 	bl	80077c4 <__mcmp>
 8005918:	2800      	cmp	r0, #0
 800591a:	dd71      	ble.n	8005a00 <_strtod_l+0x8d8>
 800591c:	9905      	ldr	r1, [sp, #20]
 800591e:	464b      	mov	r3, r9
 8005920:	4a20      	ldr	r2, [pc, #128]	; (80059a4 <_strtod_l+0x87c>)
 8005922:	2900      	cmp	r1, #0
 8005924:	f000 808c 	beq.w	8005a40 <_strtod_l+0x918>
 8005928:	ea02 0109 	and.w	r1, r2, r9
 800592c:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8005930:	f300 8086 	bgt.w	8005a40 <_strtod_l+0x918>
 8005934:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8005938:	f77f aeaa 	ble.w	8005690 <_strtod_l+0x568>
 800593c:	4640      	mov	r0, r8
 800593e:	4649      	mov	r1, r9
 8005940:	4b19      	ldr	r3, [pc, #100]	; (80059a8 <_strtod_l+0x880>)
 8005942:	2200      	movs	r2, #0
 8005944:	f7fa fdc8 	bl	80004d8 <__aeabi_dmul>
 8005948:	460b      	mov	r3, r1
 800594a:	4303      	orrs	r3, r0
 800594c:	bf08      	it	eq
 800594e:	2322      	moveq	r3, #34	; 0x22
 8005950:	4680      	mov	r8, r0
 8005952:	4689      	mov	r9, r1
 8005954:	bf08      	it	eq
 8005956:	f8ca 3000 	streq.w	r3, [sl]
 800595a:	e62f      	b.n	80055bc <_strtod_l+0x494>
 800595c:	f04f 32ff 	mov.w	r2, #4294967295
 8005960:	fa02 f303 	lsl.w	r3, r2, r3
 8005964:	ea03 0808 	and.w	r8, r3, r8
 8005968:	e6e0      	b.n	800572c <_strtod_l+0x604>
 800596a:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 800596e:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 8005972:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 8005976:	35e2      	adds	r5, #226	; 0xe2
 8005978:	fa07 f505 	lsl.w	r5, r7, r5
 800597c:	970f      	str	r7, [sp, #60]	; 0x3c
 800597e:	e747      	b.n	8005810 <_strtod_l+0x6e8>
 8005980:	2301      	movs	r3, #1
 8005982:	2500      	movs	r5, #0
 8005984:	930f      	str	r3, [sp, #60]	; 0x3c
 8005986:	e743      	b.n	8005810 <_strtod_l+0x6e8>
 8005988:	463a      	mov	r2, r7
 800598a:	4650      	mov	r0, sl
 800598c:	991a      	ldr	r1, [sp, #104]	; 0x68
 800598e:	f001 fea9 	bl	80076e4 <__lshift>
 8005992:	901a      	str	r0, [sp, #104]	; 0x68
 8005994:	2800      	cmp	r0, #0
 8005996:	f47f af69 	bne.w	800586c <_strtod_l+0x744>
 800599a:	e604      	b.n	80055a6 <_strtod_l+0x47e>
 800599c:	08009c28 	.word	0x08009c28
 80059a0:	fffffc02 	.word	0xfffffc02
 80059a4:	7ff00000 	.word	0x7ff00000
 80059a8:	39500000 	.word	0x39500000
 80059ac:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80059b0:	d165      	bne.n	8005a7e <_strtod_l+0x956>
 80059b2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80059b4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80059b8:	b35a      	cbz	r2, 8005a12 <_strtod_l+0x8ea>
 80059ba:	4a99      	ldr	r2, [pc, #612]	; (8005c20 <_strtod_l+0xaf8>)
 80059bc:	4293      	cmp	r3, r2
 80059be:	d12b      	bne.n	8005a18 <_strtod_l+0x8f0>
 80059c0:	9b05      	ldr	r3, [sp, #20]
 80059c2:	4641      	mov	r1, r8
 80059c4:	b303      	cbz	r3, 8005a08 <_strtod_l+0x8e0>
 80059c6:	464a      	mov	r2, r9
 80059c8:	4b96      	ldr	r3, [pc, #600]	; (8005c24 <_strtod_l+0xafc>)
 80059ca:	4013      	ands	r3, r2
 80059cc:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80059d0:	f04f 32ff 	mov.w	r2, #4294967295
 80059d4:	d81b      	bhi.n	8005a0e <_strtod_l+0x8e6>
 80059d6:	0d1b      	lsrs	r3, r3, #20
 80059d8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80059dc:	fa02 f303 	lsl.w	r3, r2, r3
 80059e0:	4299      	cmp	r1, r3
 80059e2:	d119      	bne.n	8005a18 <_strtod_l+0x8f0>
 80059e4:	4b90      	ldr	r3, [pc, #576]	; (8005c28 <_strtod_l+0xb00>)
 80059e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80059e8:	429a      	cmp	r2, r3
 80059ea:	d102      	bne.n	80059f2 <_strtod_l+0x8ca>
 80059ec:	3101      	adds	r1, #1
 80059ee:	f43f adda 	beq.w	80055a6 <_strtod_l+0x47e>
 80059f2:	f04f 0800 	mov.w	r8, #0
 80059f6:	4b8b      	ldr	r3, [pc, #556]	; (8005c24 <_strtod_l+0xafc>)
 80059f8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80059fa:	401a      	ands	r2, r3
 80059fc:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 8005a00:	9b05      	ldr	r3, [sp, #20]
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d19a      	bne.n	800593c <_strtod_l+0x814>
 8005a06:	e5d9      	b.n	80055bc <_strtod_l+0x494>
 8005a08:	f04f 33ff 	mov.w	r3, #4294967295
 8005a0c:	e7e8      	b.n	80059e0 <_strtod_l+0x8b8>
 8005a0e:	4613      	mov	r3, r2
 8005a10:	e7e6      	b.n	80059e0 <_strtod_l+0x8b8>
 8005a12:	ea53 0308 	orrs.w	r3, r3, r8
 8005a16:	d081      	beq.n	800591c <_strtod_l+0x7f4>
 8005a18:	b1e5      	cbz	r5, 8005a54 <_strtod_l+0x92c>
 8005a1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a1c:	421d      	tst	r5, r3
 8005a1e:	d0ef      	beq.n	8005a00 <_strtod_l+0x8d8>
 8005a20:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005a22:	4640      	mov	r0, r8
 8005a24:	4649      	mov	r1, r9
 8005a26:	9a05      	ldr	r2, [sp, #20]
 8005a28:	b1c3      	cbz	r3, 8005a5c <_strtod_l+0x934>
 8005a2a:	f7ff fb5a 	bl	80050e2 <sulp>
 8005a2e:	4602      	mov	r2, r0
 8005a30:	460b      	mov	r3, r1
 8005a32:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005a36:	f7fa fb99 	bl	800016c <__adddf3>
 8005a3a:	4680      	mov	r8, r0
 8005a3c:	4689      	mov	r9, r1
 8005a3e:	e7df      	b.n	8005a00 <_strtod_l+0x8d8>
 8005a40:	4013      	ands	r3, r2
 8005a42:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8005a46:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8005a4a:	f04f 38ff 	mov.w	r8, #4294967295
 8005a4e:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8005a52:	e7d5      	b.n	8005a00 <_strtod_l+0x8d8>
 8005a54:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005a56:	ea13 0f08 	tst.w	r3, r8
 8005a5a:	e7e0      	b.n	8005a1e <_strtod_l+0x8f6>
 8005a5c:	f7ff fb41 	bl	80050e2 <sulp>
 8005a60:	4602      	mov	r2, r0
 8005a62:	460b      	mov	r3, r1
 8005a64:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005a68:	f7fa fb7e 	bl	8000168 <__aeabi_dsub>
 8005a6c:	2200      	movs	r2, #0
 8005a6e:	2300      	movs	r3, #0
 8005a70:	4680      	mov	r8, r0
 8005a72:	4689      	mov	r9, r1
 8005a74:	f7fa ff98 	bl	80009a8 <__aeabi_dcmpeq>
 8005a78:	2800      	cmp	r0, #0
 8005a7a:	d0c1      	beq.n	8005a00 <_strtod_l+0x8d8>
 8005a7c:	e608      	b.n	8005690 <_strtod_l+0x568>
 8005a7e:	4658      	mov	r0, fp
 8005a80:	9904      	ldr	r1, [sp, #16]
 8005a82:	f002 f81d 	bl	8007ac0 <__ratio>
 8005a86:	2200      	movs	r2, #0
 8005a88:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005a8c:	4606      	mov	r6, r0
 8005a8e:	460f      	mov	r7, r1
 8005a90:	f7fa ff9e 	bl	80009d0 <__aeabi_dcmple>
 8005a94:	2800      	cmp	r0, #0
 8005a96:	d070      	beq.n	8005b7a <_strtod_l+0xa52>
 8005a98:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d042      	beq.n	8005b24 <_strtod_l+0x9fc>
 8005a9e:	2600      	movs	r6, #0
 8005aa0:	4f62      	ldr	r7, [pc, #392]	; (8005c2c <_strtod_l+0xb04>)
 8005aa2:	4d62      	ldr	r5, [pc, #392]	; (8005c2c <_strtod_l+0xb04>)
 8005aa4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005aa6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005aaa:	0d1b      	lsrs	r3, r3, #20
 8005aac:	051b      	lsls	r3, r3, #20
 8005aae:	930f      	str	r3, [sp, #60]	; 0x3c
 8005ab0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005ab2:	4b5f      	ldr	r3, [pc, #380]	; (8005c30 <_strtod_l+0xb08>)
 8005ab4:	429a      	cmp	r2, r3
 8005ab6:	f040 80c3 	bne.w	8005c40 <_strtod_l+0xb18>
 8005aba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005abc:	4640      	mov	r0, r8
 8005abe:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 8005ac2:	4649      	mov	r1, r9
 8005ac4:	f001 ff26 	bl	8007914 <__ulp>
 8005ac8:	4602      	mov	r2, r0
 8005aca:	460b      	mov	r3, r1
 8005acc:	4630      	mov	r0, r6
 8005ace:	4639      	mov	r1, r7
 8005ad0:	f7fa fd02 	bl	80004d8 <__aeabi_dmul>
 8005ad4:	4642      	mov	r2, r8
 8005ad6:	464b      	mov	r3, r9
 8005ad8:	f7fa fb48 	bl	800016c <__adddf3>
 8005adc:	460b      	mov	r3, r1
 8005ade:	4951      	ldr	r1, [pc, #324]	; (8005c24 <_strtod_l+0xafc>)
 8005ae0:	4a54      	ldr	r2, [pc, #336]	; (8005c34 <_strtod_l+0xb0c>)
 8005ae2:	4019      	ands	r1, r3
 8005ae4:	4291      	cmp	r1, r2
 8005ae6:	4680      	mov	r8, r0
 8005ae8:	d95d      	bls.n	8005ba6 <_strtod_l+0xa7e>
 8005aea:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005aec:	4b4e      	ldr	r3, [pc, #312]	; (8005c28 <_strtod_l+0xb00>)
 8005aee:	429a      	cmp	r2, r3
 8005af0:	d103      	bne.n	8005afa <_strtod_l+0x9d2>
 8005af2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005af4:	3301      	adds	r3, #1
 8005af6:	f43f ad56 	beq.w	80055a6 <_strtod_l+0x47e>
 8005afa:	f04f 38ff 	mov.w	r8, #4294967295
 8005afe:	f8df 9128 	ldr.w	r9, [pc, #296]	; 8005c28 <_strtod_l+0xb00>
 8005b02:	4650      	mov	r0, sl
 8005b04:	991a      	ldr	r1, [sp, #104]	; 0x68
 8005b06:	f001 fbd5 	bl	80072b4 <_Bfree>
 8005b0a:	4650      	mov	r0, sl
 8005b0c:	9906      	ldr	r1, [sp, #24]
 8005b0e:	f001 fbd1 	bl	80072b4 <_Bfree>
 8005b12:	4650      	mov	r0, sl
 8005b14:	9904      	ldr	r1, [sp, #16]
 8005b16:	f001 fbcd 	bl	80072b4 <_Bfree>
 8005b1a:	4659      	mov	r1, fp
 8005b1c:	4650      	mov	r0, sl
 8005b1e:	f001 fbc9 	bl	80072b4 <_Bfree>
 8005b22:	e627      	b.n	8005774 <_strtod_l+0x64c>
 8005b24:	f1b8 0f00 	cmp.w	r8, #0
 8005b28:	d119      	bne.n	8005b5e <_strtod_l+0xa36>
 8005b2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b2c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005b30:	b9e3      	cbnz	r3, 8005b6c <_strtod_l+0xa44>
 8005b32:	2200      	movs	r2, #0
 8005b34:	4630      	mov	r0, r6
 8005b36:	4639      	mov	r1, r7
 8005b38:	4b3c      	ldr	r3, [pc, #240]	; (8005c2c <_strtod_l+0xb04>)
 8005b3a:	f7fa ff3f 	bl	80009bc <__aeabi_dcmplt>
 8005b3e:	b9c8      	cbnz	r0, 8005b74 <_strtod_l+0xa4c>
 8005b40:	2200      	movs	r2, #0
 8005b42:	4630      	mov	r0, r6
 8005b44:	4639      	mov	r1, r7
 8005b46:	4b3c      	ldr	r3, [pc, #240]	; (8005c38 <_strtod_l+0xb10>)
 8005b48:	f7fa fcc6 	bl	80004d8 <__aeabi_dmul>
 8005b4c:	4604      	mov	r4, r0
 8005b4e:	460d      	mov	r5, r1
 8005b50:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8005b54:	9416      	str	r4, [sp, #88]	; 0x58
 8005b56:	9317      	str	r3, [sp, #92]	; 0x5c
 8005b58:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
 8005b5c:	e7a2      	b.n	8005aa4 <_strtod_l+0x97c>
 8005b5e:	f1b8 0f01 	cmp.w	r8, #1
 8005b62:	d103      	bne.n	8005b6c <_strtod_l+0xa44>
 8005b64:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	f43f ad92 	beq.w	8005690 <_strtod_l+0x568>
 8005b6c:	2600      	movs	r6, #0
 8005b6e:	2400      	movs	r4, #0
 8005b70:	4f32      	ldr	r7, [pc, #200]	; (8005c3c <_strtod_l+0xb14>)
 8005b72:	e796      	b.n	8005aa2 <_strtod_l+0x97a>
 8005b74:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8005b76:	4d30      	ldr	r5, [pc, #192]	; (8005c38 <_strtod_l+0xb10>)
 8005b78:	e7ea      	b.n	8005b50 <_strtod_l+0xa28>
 8005b7a:	4b2f      	ldr	r3, [pc, #188]	; (8005c38 <_strtod_l+0xb10>)
 8005b7c:	2200      	movs	r2, #0
 8005b7e:	4630      	mov	r0, r6
 8005b80:	4639      	mov	r1, r7
 8005b82:	f7fa fca9 	bl	80004d8 <__aeabi_dmul>
 8005b86:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005b88:	4604      	mov	r4, r0
 8005b8a:	460d      	mov	r5, r1
 8005b8c:	b933      	cbnz	r3, 8005b9c <_strtod_l+0xa74>
 8005b8e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005b92:	9010      	str	r0, [sp, #64]	; 0x40
 8005b94:	9311      	str	r3, [sp, #68]	; 0x44
 8005b96:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8005b9a:	e783      	b.n	8005aa4 <_strtod_l+0x97c>
 8005b9c:	4602      	mov	r2, r0
 8005b9e:	460b      	mov	r3, r1
 8005ba0:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8005ba4:	e7f7      	b.n	8005b96 <_strtod_l+0xa6e>
 8005ba6:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8005baa:	9b05      	ldr	r3, [sp, #20]
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d1a8      	bne.n	8005b02 <_strtod_l+0x9da>
 8005bb0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005bb4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005bb6:	0d1b      	lsrs	r3, r3, #20
 8005bb8:	051b      	lsls	r3, r3, #20
 8005bba:	429a      	cmp	r2, r3
 8005bbc:	d1a1      	bne.n	8005b02 <_strtod_l+0x9da>
 8005bbe:	4620      	mov	r0, r4
 8005bc0:	4629      	mov	r1, r5
 8005bc2:	f7fa ffd1 	bl	8000b68 <__aeabi_d2lz>
 8005bc6:	f7fa fc59 	bl	800047c <__aeabi_l2d>
 8005bca:	4602      	mov	r2, r0
 8005bcc:	460b      	mov	r3, r1
 8005bce:	4620      	mov	r0, r4
 8005bd0:	4629      	mov	r1, r5
 8005bd2:	f7fa fac9 	bl	8000168 <__aeabi_dsub>
 8005bd6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005bd8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005bdc:	ea43 0308 	orr.w	r3, r3, r8
 8005be0:	4313      	orrs	r3, r2
 8005be2:	4604      	mov	r4, r0
 8005be4:	460d      	mov	r5, r1
 8005be6:	d066      	beq.n	8005cb6 <_strtod_l+0xb8e>
 8005be8:	a309      	add	r3, pc, #36	; (adr r3, 8005c10 <_strtod_l+0xae8>)
 8005bea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bee:	f7fa fee5 	bl	80009bc <__aeabi_dcmplt>
 8005bf2:	2800      	cmp	r0, #0
 8005bf4:	f47f ace2 	bne.w	80055bc <_strtod_l+0x494>
 8005bf8:	a307      	add	r3, pc, #28	; (adr r3, 8005c18 <_strtod_l+0xaf0>)
 8005bfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bfe:	4620      	mov	r0, r4
 8005c00:	4629      	mov	r1, r5
 8005c02:	f7fa fef9 	bl	80009f8 <__aeabi_dcmpgt>
 8005c06:	2800      	cmp	r0, #0
 8005c08:	f43f af7b 	beq.w	8005b02 <_strtod_l+0x9da>
 8005c0c:	e4d6      	b.n	80055bc <_strtod_l+0x494>
 8005c0e:	bf00      	nop
 8005c10:	94a03595 	.word	0x94a03595
 8005c14:	3fdfffff 	.word	0x3fdfffff
 8005c18:	35afe535 	.word	0x35afe535
 8005c1c:	3fe00000 	.word	0x3fe00000
 8005c20:	000fffff 	.word	0x000fffff
 8005c24:	7ff00000 	.word	0x7ff00000
 8005c28:	7fefffff 	.word	0x7fefffff
 8005c2c:	3ff00000 	.word	0x3ff00000
 8005c30:	7fe00000 	.word	0x7fe00000
 8005c34:	7c9fffff 	.word	0x7c9fffff
 8005c38:	3fe00000 	.word	0x3fe00000
 8005c3c:	bff00000 	.word	0xbff00000
 8005c40:	9b05      	ldr	r3, [sp, #20]
 8005c42:	b313      	cbz	r3, 8005c8a <_strtod_l+0xb62>
 8005c44:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005c46:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8005c4a:	d81e      	bhi.n	8005c8a <_strtod_l+0xb62>
 8005c4c:	a326      	add	r3, pc, #152	; (adr r3, 8005ce8 <_strtod_l+0xbc0>)
 8005c4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c52:	4620      	mov	r0, r4
 8005c54:	4629      	mov	r1, r5
 8005c56:	f7fa febb 	bl	80009d0 <__aeabi_dcmple>
 8005c5a:	b190      	cbz	r0, 8005c82 <_strtod_l+0xb5a>
 8005c5c:	4629      	mov	r1, r5
 8005c5e:	4620      	mov	r0, r4
 8005c60:	f7fa ff12 	bl	8000a88 <__aeabi_d2uiz>
 8005c64:	2801      	cmp	r0, #1
 8005c66:	bf38      	it	cc
 8005c68:	2001      	movcc	r0, #1
 8005c6a:	f7fa fbbb 	bl	80003e4 <__aeabi_ui2d>
 8005c6e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005c70:	4604      	mov	r4, r0
 8005c72:	460d      	mov	r5, r1
 8005c74:	b9d3      	cbnz	r3, 8005cac <_strtod_l+0xb84>
 8005c76:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005c7a:	9012      	str	r0, [sp, #72]	; 0x48
 8005c7c:	9313      	str	r3, [sp, #76]	; 0x4c
 8005c7e:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 8005c82:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005c84:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 8005c88:	1a9f      	subs	r7, r3, r2
 8005c8a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005c8e:	f001 fe41 	bl	8007914 <__ulp>
 8005c92:	4602      	mov	r2, r0
 8005c94:	460b      	mov	r3, r1
 8005c96:	4630      	mov	r0, r6
 8005c98:	4639      	mov	r1, r7
 8005c9a:	f7fa fc1d 	bl	80004d8 <__aeabi_dmul>
 8005c9e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8005ca2:	f7fa fa63 	bl	800016c <__adddf3>
 8005ca6:	4680      	mov	r8, r0
 8005ca8:	4689      	mov	r9, r1
 8005caa:	e77e      	b.n	8005baa <_strtod_l+0xa82>
 8005cac:	4602      	mov	r2, r0
 8005cae:	460b      	mov	r3, r1
 8005cb0:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 8005cb4:	e7e3      	b.n	8005c7e <_strtod_l+0xb56>
 8005cb6:	a30e      	add	r3, pc, #56	; (adr r3, 8005cf0 <_strtod_l+0xbc8>)
 8005cb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cbc:	f7fa fe7e 	bl	80009bc <__aeabi_dcmplt>
 8005cc0:	e7a1      	b.n	8005c06 <_strtod_l+0xade>
 8005cc2:	2300      	movs	r3, #0
 8005cc4:	930a      	str	r3, [sp, #40]	; 0x28
 8005cc6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005cc8:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8005cca:	6013      	str	r3, [r2, #0]
 8005ccc:	f7ff ba71 	b.w	80051b2 <_strtod_l+0x8a>
 8005cd0:	2a65      	cmp	r2, #101	; 0x65
 8005cd2:	f43f ab63 	beq.w	800539c <_strtod_l+0x274>
 8005cd6:	2a45      	cmp	r2, #69	; 0x45
 8005cd8:	f43f ab60 	beq.w	800539c <_strtod_l+0x274>
 8005cdc:	2301      	movs	r3, #1
 8005cde:	f7ff bb95 	b.w	800540c <_strtod_l+0x2e4>
 8005ce2:	bf00      	nop
 8005ce4:	f3af 8000 	nop.w
 8005ce8:	ffc00000 	.word	0xffc00000
 8005cec:	41dfffff 	.word	0x41dfffff
 8005cf0:	94a03595 	.word	0x94a03595
 8005cf4:	3fcfffff 	.word	0x3fcfffff

08005cf8 <_strtod_r>:
 8005cf8:	4b01      	ldr	r3, [pc, #4]	; (8005d00 <_strtod_r+0x8>)
 8005cfa:	f7ff ba15 	b.w	8005128 <_strtod_l>
 8005cfe:	bf00      	nop
 8005d00:	2000007c 	.word	0x2000007c

08005d04 <_strtol_l.constprop.0>:
 8005d04:	2b01      	cmp	r3, #1
 8005d06:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d0a:	4680      	mov	r8, r0
 8005d0c:	d001      	beq.n	8005d12 <_strtol_l.constprop.0+0xe>
 8005d0e:	2b24      	cmp	r3, #36	; 0x24
 8005d10:	d906      	bls.n	8005d20 <_strtol_l.constprop.0+0x1c>
 8005d12:	f7fe fb13 	bl	800433c <__errno>
 8005d16:	2316      	movs	r3, #22
 8005d18:	6003      	str	r3, [r0, #0]
 8005d1a:	2000      	movs	r0, #0
 8005d1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d20:	460d      	mov	r5, r1
 8005d22:	4f35      	ldr	r7, [pc, #212]	; (8005df8 <_strtol_l.constprop.0+0xf4>)
 8005d24:	4628      	mov	r0, r5
 8005d26:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005d2a:	5de6      	ldrb	r6, [r4, r7]
 8005d2c:	f016 0608 	ands.w	r6, r6, #8
 8005d30:	d1f8      	bne.n	8005d24 <_strtol_l.constprop.0+0x20>
 8005d32:	2c2d      	cmp	r4, #45	; 0x2d
 8005d34:	d12f      	bne.n	8005d96 <_strtol_l.constprop.0+0x92>
 8005d36:	2601      	movs	r6, #1
 8005d38:	782c      	ldrb	r4, [r5, #0]
 8005d3a:	1c85      	adds	r5, r0, #2
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d057      	beq.n	8005df0 <_strtol_l.constprop.0+0xec>
 8005d40:	2b10      	cmp	r3, #16
 8005d42:	d109      	bne.n	8005d58 <_strtol_l.constprop.0+0x54>
 8005d44:	2c30      	cmp	r4, #48	; 0x30
 8005d46:	d107      	bne.n	8005d58 <_strtol_l.constprop.0+0x54>
 8005d48:	7828      	ldrb	r0, [r5, #0]
 8005d4a:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8005d4e:	2858      	cmp	r0, #88	; 0x58
 8005d50:	d149      	bne.n	8005de6 <_strtol_l.constprop.0+0xe2>
 8005d52:	2310      	movs	r3, #16
 8005d54:	786c      	ldrb	r4, [r5, #1]
 8005d56:	3502      	adds	r5, #2
 8005d58:	2700      	movs	r7, #0
 8005d5a:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 8005d5e:	f10e 3eff 	add.w	lr, lr, #4294967295
 8005d62:	fbbe f9f3 	udiv	r9, lr, r3
 8005d66:	4638      	mov	r0, r7
 8005d68:	fb03 ea19 	mls	sl, r3, r9, lr
 8005d6c:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8005d70:	f1bc 0f09 	cmp.w	ip, #9
 8005d74:	d814      	bhi.n	8005da0 <_strtol_l.constprop.0+0x9c>
 8005d76:	4664      	mov	r4, ip
 8005d78:	42a3      	cmp	r3, r4
 8005d7a:	dd22      	ble.n	8005dc2 <_strtol_l.constprop.0+0xbe>
 8005d7c:	2f00      	cmp	r7, #0
 8005d7e:	db1d      	blt.n	8005dbc <_strtol_l.constprop.0+0xb8>
 8005d80:	4581      	cmp	r9, r0
 8005d82:	d31b      	bcc.n	8005dbc <_strtol_l.constprop.0+0xb8>
 8005d84:	d101      	bne.n	8005d8a <_strtol_l.constprop.0+0x86>
 8005d86:	45a2      	cmp	sl, r4
 8005d88:	db18      	blt.n	8005dbc <_strtol_l.constprop.0+0xb8>
 8005d8a:	2701      	movs	r7, #1
 8005d8c:	fb00 4003 	mla	r0, r0, r3, r4
 8005d90:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005d94:	e7ea      	b.n	8005d6c <_strtol_l.constprop.0+0x68>
 8005d96:	2c2b      	cmp	r4, #43	; 0x2b
 8005d98:	bf04      	itt	eq
 8005d9a:	782c      	ldrbeq	r4, [r5, #0]
 8005d9c:	1c85      	addeq	r5, r0, #2
 8005d9e:	e7cd      	b.n	8005d3c <_strtol_l.constprop.0+0x38>
 8005da0:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8005da4:	f1bc 0f19 	cmp.w	ip, #25
 8005da8:	d801      	bhi.n	8005dae <_strtol_l.constprop.0+0xaa>
 8005daa:	3c37      	subs	r4, #55	; 0x37
 8005dac:	e7e4      	b.n	8005d78 <_strtol_l.constprop.0+0x74>
 8005dae:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8005db2:	f1bc 0f19 	cmp.w	ip, #25
 8005db6:	d804      	bhi.n	8005dc2 <_strtol_l.constprop.0+0xbe>
 8005db8:	3c57      	subs	r4, #87	; 0x57
 8005dba:	e7dd      	b.n	8005d78 <_strtol_l.constprop.0+0x74>
 8005dbc:	f04f 37ff 	mov.w	r7, #4294967295
 8005dc0:	e7e6      	b.n	8005d90 <_strtol_l.constprop.0+0x8c>
 8005dc2:	2f00      	cmp	r7, #0
 8005dc4:	da07      	bge.n	8005dd6 <_strtol_l.constprop.0+0xd2>
 8005dc6:	2322      	movs	r3, #34	; 0x22
 8005dc8:	4670      	mov	r0, lr
 8005dca:	f8c8 3000 	str.w	r3, [r8]
 8005dce:	2a00      	cmp	r2, #0
 8005dd0:	d0a4      	beq.n	8005d1c <_strtol_l.constprop.0+0x18>
 8005dd2:	1e69      	subs	r1, r5, #1
 8005dd4:	e005      	b.n	8005de2 <_strtol_l.constprop.0+0xde>
 8005dd6:	b106      	cbz	r6, 8005dda <_strtol_l.constprop.0+0xd6>
 8005dd8:	4240      	negs	r0, r0
 8005dda:	2a00      	cmp	r2, #0
 8005ddc:	d09e      	beq.n	8005d1c <_strtol_l.constprop.0+0x18>
 8005dde:	2f00      	cmp	r7, #0
 8005de0:	d1f7      	bne.n	8005dd2 <_strtol_l.constprop.0+0xce>
 8005de2:	6011      	str	r1, [r2, #0]
 8005de4:	e79a      	b.n	8005d1c <_strtol_l.constprop.0+0x18>
 8005de6:	2430      	movs	r4, #48	; 0x30
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d1b5      	bne.n	8005d58 <_strtol_l.constprop.0+0x54>
 8005dec:	2308      	movs	r3, #8
 8005dee:	e7b3      	b.n	8005d58 <_strtol_l.constprop.0+0x54>
 8005df0:	2c30      	cmp	r4, #48	; 0x30
 8005df2:	d0a9      	beq.n	8005d48 <_strtol_l.constprop.0+0x44>
 8005df4:	230a      	movs	r3, #10
 8005df6:	e7af      	b.n	8005d58 <_strtol_l.constprop.0+0x54>
 8005df8:	08009c51 	.word	0x08009c51

08005dfc <_strtol_r>:
 8005dfc:	f7ff bf82 	b.w	8005d04 <_strtol_l.constprop.0>

08005e00 <quorem>:
 8005e00:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e04:	6903      	ldr	r3, [r0, #16]
 8005e06:	690c      	ldr	r4, [r1, #16]
 8005e08:	4607      	mov	r7, r0
 8005e0a:	42a3      	cmp	r3, r4
 8005e0c:	f2c0 8082 	blt.w	8005f14 <quorem+0x114>
 8005e10:	3c01      	subs	r4, #1
 8005e12:	f100 0514 	add.w	r5, r0, #20
 8005e16:	f101 0814 	add.w	r8, r1, #20
 8005e1a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005e1e:	9301      	str	r3, [sp, #4]
 8005e20:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005e24:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005e28:	3301      	adds	r3, #1
 8005e2a:	429a      	cmp	r2, r3
 8005e2c:	fbb2 f6f3 	udiv	r6, r2, r3
 8005e30:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005e34:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005e38:	d331      	bcc.n	8005e9e <quorem+0x9e>
 8005e3a:	f04f 0e00 	mov.w	lr, #0
 8005e3e:	4640      	mov	r0, r8
 8005e40:	46ac      	mov	ip, r5
 8005e42:	46f2      	mov	sl, lr
 8005e44:	f850 2b04 	ldr.w	r2, [r0], #4
 8005e48:	b293      	uxth	r3, r2
 8005e4a:	fb06 e303 	mla	r3, r6, r3, lr
 8005e4e:	0c12      	lsrs	r2, r2, #16
 8005e50:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8005e54:	b29b      	uxth	r3, r3
 8005e56:	fb06 e202 	mla	r2, r6, r2, lr
 8005e5a:	ebaa 0303 	sub.w	r3, sl, r3
 8005e5e:	f8dc a000 	ldr.w	sl, [ip]
 8005e62:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005e66:	fa1f fa8a 	uxth.w	sl, sl
 8005e6a:	4453      	add	r3, sl
 8005e6c:	f8dc a000 	ldr.w	sl, [ip]
 8005e70:	b292      	uxth	r2, r2
 8005e72:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8005e76:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005e7a:	b29b      	uxth	r3, r3
 8005e7c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005e80:	4581      	cmp	r9, r0
 8005e82:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005e86:	f84c 3b04 	str.w	r3, [ip], #4
 8005e8a:	d2db      	bcs.n	8005e44 <quorem+0x44>
 8005e8c:	f855 300b 	ldr.w	r3, [r5, fp]
 8005e90:	b92b      	cbnz	r3, 8005e9e <quorem+0x9e>
 8005e92:	9b01      	ldr	r3, [sp, #4]
 8005e94:	3b04      	subs	r3, #4
 8005e96:	429d      	cmp	r5, r3
 8005e98:	461a      	mov	r2, r3
 8005e9a:	d32f      	bcc.n	8005efc <quorem+0xfc>
 8005e9c:	613c      	str	r4, [r7, #16]
 8005e9e:	4638      	mov	r0, r7
 8005ea0:	f001 fc90 	bl	80077c4 <__mcmp>
 8005ea4:	2800      	cmp	r0, #0
 8005ea6:	db25      	blt.n	8005ef4 <quorem+0xf4>
 8005ea8:	4628      	mov	r0, r5
 8005eaa:	f04f 0c00 	mov.w	ip, #0
 8005eae:	3601      	adds	r6, #1
 8005eb0:	f858 1b04 	ldr.w	r1, [r8], #4
 8005eb4:	f8d0 e000 	ldr.w	lr, [r0]
 8005eb8:	b28b      	uxth	r3, r1
 8005eba:	ebac 0303 	sub.w	r3, ip, r3
 8005ebe:	fa1f f28e 	uxth.w	r2, lr
 8005ec2:	4413      	add	r3, r2
 8005ec4:	0c0a      	lsrs	r2, r1, #16
 8005ec6:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005eca:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005ece:	b29b      	uxth	r3, r3
 8005ed0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005ed4:	45c1      	cmp	r9, r8
 8005ed6:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005eda:	f840 3b04 	str.w	r3, [r0], #4
 8005ede:	d2e7      	bcs.n	8005eb0 <quorem+0xb0>
 8005ee0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005ee4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005ee8:	b922      	cbnz	r2, 8005ef4 <quorem+0xf4>
 8005eea:	3b04      	subs	r3, #4
 8005eec:	429d      	cmp	r5, r3
 8005eee:	461a      	mov	r2, r3
 8005ef0:	d30a      	bcc.n	8005f08 <quorem+0x108>
 8005ef2:	613c      	str	r4, [r7, #16]
 8005ef4:	4630      	mov	r0, r6
 8005ef6:	b003      	add	sp, #12
 8005ef8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005efc:	6812      	ldr	r2, [r2, #0]
 8005efe:	3b04      	subs	r3, #4
 8005f00:	2a00      	cmp	r2, #0
 8005f02:	d1cb      	bne.n	8005e9c <quorem+0x9c>
 8005f04:	3c01      	subs	r4, #1
 8005f06:	e7c6      	b.n	8005e96 <quorem+0x96>
 8005f08:	6812      	ldr	r2, [r2, #0]
 8005f0a:	3b04      	subs	r3, #4
 8005f0c:	2a00      	cmp	r2, #0
 8005f0e:	d1f0      	bne.n	8005ef2 <quorem+0xf2>
 8005f10:	3c01      	subs	r4, #1
 8005f12:	e7eb      	b.n	8005eec <quorem+0xec>
 8005f14:	2000      	movs	r0, #0
 8005f16:	e7ee      	b.n	8005ef6 <quorem+0xf6>

08005f18 <_dtoa_r>:
 8005f18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f1c:	4616      	mov	r6, r2
 8005f1e:	461f      	mov	r7, r3
 8005f20:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8005f22:	b099      	sub	sp, #100	; 0x64
 8005f24:	4605      	mov	r5, r0
 8005f26:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8005f2a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8005f2e:	b974      	cbnz	r4, 8005f4e <_dtoa_r+0x36>
 8005f30:	2010      	movs	r0, #16
 8005f32:	f001 f949 	bl	80071c8 <malloc>
 8005f36:	4602      	mov	r2, r0
 8005f38:	6268      	str	r0, [r5, #36]	; 0x24
 8005f3a:	b920      	cbnz	r0, 8005f46 <_dtoa_r+0x2e>
 8005f3c:	21ea      	movs	r1, #234	; 0xea
 8005f3e:	4ba8      	ldr	r3, [pc, #672]	; (80061e0 <_dtoa_r+0x2c8>)
 8005f40:	48a8      	ldr	r0, [pc, #672]	; (80061e4 <_dtoa_r+0x2cc>)
 8005f42:	f002 f8b3 	bl	80080ac <__assert_func>
 8005f46:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005f4a:	6004      	str	r4, [r0, #0]
 8005f4c:	60c4      	str	r4, [r0, #12]
 8005f4e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005f50:	6819      	ldr	r1, [r3, #0]
 8005f52:	b151      	cbz	r1, 8005f6a <_dtoa_r+0x52>
 8005f54:	685a      	ldr	r2, [r3, #4]
 8005f56:	2301      	movs	r3, #1
 8005f58:	4093      	lsls	r3, r2
 8005f5a:	604a      	str	r2, [r1, #4]
 8005f5c:	608b      	str	r3, [r1, #8]
 8005f5e:	4628      	mov	r0, r5
 8005f60:	f001 f9a8 	bl	80072b4 <_Bfree>
 8005f64:	2200      	movs	r2, #0
 8005f66:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005f68:	601a      	str	r2, [r3, #0]
 8005f6a:	1e3b      	subs	r3, r7, #0
 8005f6c:	bfaf      	iteee	ge
 8005f6e:	2300      	movge	r3, #0
 8005f70:	2201      	movlt	r2, #1
 8005f72:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005f76:	9305      	strlt	r3, [sp, #20]
 8005f78:	bfa8      	it	ge
 8005f7a:	f8c8 3000 	strge.w	r3, [r8]
 8005f7e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8005f82:	4b99      	ldr	r3, [pc, #612]	; (80061e8 <_dtoa_r+0x2d0>)
 8005f84:	bfb8      	it	lt
 8005f86:	f8c8 2000 	strlt.w	r2, [r8]
 8005f8a:	ea33 0309 	bics.w	r3, r3, r9
 8005f8e:	d119      	bne.n	8005fc4 <_dtoa_r+0xac>
 8005f90:	f242 730f 	movw	r3, #9999	; 0x270f
 8005f94:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005f96:	6013      	str	r3, [r2, #0]
 8005f98:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005f9c:	4333      	orrs	r3, r6
 8005f9e:	f000 857f 	beq.w	8006aa0 <_dtoa_r+0xb88>
 8005fa2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005fa4:	b953      	cbnz	r3, 8005fbc <_dtoa_r+0xa4>
 8005fa6:	4b91      	ldr	r3, [pc, #580]	; (80061ec <_dtoa_r+0x2d4>)
 8005fa8:	e022      	b.n	8005ff0 <_dtoa_r+0xd8>
 8005faa:	4b91      	ldr	r3, [pc, #580]	; (80061f0 <_dtoa_r+0x2d8>)
 8005fac:	9303      	str	r3, [sp, #12]
 8005fae:	3308      	adds	r3, #8
 8005fb0:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8005fb2:	6013      	str	r3, [r2, #0]
 8005fb4:	9803      	ldr	r0, [sp, #12]
 8005fb6:	b019      	add	sp, #100	; 0x64
 8005fb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005fbc:	4b8b      	ldr	r3, [pc, #556]	; (80061ec <_dtoa_r+0x2d4>)
 8005fbe:	9303      	str	r3, [sp, #12]
 8005fc0:	3303      	adds	r3, #3
 8005fc2:	e7f5      	b.n	8005fb0 <_dtoa_r+0x98>
 8005fc4:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8005fc8:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8005fcc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005fd0:	2200      	movs	r2, #0
 8005fd2:	2300      	movs	r3, #0
 8005fd4:	f7fa fce8 	bl	80009a8 <__aeabi_dcmpeq>
 8005fd8:	4680      	mov	r8, r0
 8005fda:	b158      	cbz	r0, 8005ff4 <_dtoa_r+0xdc>
 8005fdc:	2301      	movs	r3, #1
 8005fde:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005fe0:	6013      	str	r3, [r2, #0]
 8005fe2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	f000 8558 	beq.w	8006a9a <_dtoa_r+0xb82>
 8005fea:	4882      	ldr	r0, [pc, #520]	; (80061f4 <_dtoa_r+0x2dc>)
 8005fec:	6018      	str	r0, [r3, #0]
 8005fee:	1e43      	subs	r3, r0, #1
 8005ff0:	9303      	str	r3, [sp, #12]
 8005ff2:	e7df      	b.n	8005fb4 <_dtoa_r+0x9c>
 8005ff4:	ab16      	add	r3, sp, #88	; 0x58
 8005ff6:	9301      	str	r3, [sp, #4]
 8005ff8:	ab17      	add	r3, sp, #92	; 0x5c
 8005ffa:	9300      	str	r3, [sp, #0]
 8005ffc:	4628      	mov	r0, r5
 8005ffe:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8006002:	f001 fd01 	bl	8007a08 <__d2b>
 8006006:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800600a:	4683      	mov	fp, r0
 800600c:	2c00      	cmp	r4, #0
 800600e:	d07f      	beq.n	8006110 <_dtoa_r+0x1f8>
 8006010:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006014:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006016:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800601a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800601e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8006022:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8006026:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800602a:	2200      	movs	r2, #0
 800602c:	4b72      	ldr	r3, [pc, #456]	; (80061f8 <_dtoa_r+0x2e0>)
 800602e:	f7fa f89b 	bl	8000168 <__aeabi_dsub>
 8006032:	a365      	add	r3, pc, #404	; (adr r3, 80061c8 <_dtoa_r+0x2b0>)
 8006034:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006038:	f7fa fa4e 	bl	80004d8 <__aeabi_dmul>
 800603c:	a364      	add	r3, pc, #400	; (adr r3, 80061d0 <_dtoa_r+0x2b8>)
 800603e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006042:	f7fa f893 	bl	800016c <__adddf3>
 8006046:	4606      	mov	r6, r0
 8006048:	4620      	mov	r0, r4
 800604a:	460f      	mov	r7, r1
 800604c:	f7fa f9da 	bl	8000404 <__aeabi_i2d>
 8006050:	a361      	add	r3, pc, #388	; (adr r3, 80061d8 <_dtoa_r+0x2c0>)
 8006052:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006056:	f7fa fa3f 	bl	80004d8 <__aeabi_dmul>
 800605a:	4602      	mov	r2, r0
 800605c:	460b      	mov	r3, r1
 800605e:	4630      	mov	r0, r6
 8006060:	4639      	mov	r1, r7
 8006062:	f7fa f883 	bl	800016c <__adddf3>
 8006066:	4606      	mov	r6, r0
 8006068:	460f      	mov	r7, r1
 800606a:	f7fa fce5 	bl	8000a38 <__aeabi_d2iz>
 800606e:	2200      	movs	r2, #0
 8006070:	4682      	mov	sl, r0
 8006072:	2300      	movs	r3, #0
 8006074:	4630      	mov	r0, r6
 8006076:	4639      	mov	r1, r7
 8006078:	f7fa fca0 	bl	80009bc <__aeabi_dcmplt>
 800607c:	b148      	cbz	r0, 8006092 <_dtoa_r+0x17a>
 800607e:	4650      	mov	r0, sl
 8006080:	f7fa f9c0 	bl	8000404 <__aeabi_i2d>
 8006084:	4632      	mov	r2, r6
 8006086:	463b      	mov	r3, r7
 8006088:	f7fa fc8e 	bl	80009a8 <__aeabi_dcmpeq>
 800608c:	b908      	cbnz	r0, 8006092 <_dtoa_r+0x17a>
 800608e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006092:	f1ba 0f16 	cmp.w	sl, #22
 8006096:	d858      	bhi.n	800614a <_dtoa_r+0x232>
 8006098:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800609c:	4b57      	ldr	r3, [pc, #348]	; (80061fc <_dtoa_r+0x2e4>)
 800609e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80060a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060a6:	f7fa fc89 	bl	80009bc <__aeabi_dcmplt>
 80060aa:	2800      	cmp	r0, #0
 80060ac:	d04f      	beq.n	800614e <_dtoa_r+0x236>
 80060ae:	2300      	movs	r3, #0
 80060b0:	f10a 3aff 	add.w	sl, sl, #4294967295
 80060b4:	930f      	str	r3, [sp, #60]	; 0x3c
 80060b6:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80060b8:	1b1c      	subs	r4, r3, r4
 80060ba:	1e63      	subs	r3, r4, #1
 80060bc:	9309      	str	r3, [sp, #36]	; 0x24
 80060be:	bf49      	itett	mi
 80060c0:	f1c4 0301 	rsbmi	r3, r4, #1
 80060c4:	2300      	movpl	r3, #0
 80060c6:	9306      	strmi	r3, [sp, #24]
 80060c8:	2300      	movmi	r3, #0
 80060ca:	bf54      	ite	pl
 80060cc:	9306      	strpl	r3, [sp, #24]
 80060ce:	9309      	strmi	r3, [sp, #36]	; 0x24
 80060d0:	f1ba 0f00 	cmp.w	sl, #0
 80060d4:	db3d      	blt.n	8006152 <_dtoa_r+0x23a>
 80060d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80060d8:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 80060dc:	4453      	add	r3, sl
 80060de:	9309      	str	r3, [sp, #36]	; 0x24
 80060e0:	2300      	movs	r3, #0
 80060e2:	930a      	str	r3, [sp, #40]	; 0x28
 80060e4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80060e6:	2b09      	cmp	r3, #9
 80060e8:	f200 808c 	bhi.w	8006204 <_dtoa_r+0x2ec>
 80060ec:	2b05      	cmp	r3, #5
 80060ee:	bfc4      	itt	gt
 80060f0:	3b04      	subgt	r3, #4
 80060f2:	9322      	strgt	r3, [sp, #136]	; 0x88
 80060f4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80060f6:	bfc8      	it	gt
 80060f8:	2400      	movgt	r4, #0
 80060fa:	f1a3 0302 	sub.w	r3, r3, #2
 80060fe:	bfd8      	it	le
 8006100:	2401      	movle	r4, #1
 8006102:	2b03      	cmp	r3, #3
 8006104:	f200 808a 	bhi.w	800621c <_dtoa_r+0x304>
 8006108:	e8df f003 	tbb	[pc, r3]
 800610c:	5b4d4f2d 	.word	0x5b4d4f2d
 8006110:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8006114:	441c      	add	r4, r3
 8006116:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800611a:	2b20      	cmp	r3, #32
 800611c:	bfc3      	ittte	gt
 800611e:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006122:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8006126:	fa09 f303 	lslgt.w	r3, r9, r3
 800612a:	f1c3 0320 	rsble	r3, r3, #32
 800612e:	bfc6      	itte	gt
 8006130:	fa26 f000 	lsrgt.w	r0, r6, r0
 8006134:	4318      	orrgt	r0, r3
 8006136:	fa06 f003 	lslle.w	r0, r6, r3
 800613a:	f7fa f953 	bl	80003e4 <__aeabi_ui2d>
 800613e:	2301      	movs	r3, #1
 8006140:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8006144:	3c01      	subs	r4, #1
 8006146:	9313      	str	r3, [sp, #76]	; 0x4c
 8006148:	e76f      	b.n	800602a <_dtoa_r+0x112>
 800614a:	2301      	movs	r3, #1
 800614c:	e7b2      	b.n	80060b4 <_dtoa_r+0x19c>
 800614e:	900f      	str	r0, [sp, #60]	; 0x3c
 8006150:	e7b1      	b.n	80060b6 <_dtoa_r+0x19e>
 8006152:	9b06      	ldr	r3, [sp, #24]
 8006154:	eba3 030a 	sub.w	r3, r3, sl
 8006158:	9306      	str	r3, [sp, #24]
 800615a:	f1ca 0300 	rsb	r3, sl, #0
 800615e:	930a      	str	r3, [sp, #40]	; 0x28
 8006160:	2300      	movs	r3, #0
 8006162:	930e      	str	r3, [sp, #56]	; 0x38
 8006164:	e7be      	b.n	80060e4 <_dtoa_r+0x1cc>
 8006166:	2300      	movs	r3, #0
 8006168:	930b      	str	r3, [sp, #44]	; 0x2c
 800616a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800616c:	2b00      	cmp	r3, #0
 800616e:	dc58      	bgt.n	8006222 <_dtoa_r+0x30a>
 8006170:	f04f 0901 	mov.w	r9, #1
 8006174:	464b      	mov	r3, r9
 8006176:	f8cd 9020 	str.w	r9, [sp, #32]
 800617a:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 800617e:	2200      	movs	r2, #0
 8006180:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8006182:	6042      	str	r2, [r0, #4]
 8006184:	2204      	movs	r2, #4
 8006186:	f102 0614 	add.w	r6, r2, #20
 800618a:	429e      	cmp	r6, r3
 800618c:	6841      	ldr	r1, [r0, #4]
 800618e:	d94e      	bls.n	800622e <_dtoa_r+0x316>
 8006190:	4628      	mov	r0, r5
 8006192:	f001 f84f 	bl	8007234 <_Balloc>
 8006196:	9003      	str	r0, [sp, #12]
 8006198:	2800      	cmp	r0, #0
 800619a:	d14c      	bne.n	8006236 <_dtoa_r+0x31e>
 800619c:	4602      	mov	r2, r0
 800619e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80061a2:	4b17      	ldr	r3, [pc, #92]	; (8006200 <_dtoa_r+0x2e8>)
 80061a4:	e6cc      	b.n	8005f40 <_dtoa_r+0x28>
 80061a6:	2301      	movs	r3, #1
 80061a8:	e7de      	b.n	8006168 <_dtoa_r+0x250>
 80061aa:	2300      	movs	r3, #0
 80061ac:	930b      	str	r3, [sp, #44]	; 0x2c
 80061ae:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80061b0:	eb0a 0903 	add.w	r9, sl, r3
 80061b4:	f109 0301 	add.w	r3, r9, #1
 80061b8:	2b01      	cmp	r3, #1
 80061ba:	9308      	str	r3, [sp, #32]
 80061bc:	bfb8      	it	lt
 80061be:	2301      	movlt	r3, #1
 80061c0:	e7dd      	b.n	800617e <_dtoa_r+0x266>
 80061c2:	2301      	movs	r3, #1
 80061c4:	e7f2      	b.n	80061ac <_dtoa_r+0x294>
 80061c6:	bf00      	nop
 80061c8:	636f4361 	.word	0x636f4361
 80061cc:	3fd287a7 	.word	0x3fd287a7
 80061d0:	8b60c8b3 	.word	0x8b60c8b3
 80061d4:	3fc68a28 	.word	0x3fc68a28
 80061d8:	509f79fb 	.word	0x509f79fb
 80061dc:	3fd34413 	.word	0x3fd34413
 80061e0:	08009d5e 	.word	0x08009d5e
 80061e4:	08009d75 	.word	0x08009d75
 80061e8:	7ff00000 	.word	0x7ff00000
 80061ec:	08009d5a 	.word	0x08009d5a
 80061f0:	08009d51 	.word	0x08009d51
 80061f4:	08009bd1 	.word	0x08009bd1
 80061f8:	3ff80000 	.word	0x3ff80000
 80061fc:	08009ee0 	.word	0x08009ee0
 8006200:	08009dd0 	.word	0x08009dd0
 8006204:	2401      	movs	r4, #1
 8006206:	2300      	movs	r3, #0
 8006208:	940b      	str	r4, [sp, #44]	; 0x2c
 800620a:	9322      	str	r3, [sp, #136]	; 0x88
 800620c:	f04f 39ff 	mov.w	r9, #4294967295
 8006210:	2200      	movs	r2, #0
 8006212:	2312      	movs	r3, #18
 8006214:	f8cd 9020 	str.w	r9, [sp, #32]
 8006218:	9223      	str	r2, [sp, #140]	; 0x8c
 800621a:	e7b0      	b.n	800617e <_dtoa_r+0x266>
 800621c:	2301      	movs	r3, #1
 800621e:	930b      	str	r3, [sp, #44]	; 0x2c
 8006220:	e7f4      	b.n	800620c <_dtoa_r+0x2f4>
 8006222:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 8006226:	464b      	mov	r3, r9
 8006228:	f8cd 9020 	str.w	r9, [sp, #32]
 800622c:	e7a7      	b.n	800617e <_dtoa_r+0x266>
 800622e:	3101      	adds	r1, #1
 8006230:	6041      	str	r1, [r0, #4]
 8006232:	0052      	lsls	r2, r2, #1
 8006234:	e7a7      	b.n	8006186 <_dtoa_r+0x26e>
 8006236:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006238:	9a03      	ldr	r2, [sp, #12]
 800623a:	601a      	str	r2, [r3, #0]
 800623c:	9b08      	ldr	r3, [sp, #32]
 800623e:	2b0e      	cmp	r3, #14
 8006240:	f200 80a8 	bhi.w	8006394 <_dtoa_r+0x47c>
 8006244:	2c00      	cmp	r4, #0
 8006246:	f000 80a5 	beq.w	8006394 <_dtoa_r+0x47c>
 800624a:	f1ba 0f00 	cmp.w	sl, #0
 800624e:	dd34      	ble.n	80062ba <_dtoa_r+0x3a2>
 8006250:	4a9a      	ldr	r2, [pc, #616]	; (80064bc <_dtoa_r+0x5a4>)
 8006252:	f00a 030f 	and.w	r3, sl, #15
 8006256:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800625a:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800625e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006262:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8006266:	ea4f 142a 	mov.w	r4, sl, asr #4
 800626a:	d016      	beq.n	800629a <_dtoa_r+0x382>
 800626c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006270:	4b93      	ldr	r3, [pc, #588]	; (80064c0 <_dtoa_r+0x5a8>)
 8006272:	2703      	movs	r7, #3
 8006274:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006278:	f7fa fa58 	bl	800072c <__aeabi_ddiv>
 800627c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006280:	f004 040f 	and.w	r4, r4, #15
 8006284:	4e8e      	ldr	r6, [pc, #568]	; (80064c0 <_dtoa_r+0x5a8>)
 8006286:	b954      	cbnz	r4, 800629e <_dtoa_r+0x386>
 8006288:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800628c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006290:	f7fa fa4c 	bl	800072c <__aeabi_ddiv>
 8006294:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006298:	e029      	b.n	80062ee <_dtoa_r+0x3d6>
 800629a:	2702      	movs	r7, #2
 800629c:	e7f2      	b.n	8006284 <_dtoa_r+0x36c>
 800629e:	07e1      	lsls	r1, r4, #31
 80062a0:	d508      	bpl.n	80062b4 <_dtoa_r+0x39c>
 80062a2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80062a6:	e9d6 2300 	ldrd	r2, r3, [r6]
 80062aa:	f7fa f915 	bl	80004d8 <__aeabi_dmul>
 80062ae:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80062b2:	3701      	adds	r7, #1
 80062b4:	1064      	asrs	r4, r4, #1
 80062b6:	3608      	adds	r6, #8
 80062b8:	e7e5      	b.n	8006286 <_dtoa_r+0x36e>
 80062ba:	f000 80a5 	beq.w	8006408 <_dtoa_r+0x4f0>
 80062be:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80062c2:	f1ca 0400 	rsb	r4, sl, #0
 80062c6:	4b7d      	ldr	r3, [pc, #500]	; (80064bc <_dtoa_r+0x5a4>)
 80062c8:	f004 020f 	and.w	r2, r4, #15
 80062cc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80062d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062d4:	f7fa f900 	bl	80004d8 <__aeabi_dmul>
 80062d8:	2702      	movs	r7, #2
 80062da:	2300      	movs	r3, #0
 80062dc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80062e0:	4e77      	ldr	r6, [pc, #476]	; (80064c0 <_dtoa_r+0x5a8>)
 80062e2:	1124      	asrs	r4, r4, #4
 80062e4:	2c00      	cmp	r4, #0
 80062e6:	f040 8084 	bne.w	80063f2 <_dtoa_r+0x4da>
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d1d2      	bne.n	8006294 <_dtoa_r+0x37c>
 80062ee:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	f000 808b 	beq.w	800640c <_dtoa_r+0x4f4>
 80062f6:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80062fa:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80062fe:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006302:	2200      	movs	r2, #0
 8006304:	4b6f      	ldr	r3, [pc, #444]	; (80064c4 <_dtoa_r+0x5ac>)
 8006306:	f7fa fb59 	bl	80009bc <__aeabi_dcmplt>
 800630a:	2800      	cmp	r0, #0
 800630c:	d07e      	beq.n	800640c <_dtoa_r+0x4f4>
 800630e:	9b08      	ldr	r3, [sp, #32]
 8006310:	2b00      	cmp	r3, #0
 8006312:	d07b      	beq.n	800640c <_dtoa_r+0x4f4>
 8006314:	f1b9 0f00 	cmp.w	r9, #0
 8006318:	dd38      	ble.n	800638c <_dtoa_r+0x474>
 800631a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800631e:	2200      	movs	r2, #0
 8006320:	4b69      	ldr	r3, [pc, #420]	; (80064c8 <_dtoa_r+0x5b0>)
 8006322:	f7fa f8d9 	bl	80004d8 <__aeabi_dmul>
 8006326:	464c      	mov	r4, r9
 8006328:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800632c:	f10a 38ff 	add.w	r8, sl, #4294967295
 8006330:	3701      	adds	r7, #1
 8006332:	4638      	mov	r0, r7
 8006334:	f7fa f866 	bl	8000404 <__aeabi_i2d>
 8006338:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800633c:	f7fa f8cc 	bl	80004d8 <__aeabi_dmul>
 8006340:	2200      	movs	r2, #0
 8006342:	4b62      	ldr	r3, [pc, #392]	; (80064cc <_dtoa_r+0x5b4>)
 8006344:	f7f9 ff12 	bl	800016c <__adddf3>
 8006348:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800634c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006350:	9611      	str	r6, [sp, #68]	; 0x44
 8006352:	2c00      	cmp	r4, #0
 8006354:	d15d      	bne.n	8006412 <_dtoa_r+0x4fa>
 8006356:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800635a:	2200      	movs	r2, #0
 800635c:	4b5c      	ldr	r3, [pc, #368]	; (80064d0 <_dtoa_r+0x5b8>)
 800635e:	f7f9 ff03 	bl	8000168 <__aeabi_dsub>
 8006362:	4602      	mov	r2, r0
 8006364:	460b      	mov	r3, r1
 8006366:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800636a:	4633      	mov	r3, r6
 800636c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800636e:	f7fa fb43 	bl	80009f8 <__aeabi_dcmpgt>
 8006372:	2800      	cmp	r0, #0
 8006374:	f040 829c 	bne.w	80068b0 <_dtoa_r+0x998>
 8006378:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800637c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800637e:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8006382:	f7fa fb1b 	bl	80009bc <__aeabi_dcmplt>
 8006386:	2800      	cmp	r0, #0
 8006388:	f040 8290 	bne.w	80068ac <_dtoa_r+0x994>
 800638c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8006390:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8006394:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006396:	2b00      	cmp	r3, #0
 8006398:	f2c0 8152 	blt.w	8006640 <_dtoa_r+0x728>
 800639c:	f1ba 0f0e 	cmp.w	sl, #14
 80063a0:	f300 814e 	bgt.w	8006640 <_dtoa_r+0x728>
 80063a4:	4b45      	ldr	r3, [pc, #276]	; (80064bc <_dtoa_r+0x5a4>)
 80063a6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80063aa:	e9d3 3400 	ldrd	r3, r4, [r3]
 80063ae:	e9cd 3406 	strd	r3, r4, [sp, #24]
 80063b2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	f280 80db 	bge.w	8006570 <_dtoa_r+0x658>
 80063ba:	9b08      	ldr	r3, [sp, #32]
 80063bc:	2b00      	cmp	r3, #0
 80063be:	f300 80d7 	bgt.w	8006570 <_dtoa_r+0x658>
 80063c2:	f040 8272 	bne.w	80068aa <_dtoa_r+0x992>
 80063c6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80063ca:	2200      	movs	r2, #0
 80063cc:	4b40      	ldr	r3, [pc, #256]	; (80064d0 <_dtoa_r+0x5b8>)
 80063ce:	f7fa f883 	bl	80004d8 <__aeabi_dmul>
 80063d2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80063d6:	f7fa fb05 	bl	80009e4 <__aeabi_dcmpge>
 80063da:	9c08      	ldr	r4, [sp, #32]
 80063dc:	4626      	mov	r6, r4
 80063de:	2800      	cmp	r0, #0
 80063e0:	f040 8248 	bne.w	8006874 <_dtoa_r+0x95c>
 80063e4:	2331      	movs	r3, #49	; 0x31
 80063e6:	9f03      	ldr	r7, [sp, #12]
 80063e8:	f10a 0a01 	add.w	sl, sl, #1
 80063ec:	f807 3b01 	strb.w	r3, [r7], #1
 80063f0:	e244      	b.n	800687c <_dtoa_r+0x964>
 80063f2:	07e2      	lsls	r2, r4, #31
 80063f4:	d505      	bpl.n	8006402 <_dtoa_r+0x4ea>
 80063f6:	e9d6 2300 	ldrd	r2, r3, [r6]
 80063fa:	f7fa f86d 	bl	80004d8 <__aeabi_dmul>
 80063fe:	2301      	movs	r3, #1
 8006400:	3701      	adds	r7, #1
 8006402:	1064      	asrs	r4, r4, #1
 8006404:	3608      	adds	r6, #8
 8006406:	e76d      	b.n	80062e4 <_dtoa_r+0x3cc>
 8006408:	2702      	movs	r7, #2
 800640a:	e770      	b.n	80062ee <_dtoa_r+0x3d6>
 800640c:	46d0      	mov	r8, sl
 800640e:	9c08      	ldr	r4, [sp, #32]
 8006410:	e78f      	b.n	8006332 <_dtoa_r+0x41a>
 8006412:	9903      	ldr	r1, [sp, #12]
 8006414:	4b29      	ldr	r3, [pc, #164]	; (80064bc <_dtoa_r+0x5a4>)
 8006416:	4421      	add	r1, r4
 8006418:	9112      	str	r1, [sp, #72]	; 0x48
 800641a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800641c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006420:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8006424:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006428:	2900      	cmp	r1, #0
 800642a:	d055      	beq.n	80064d8 <_dtoa_r+0x5c0>
 800642c:	2000      	movs	r0, #0
 800642e:	4929      	ldr	r1, [pc, #164]	; (80064d4 <_dtoa_r+0x5bc>)
 8006430:	f7fa f97c 	bl	800072c <__aeabi_ddiv>
 8006434:	463b      	mov	r3, r7
 8006436:	4632      	mov	r2, r6
 8006438:	f7f9 fe96 	bl	8000168 <__aeabi_dsub>
 800643c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006440:	9f03      	ldr	r7, [sp, #12]
 8006442:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006446:	f7fa faf7 	bl	8000a38 <__aeabi_d2iz>
 800644a:	4604      	mov	r4, r0
 800644c:	f7f9 ffda 	bl	8000404 <__aeabi_i2d>
 8006450:	4602      	mov	r2, r0
 8006452:	460b      	mov	r3, r1
 8006454:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006458:	f7f9 fe86 	bl	8000168 <__aeabi_dsub>
 800645c:	4602      	mov	r2, r0
 800645e:	460b      	mov	r3, r1
 8006460:	3430      	adds	r4, #48	; 0x30
 8006462:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006466:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800646a:	f807 4b01 	strb.w	r4, [r7], #1
 800646e:	f7fa faa5 	bl	80009bc <__aeabi_dcmplt>
 8006472:	2800      	cmp	r0, #0
 8006474:	d174      	bne.n	8006560 <_dtoa_r+0x648>
 8006476:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800647a:	2000      	movs	r0, #0
 800647c:	4911      	ldr	r1, [pc, #68]	; (80064c4 <_dtoa_r+0x5ac>)
 800647e:	f7f9 fe73 	bl	8000168 <__aeabi_dsub>
 8006482:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006486:	f7fa fa99 	bl	80009bc <__aeabi_dcmplt>
 800648a:	2800      	cmp	r0, #0
 800648c:	f040 80b7 	bne.w	80065fe <_dtoa_r+0x6e6>
 8006490:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006492:	429f      	cmp	r7, r3
 8006494:	f43f af7a 	beq.w	800638c <_dtoa_r+0x474>
 8006498:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800649c:	2200      	movs	r2, #0
 800649e:	4b0a      	ldr	r3, [pc, #40]	; (80064c8 <_dtoa_r+0x5b0>)
 80064a0:	f7fa f81a 	bl	80004d8 <__aeabi_dmul>
 80064a4:	2200      	movs	r2, #0
 80064a6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80064aa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80064ae:	4b06      	ldr	r3, [pc, #24]	; (80064c8 <_dtoa_r+0x5b0>)
 80064b0:	f7fa f812 	bl	80004d8 <__aeabi_dmul>
 80064b4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80064b8:	e7c3      	b.n	8006442 <_dtoa_r+0x52a>
 80064ba:	bf00      	nop
 80064bc:	08009ee0 	.word	0x08009ee0
 80064c0:	08009eb8 	.word	0x08009eb8
 80064c4:	3ff00000 	.word	0x3ff00000
 80064c8:	40240000 	.word	0x40240000
 80064cc:	401c0000 	.word	0x401c0000
 80064d0:	40140000 	.word	0x40140000
 80064d4:	3fe00000 	.word	0x3fe00000
 80064d8:	4630      	mov	r0, r6
 80064da:	4639      	mov	r1, r7
 80064dc:	f7f9 fffc 	bl	80004d8 <__aeabi_dmul>
 80064e0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80064e2:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80064e6:	9c03      	ldr	r4, [sp, #12]
 80064e8:	9314      	str	r3, [sp, #80]	; 0x50
 80064ea:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80064ee:	f7fa faa3 	bl	8000a38 <__aeabi_d2iz>
 80064f2:	9015      	str	r0, [sp, #84]	; 0x54
 80064f4:	f7f9 ff86 	bl	8000404 <__aeabi_i2d>
 80064f8:	4602      	mov	r2, r0
 80064fa:	460b      	mov	r3, r1
 80064fc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006500:	f7f9 fe32 	bl	8000168 <__aeabi_dsub>
 8006504:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006506:	4606      	mov	r6, r0
 8006508:	3330      	adds	r3, #48	; 0x30
 800650a:	f804 3b01 	strb.w	r3, [r4], #1
 800650e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006510:	460f      	mov	r7, r1
 8006512:	429c      	cmp	r4, r3
 8006514:	f04f 0200 	mov.w	r2, #0
 8006518:	d124      	bne.n	8006564 <_dtoa_r+0x64c>
 800651a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800651e:	4bb0      	ldr	r3, [pc, #704]	; (80067e0 <_dtoa_r+0x8c8>)
 8006520:	f7f9 fe24 	bl	800016c <__adddf3>
 8006524:	4602      	mov	r2, r0
 8006526:	460b      	mov	r3, r1
 8006528:	4630      	mov	r0, r6
 800652a:	4639      	mov	r1, r7
 800652c:	f7fa fa64 	bl	80009f8 <__aeabi_dcmpgt>
 8006530:	2800      	cmp	r0, #0
 8006532:	d163      	bne.n	80065fc <_dtoa_r+0x6e4>
 8006534:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006538:	2000      	movs	r0, #0
 800653a:	49a9      	ldr	r1, [pc, #676]	; (80067e0 <_dtoa_r+0x8c8>)
 800653c:	f7f9 fe14 	bl	8000168 <__aeabi_dsub>
 8006540:	4602      	mov	r2, r0
 8006542:	460b      	mov	r3, r1
 8006544:	4630      	mov	r0, r6
 8006546:	4639      	mov	r1, r7
 8006548:	f7fa fa38 	bl	80009bc <__aeabi_dcmplt>
 800654c:	2800      	cmp	r0, #0
 800654e:	f43f af1d 	beq.w	800638c <_dtoa_r+0x474>
 8006552:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8006554:	1e7b      	subs	r3, r7, #1
 8006556:	9314      	str	r3, [sp, #80]	; 0x50
 8006558:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800655c:	2b30      	cmp	r3, #48	; 0x30
 800655e:	d0f8      	beq.n	8006552 <_dtoa_r+0x63a>
 8006560:	46c2      	mov	sl, r8
 8006562:	e03b      	b.n	80065dc <_dtoa_r+0x6c4>
 8006564:	4b9f      	ldr	r3, [pc, #636]	; (80067e4 <_dtoa_r+0x8cc>)
 8006566:	f7f9 ffb7 	bl	80004d8 <__aeabi_dmul>
 800656a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800656e:	e7bc      	b.n	80064ea <_dtoa_r+0x5d2>
 8006570:	9f03      	ldr	r7, [sp, #12]
 8006572:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8006576:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800657a:	4640      	mov	r0, r8
 800657c:	4649      	mov	r1, r9
 800657e:	f7fa f8d5 	bl	800072c <__aeabi_ddiv>
 8006582:	f7fa fa59 	bl	8000a38 <__aeabi_d2iz>
 8006586:	4604      	mov	r4, r0
 8006588:	f7f9 ff3c 	bl	8000404 <__aeabi_i2d>
 800658c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006590:	f7f9 ffa2 	bl	80004d8 <__aeabi_dmul>
 8006594:	4602      	mov	r2, r0
 8006596:	460b      	mov	r3, r1
 8006598:	4640      	mov	r0, r8
 800659a:	4649      	mov	r1, r9
 800659c:	f7f9 fde4 	bl	8000168 <__aeabi_dsub>
 80065a0:	f104 0630 	add.w	r6, r4, #48	; 0x30
 80065a4:	f807 6b01 	strb.w	r6, [r7], #1
 80065a8:	9e03      	ldr	r6, [sp, #12]
 80065aa:	f8dd c020 	ldr.w	ip, [sp, #32]
 80065ae:	1bbe      	subs	r6, r7, r6
 80065b0:	45b4      	cmp	ip, r6
 80065b2:	4602      	mov	r2, r0
 80065b4:	460b      	mov	r3, r1
 80065b6:	d136      	bne.n	8006626 <_dtoa_r+0x70e>
 80065b8:	f7f9 fdd8 	bl	800016c <__adddf3>
 80065bc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80065c0:	4680      	mov	r8, r0
 80065c2:	4689      	mov	r9, r1
 80065c4:	f7fa fa18 	bl	80009f8 <__aeabi_dcmpgt>
 80065c8:	bb58      	cbnz	r0, 8006622 <_dtoa_r+0x70a>
 80065ca:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80065ce:	4640      	mov	r0, r8
 80065d0:	4649      	mov	r1, r9
 80065d2:	f7fa f9e9 	bl	80009a8 <__aeabi_dcmpeq>
 80065d6:	b108      	cbz	r0, 80065dc <_dtoa_r+0x6c4>
 80065d8:	07e1      	lsls	r1, r4, #31
 80065da:	d422      	bmi.n	8006622 <_dtoa_r+0x70a>
 80065dc:	4628      	mov	r0, r5
 80065de:	4659      	mov	r1, fp
 80065e0:	f000 fe68 	bl	80072b4 <_Bfree>
 80065e4:	2300      	movs	r3, #0
 80065e6:	703b      	strb	r3, [r7, #0]
 80065e8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80065ea:	f10a 0001 	add.w	r0, sl, #1
 80065ee:	6018      	str	r0, [r3, #0]
 80065f0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	f43f acde 	beq.w	8005fb4 <_dtoa_r+0x9c>
 80065f8:	601f      	str	r7, [r3, #0]
 80065fa:	e4db      	b.n	8005fb4 <_dtoa_r+0x9c>
 80065fc:	4627      	mov	r7, r4
 80065fe:	463b      	mov	r3, r7
 8006600:	461f      	mov	r7, r3
 8006602:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006606:	2a39      	cmp	r2, #57	; 0x39
 8006608:	d107      	bne.n	800661a <_dtoa_r+0x702>
 800660a:	9a03      	ldr	r2, [sp, #12]
 800660c:	429a      	cmp	r2, r3
 800660e:	d1f7      	bne.n	8006600 <_dtoa_r+0x6e8>
 8006610:	2230      	movs	r2, #48	; 0x30
 8006612:	9903      	ldr	r1, [sp, #12]
 8006614:	f108 0801 	add.w	r8, r8, #1
 8006618:	700a      	strb	r2, [r1, #0]
 800661a:	781a      	ldrb	r2, [r3, #0]
 800661c:	3201      	adds	r2, #1
 800661e:	701a      	strb	r2, [r3, #0]
 8006620:	e79e      	b.n	8006560 <_dtoa_r+0x648>
 8006622:	46d0      	mov	r8, sl
 8006624:	e7eb      	b.n	80065fe <_dtoa_r+0x6e6>
 8006626:	2200      	movs	r2, #0
 8006628:	4b6e      	ldr	r3, [pc, #440]	; (80067e4 <_dtoa_r+0x8cc>)
 800662a:	f7f9 ff55 	bl	80004d8 <__aeabi_dmul>
 800662e:	2200      	movs	r2, #0
 8006630:	2300      	movs	r3, #0
 8006632:	4680      	mov	r8, r0
 8006634:	4689      	mov	r9, r1
 8006636:	f7fa f9b7 	bl	80009a8 <__aeabi_dcmpeq>
 800663a:	2800      	cmp	r0, #0
 800663c:	d09b      	beq.n	8006576 <_dtoa_r+0x65e>
 800663e:	e7cd      	b.n	80065dc <_dtoa_r+0x6c4>
 8006640:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006642:	2a00      	cmp	r2, #0
 8006644:	f000 80d0 	beq.w	80067e8 <_dtoa_r+0x8d0>
 8006648:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800664a:	2a01      	cmp	r2, #1
 800664c:	f300 80ae 	bgt.w	80067ac <_dtoa_r+0x894>
 8006650:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006652:	2a00      	cmp	r2, #0
 8006654:	f000 80a6 	beq.w	80067a4 <_dtoa_r+0x88c>
 8006658:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800665c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800665e:	9f06      	ldr	r7, [sp, #24]
 8006660:	9a06      	ldr	r2, [sp, #24]
 8006662:	2101      	movs	r1, #1
 8006664:	441a      	add	r2, r3
 8006666:	9206      	str	r2, [sp, #24]
 8006668:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800666a:	4628      	mov	r0, r5
 800666c:	441a      	add	r2, r3
 800666e:	9209      	str	r2, [sp, #36]	; 0x24
 8006670:	f000 ff20 	bl	80074b4 <__i2b>
 8006674:	4606      	mov	r6, r0
 8006676:	2f00      	cmp	r7, #0
 8006678:	dd0c      	ble.n	8006694 <_dtoa_r+0x77c>
 800667a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800667c:	2b00      	cmp	r3, #0
 800667e:	dd09      	ble.n	8006694 <_dtoa_r+0x77c>
 8006680:	42bb      	cmp	r3, r7
 8006682:	bfa8      	it	ge
 8006684:	463b      	movge	r3, r7
 8006686:	9a06      	ldr	r2, [sp, #24]
 8006688:	1aff      	subs	r7, r7, r3
 800668a:	1ad2      	subs	r2, r2, r3
 800668c:	9206      	str	r2, [sp, #24]
 800668e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006690:	1ad3      	subs	r3, r2, r3
 8006692:	9309      	str	r3, [sp, #36]	; 0x24
 8006694:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006696:	b1f3      	cbz	r3, 80066d6 <_dtoa_r+0x7be>
 8006698:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800669a:	2b00      	cmp	r3, #0
 800669c:	f000 80a8 	beq.w	80067f0 <_dtoa_r+0x8d8>
 80066a0:	2c00      	cmp	r4, #0
 80066a2:	dd10      	ble.n	80066c6 <_dtoa_r+0x7ae>
 80066a4:	4631      	mov	r1, r6
 80066a6:	4622      	mov	r2, r4
 80066a8:	4628      	mov	r0, r5
 80066aa:	f000 ffc1 	bl	8007630 <__pow5mult>
 80066ae:	465a      	mov	r2, fp
 80066b0:	4601      	mov	r1, r0
 80066b2:	4606      	mov	r6, r0
 80066b4:	4628      	mov	r0, r5
 80066b6:	f000 ff13 	bl	80074e0 <__multiply>
 80066ba:	4680      	mov	r8, r0
 80066bc:	4659      	mov	r1, fp
 80066be:	4628      	mov	r0, r5
 80066c0:	f000 fdf8 	bl	80072b4 <_Bfree>
 80066c4:	46c3      	mov	fp, r8
 80066c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80066c8:	1b1a      	subs	r2, r3, r4
 80066ca:	d004      	beq.n	80066d6 <_dtoa_r+0x7be>
 80066cc:	4659      	mov	r1, fp
 80066ce:	4628      	mov	r0, r5
 80066d0:	f000 ffae 	bl	8007630 <__pow5mult>
 80066d4:	4683      	mov	fp, r0
 80066d6:	2101      	movs	r1, #1
 80066d8:	4628      	mov	r0, r5
 80066da:	f000 feeb 	bl	80074b4 <__i2b>
 80066de:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80066e0:	4604      	mov	r4, r0
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	f340 8086 	ble.w	80067f4 <_dtoa_r+0x8dc>
 80066e8:	461a      	mov	r2, r3
 80066ea:	4601      	mov	r1, r0
 80066ec:	4628      	mov	r0, r5
 80066ee:	f000 ff9f 	bl	8007630 <__pow5mult>
 80066f2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80066f4:	4604      	mov	r4, r0
 80066f6:	2b01      	cmp	r3, #1
 80066f8:	dd7f      	ble.n	80067fa <_dtoa_r+0x8e2>
 80066fa:	f04f 0800 	mov.w	r8, #0
 80066fe:	6923      	ldr	r3, [r4, #16]
 8006700:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006704:	6918      	ldr	r0, [r3, #16]
 8006706:	f000 fe87 	bl	8007418 <__hi0bits>
 800670a:	f1c0 0020 	rsb	r0, r0, #32
 800670e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006710:	4418      	add	r0, r3
 8006712:	f010 001f 	ands.w	r0, r0, #31
 8006716:	f000 8092 	beq.w	800683e <_dtoa_r+0x926>
 800671a:	f1c0 0320 	rsb	r3, r0, #32
 800671e:	2b04      	cmp	r3, #4
 8006720:	f340 808a 	ble.w	8006838 <_dtoa_r+0x920>
 8006724:	f1c0 001c 	rsb	r0, r0, #28
 8006728:	9b06      	ldr	r3, [sp, #24]
 800672a:	4407      	add	r7, r0
 800672c:	4403      	add	r3, r0
 800672e:	9306      	str	r3, [sp, #24]
 8006730:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006732:	4403      	add	r3, r0
 8006734:	9309      	str	r3, [sp, #36]	; 0x24
 8006736:	9b06      	ldr	r3, [sp, #24]
 8006738:	2b00      	cmp	r3, #0
 800673a:	dd05      	ble.n	8006748 <_dtoa_r+0x830>
 800673c:	4659      	mov	r1, fp
 800673e:	461a      	mov	r2, r3
 8006740:	4628      	mov	r0, r5
 8006742:	f000 ffcf 	bl	80076e4 <__lshift>
 8006746:	4683      	mov	fp, r0
 8006748:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800674a:	2b00      	cmp	r3, #0
 800674c:	dd05      	ble.n	800675a <_dtoa_r+0x842>
 800674e:	4621      	mov	r1, r4
 8006750:	461a      	mov	r2, r3
 8006752:	4628      	mov	r0, r5
 8006754:	f000 ffc6 	bl	80076e4 <__lshift>
 8006758:	4604      	mov	r4, r0
 800675a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800675c:	2b00      	cmp	r3, #0
 800675e:	d070      	beq.n	8006842 <_dtoa_r+0x92a>
 8006760:	4621      	mov	r1, r4
 8006762:	4658      	mov	r0, fp
 8006764:	f001 f82e 	bl	80077c4 <__mcmp>
 8006768:	2800      	cmp	r0, #0
 800676a:	da6a      	bge.n	8006842 <_dtoa_r+0x92a>
 800676c:	2300      	movs	r3, #0
 800676e:	4659      	mov	r1, fp
 8006770:	220a      	movs	r2, #10
 8006772:	4628      	mov	r0, r5
 8006774:	f000 fdc0 	bl	80072f8 <__multadd>
 8006778:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800677a:	4683      	mov	fp, r0
 800677c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006780:	2b00      	cmp	r3, #0
 8006782:	f000 8194 	beq.w	8006aae <_dtoa_r+0xb96>
 8006786:	4631      	mov	r1, r6
 8006788:	2300      	movs	r3, #0
 800678a:	220a      	movs	r2, #10
 800678c:	4628      	mov	r0, r5
 800678e:	f000 fdb3 	bl	80072f8 <__multadd>
 8006792:	f1b9 0f00 	cmp.w	r9, #0
 8006796:	4606      	mov	r6, r0
 8006798:	f300 8093 	bgt.w	80068c2 <_dtoa_r+0x9aa>
 800679c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800679e:	2b02      	cmp	r3, #2
 80067a0:	dc57      	bgt.n	8006852 <_dtoa_r+0x93a>
 80067a2:	e08e      	b.n	80068c2 <_dtoa_r+0x9aa>
 80067a4:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80067a6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80067aa:	e757      	b.n	800665c <_dtoa_r+0x744>
 80067ac:	9b08      	ldr	r3, [sp, #32]
 80067ae:	1e5c      	subs	r4, r3, #1
 80067b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80067b2:	42a3      	cmp	r3, r4
 80067b4:	bfb7      	itett	lt
 80067b6:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80067b8:	1b1c      	subge	r4, r3, r4
 80067ba:	1ae2      	sublt	r2, r4, r3
 80067bc:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80067be:	bfbe      	ittt	lt
 80067c0:	940a      	strlt	r4, [sp, #40]	; 0x28
 80067c2:	189b      	addlt	r3, r3, r2
 80067c4:	930e      	strlt	r3, [sp, #56]	; 0x38
 80067c6:	9b08      	ldr	r3, [sp, #32]
 80067c8:	bfb8      	it	lt
 80067ca:	2400      	movlt	r4, #0
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	bfbb      	ittet	lt
 80067d0:	9b06      	ldrlt	r3, [sp, #24]
 80067d2:	9a08      	ldrlt	r2, [sp, #32]
 80067d4:	9f06      	ldrge	r7, [sp, #24]
 80067d6:	1a9f      	sublt	r7, r3, r2
 80067d8:	bfac      	ite	ge
 80067da:	9b08      	ldrge	r3, [sp, #32]
 80067dc:	2300      	movlt	r3, #0
 80067de:	e73f      	b.n	8006660 <_dtoa_r+0x748>
 80067e0:	3fe00000 	.word	0x3fe00000
 80067e4:	40240000 	.word	0x40240000
 80067e8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80067ea:	9f06      	ldr	r7, [sp, #24]
 80067ec:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80067ee:	e742      	b.n	8006676 <_dtoa_r+0x75e>
 80067f0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80067f2:	e76b      	b.n	80066cc <_dtoa_r+0x7b4>
 80067f4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80067f6:	2b01      	cmp	r3, #1
 80067f8:	dc19      	bgt.n	800682e <_dtoa_r+0x916>
 80067fa:	9b04      	ldr	r3, [sp, #16]
 80067fc:	b9bb      	cbnz	r3, 800682e <_dtoa_r+0x916>
 80067fe:	9b05      	ldr	r3, [sp, #20]
 8006800:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006804:	b99b      	cbnz	r3, 800682e <_dtoa_r+0x916>
 8006806:	9b05      	ldr	r3, [sp, #20]
 8006808:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800680c:	0d1b      	lsrs	r3, r3, #20
 800680e:	051b      	lsls	r3, r3, #20
 8006810:	b183      	cbz	r3, 8006834 <_dtoa_r+0x91c>
 8006812:	f04f 0801 	mov.w	r8, #1
 8006816:	9b06      	ldr	r3, [sp, #24]
 8006818:	3301      	adds	r3, #1
 800681a:	9306      	str	r3, [sp, #24]
 800681c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800681e:	3301      	adds	r3, #1
 8006820:	9309      	str	r3, [sp, #36]	; 0x24
 8006822:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006824:	2b00      	cmp	r3, #0
 8006826:	f47f af6a 	bne.w	80066fe <_dtoa_r+0x7e6>
 800682a:	2001      	movs	r0, #1
 800682c:	e76f      	b.n	800670e <_dtoa_r+0x7f6>
 800682e:	f04f 0800 	mov.w	r8, #0
 8006832:	e7f6      	b.n	8006822 <_dtoa_r+0x90a>
 8006834:	4698      	mov	r8, r3
 8006836:	e7f4      	b.n	8006822 <_dtoa_r+0x90a>
 8006838:	f43f af7d 	beq.w	8006736 <_dtoa_r+0x81e>
 800683c:	4618      	mov	r0, r3
 800683e:	301c      	adds	r0, #28
 8006840:	e772      	b.n	8006728 <_dtoa_r+0x810>
 8006842:	9b08      	ldr	r3, [sp, #32]
 8006844:	2b00      	cmp	r3, #0
 8006846:	dc36      	bgt.n	80068b6 <_dtoa_r+0x99e>
 8006848:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800684a:	2b02      	cmp	r3, #2
 800684c:	dd33      	ble.n	80068b6 <_dtoa_r+0x99e>
 800684e:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006852:	f1b9 0f00 	cmp.w	r9, #0
 8006856:	d10d      	bne.n	8006874 <_dtoa_r+0x95c>
 8006858:	4621      	mov	r1, r4
 800685a:	464b      	mov	r3, r9
 800685c:	2205      	movs	r2, #5
 800685e:	4628      	mov	r0, r5
 8006860:	f000 fd4a 	bl	80072f8 <__multadd>
 8006864:	4601      	mov	r1, r0
 8006866:	4604      	mov	r4, r0
 8006868:	4658      	mov	r0, fp
 800686a:	f000 ffab 	bl	80077c4 <__mcmp>
 800686e:	2800      	cmp	r0, #0
 8006870:	f73f adb8 	bgt.w	80063e4 <_dtoa_r+0x4cc>
 8006874:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006876:	9f03      	ldr	r7, [sp, #12]
 8006878:	ea6f 0a03 	mvn.w	sl, r3
 800687c:	f04f 0800 	mov.w	r8, #0
 8006880:	4621      	mov	r1, r4
 8006882:	4628      	mov	r0, r5
 8006884:	f000 fd16 	bl	80072b4 <_Bfree>
 8006888:	2e00      	cmp	r6, #0
 800688a:	f43f aea7 	beq.w	80065dc <_dtoa_r+0x6c4>
 800688e:	f1b8 0f00 	cmp.w	r8, #0
 8006892:	d005      	beq.n	80068a0 <_dtoa_r+0x988>
 8006894:	45b0      	cmp	r8, r6
 8006896:	d003      	beq.n	80068a0 <_dtoa_r+0x988>
 8006898:	4641      	mov	r1, r8
 800689a:	4628      	mov	r0, r5
 800689c:	f000 fd0a 	bl	80072b4 <_Bfree>
 80068a0:	4631      	mov	r1, r6
 80068a2:	4628      	mov	r0, r5
 80068a4:	f000 fd06 	bl	80072b4 <_Bfree>
 80068a8:	e698      	b.n	80065dc <_dtoa_r+0x6c4>
 80068aa:	2400      	movs	r4, #0
 80068ac:	4626      	mov	r6, r4
 80068ae:	e7e1      	b.n	8006874 <_dtoa_r+0x95c>
 80068b0:	46c2      	mov	sl, r8
 80068b2:	4626      	mov	r6, r4
 80068b4:	e596      	b.n	80063e4 <_dtoa_r+0x4cc>
 80068b6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80068b8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80068bc:	2b00      	cmp	r3, #0
 80068be:	f000 80fd 	beq.w	8006abc <_dtoa_r+0xba4>
 80068c2:	2f00      	cmp	r7, #0
 80068c4:	dd05      	ble.n	80068d2 <_dtoa_r+0x9ba>
 80068c6:	4631      	mov	r1, r6
 80068c8:	463a      	mov	r2, r7
 80068ca:	4628      	mov	r0, r5
 80068cc:	f000 ff0a 	bl	80076e4 <__lshift>
 80068d0:	4606      	mov	r6, r0
 80068d2:	f1b8 0f00 	cmp.w	r8, #0
 80068d6:	d05c      	beq.n	8006992 <_dtoa_r+0xa7a>
 80068d8:	4628      	mov	r0, r5
 80068da:	6871      	ldr	r1, [r6, #4]
 80068dc:	f000 fcaa 	bl	8007234 <_Balloc>
 80068e0:	4607      	mov	r7, r0
 80068e2:	b928      	cbnz	r0, 80068f0 <_dtoa_r+0x9d8>
 80068e4:	4602      	mov	r2, r0
 80068e6:	f240 21ea 	movw	r1, #746	; 0x2ea
 80068ea:	4b7f      	ldr	r3, [pc, #508]	; (8006ae8 <_dtoa_r+0xbd0>)
 80068ec:	f7ff bb28 	b.w	8005f40 <_dtoa_r+0x28>
 80068f0:	6932      	ldr	r2, [r6, #16]
 80068f2:	f106 010c 	add.w	r1, r6, #12
 80068f6:	3202      	adds	r2, #2
 80068f8:	0092      	lsls	r2, r2, #2
 80068fa:	300c      	adds	r0, #12
 80068fc:	f000 fc8c 	bl	8007218 <memcpy>
 8006900:	2201      	movs	r2, #1
 8006902:	4639      	mov	r1, r7
 8006904:	4628      	mov	r0, r5
 8006906:	f000 feed 	bl	80076e4 <__lshift>
 800690a:	46b0      	mov	r8, r6
 800690c:	4606      	mov	r6, r0
 800690e:	9b03      	ldr	r3, [sp, #12]
 8006910:	3301      	adds	r3, #1
 8006912:	9308      	str	r3, [sp, #32]
 8006914:	9b03      	ldr	r3, [sp, #12]
 8006916:	444b      	add	r3, r9
 8006918:	930a      	str	r3, [sp, #40]	; 0x28
 800691a:	9b04      	ldr	r3, [sp, #16]
 800691c:	f003 0301 	and.w	r3, r3, #1
 8006920:	9309      	str	r3, [sp, #36]	; 0x24
 8006922:	9b08      	ldr	r3, [sp, #32]
 8006924:	4621      	mov	r1, r4
 8006926:	3b01      	subs	r3, #1
 8006928:	4658      	mov	r0, fp
 800692a:	9304      	str	r3, [sp, #16]
 800692c:	f7ff fa68 	bl	8005e00 <quorem>
 8006930:	4603      	mov	r3, r0
 8006932:	4641      	mov	r1, r8
 8006934:	3330      	adds	r3, #48	; 0x30
 8006936:	9006      	str	r0, [sp, #24]
 8006938:	4658      	mov	r0, fp
 800693a:	930b      	str	r3, [sp, #44]	; 0x2c
 800693c:	f000 ff42 	bl	80077c4 <__mcmp>
 8006940:	4632      	mov	r2, r6
 8006942:	4681      	mov	r9, r0
 8006944:	4621      	mov	r1, r4
 8006946:	4628      	mov	r0, r5
 8006948:	f000 ff58 	bl	80077fc <__mdiff>
 800694c:	68c2      	ldr	r2, [r0, #12]
 800694e:	4607      	mov	r7, r0
 8006950:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006952:	bb02      	cbnz	r2, 8006996 <_dtoa_r+0xa7e>
 8006954:	4601      	mov	r1, r0
 8006956:	4658      	mov	r0, fp
 8006958:	f000 ff34 	bl	80077c4 <__mcmp>
 800695c:	4602      	mov	r2, r0
 800695e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006960:	4639      	mov	r1, r7
 8006962:	4628      	mov	r0, r5
 8006964:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8006968:	f000 fca4 	bl	80072b4 <_Bfree>
 800696c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800696e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006970:	9f08      	ldr	r7, [sp, #32]
 8006972:	ea43 0102 	orr.w	r1, r3, r2
 8006976:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006978:	430b      	orrs	r3, r1
 800697a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800697c:	d10d      	bne.n	800699a <_dtoa_r+0xa82>
 800697e:	2b39      	cmp	r3, #57	; 0x39
 8006980:	d029      	beq.n	80069d6 <_dtoa_r+0xabe>
 8006982:	f1b9 0f00 	cmp.w	r9, #0
 8006986:	dd01      	ble.n	800698c <_dtoa_r+0xa74>
 8006988:	9b06      	ldr	r3, [sp, #24]
 800698a:	3331      	adds	r3, #49	; 0x31
 800698c:	9a04      	ldr	r2, [sp, #16]
 800698e:	7013      	strb	r3, [r2, #0]
 8006990:	e776      	b.n	8006880 <_dtoa_r+0x968>
 8006992:	4630      	mov	r0, r6
 8006994:	e7b9      	b.n	800690a <_dtoa_r+0x9f2>
 8006996:	2201      	movs	r2, #1
 8006998:	e7e2      	b.n	8006960 <_dtoa_r+0xa48>
 800699a:	f1b9 0f00 	cmp.w	r9, #0
 800699e:	db06      	blt.n	80069ae <_dtoa_r+0xa96>
 80069a0:	9922      	ldr	r1, [sp, #136]	; 0x88
 80069a2:	ea41 0909 	orr.w	r9, r1, r9
 80069a6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80069a8:	ea59 0101 	orrs.w	r1, r9, r1
 80069ac:	d120      	bne.n	80069f0 <_dtoa_r+0xad8>
 80069ae:	2a00      	cmp	r2, #0
 80069b0:	ddec      	ble.n	800698c <_dtoa_r+0xa74>
 80069b2:	4659      	mov	r1, fp
 80069b4:	2201      	movs	r2, #1
 80069b6:	4628      	mov	r0, r5
 80069b8:	9308      	str	r3, [sp, #32]
 80069ba:	f000 fe93 	bl	80076e4 <__lshift>
 80069be:	4621      	mov	r1, r4
 80069c0:	4683      	mov	fp, r0
 80069c2:	f000 feff 	bl	80077c4 <__mcmp>
 80069c6:	2800      	cmp	r0, #0
 80069c8:	9b08      	ldr	r3, [sp, #32]
 80069ca:	dc02      	bgt.n	80069d2 <_dtoa_r+0xaba>
 80069cc:	d1de      	bne.n	800698c <_dtoa_r+0xa74>
 80069ce:	07da      	lsls	r2, r3, #31
 80069d0:	d5dc      	bpl.n	800698c <_dtoa_r+0xa74>
 80069d2:	2b39      	cmp	r3, #57	; 0x39
 80069d4:	d1d8      	bne.n	8006988 <_dtoa_r+0xa70>
 80069d6:	2339      	movs	r3, #57	; 0x39
 80069d8:	9a04      	ldr	r2, [sp, #16]
 80069da:	7013      	strb	r3, [r2, #0]
 80069dc:	463b      	mov	r3, r7
 80069de:	461f      	mov	r7, r3
 80069e0:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 80069e4:	3b01      	subs	r3, #1
 80069e6:	2a39      	cmp	r2, #57	; 0x39
 80069e8:	d050      	beq.n	8006a8c <_dtoa_r+0xb74>
 80069ea:	3201      	adds	r2, #1
 80069ec:	701a      	strb	r2, [r3, #0]
 80069ee:	e747      	b.n	8006880 <_dtoa_r+0x968>
 80069f0:	2a00      	cmp	r2, #0
 80069f2:	dd03      	ble.n	80069fc <_dtoa_r+0xae4>
 80069f4:	2b39      	cmp	r3, #57	; 0x39
 80069f6:	d0ee      	beq.n	80069d6 <_dtoa_r+0xabe>
 80069f8:	3301      	adds	r3, #1
 80069fa:	e7c7      	b.n	800698c <_dtoa_r+0xa74>
 80069fc:	9a08      	ldr	r2, [sp, #32]
 80069fe:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006a00:	f802 3c01 	strb.w	r3, [r2, #-1]
 8006a04:	428a      	cmp	r2, r1
 8006a06:	d02a      	beq.n	8006a5e <_dtoa_r+0xb46>
 8006a08:	4659      	mov	r1, fp
 8006a0a:	2300      	movs	r3, #0
 8006a0c:	220a      	movs	r2, #10
 8006a0e:	4628      	mov	r0, r5
 8006a10:	f000 fc72 	bl	80072f8 <__multadd>
 8006a14:	45b0      	cmp	r8, r6
 8006a16:	4683      	mov	fp, r0
 8006a18:	f04f 0300 	mov.w	r3, #0
 8006a1c:	f04f 020a 	mov.w	r2, #10
 8006a20:	4641      	mov	r1, r8
 8006a22:	4628      	mov	r0, r5
 8006a24:	d107      	bne.n	8006a36 <_dtoa_r+0xb1e>
 8006a26:	f000 fc67 	bl	80072f8 <__multadd>
 8006a2a:	4680      	mov	r8, r0
 8006a2c:	4606      	mov	r6, r0
 8006a2e:	9b08      	ldr	r3, [sp, #32]
 8006a30:	3301      	adds	r3, #1
 8006a32:	9308      	str	r3, [sp, #32]
 8006a34:	e775      	b.n	8006922 <_dtoa_r+0xa0a>
 8006a36:	f000 fc5f 	bl	80072f8 <__multadd>
 8006a3a:	4631      	mov	r1, r6
 8006a3c:	4680      	mov	r8, r0
 8006a3e:	2300      	movs	r3, #0
 8006a40:	220a      	movs	r2, #10
 8006a42:	4628      	mov	r0, r5
 8006a44:	f000 fc58 	bl	80072f8 <__multadd>
 8006a48:	4606      	mov	r6, r0
 8006a4a:	e7f0      	b.n	8006a2e <_dtoa_r+0xb16>
 8006a4c:	f1b9 0f00 	cmp.w	r9, #0
 8006a50:	bfcc      	ite	gt
 8006a52:	464f      	movgt	r7, r9
 8006a54:	2701      	movle	r7, #1
 8006a56:	f04f 0800 	mov.w	r8, #0
 8006a5a:	9a03      	ldr	r2, [sp, #12]
 8006a5c:	4417      	add	r7, r2
 8006a5e:	4659      	mov	r1, fp
 8006a60:	2201      	movs	r2, #1
 8006a62:	4628      	mov	r0, r5
 8006a64:	9308      	str	r3, [sp, #32]
 8006a66:	f000 fe3d 	bl	80076e4 <__lshift>
 8006a6a:	4621      	mov	r1, r4
 8006a6c:	4683      	mov	fp, r0
 8006a6e:	f000 fea9 	bl	80077c4 <__mcmp>
 8006a72:	2800      	cmp	r0, #0
 8006a74:	dcb2      	bgt.n	80069dc <_dtoa_r+0xac4>
 8006a76:	d102      	bne.n	8006a7e <_dtoa_r+0xb66>
 8006a78:	9b08      	ldr	r3, [sp, #32]
 8006a7a:	07db      	lsls	r3, r3, #31
 8006a7c:	d4ae      	bmi.n	80069dc <_dtoa_r+0xac4>
 8006a7e:	463b      	mov	r3, r7
 8006a80:	461f      	mov	r7, r3
 8006a82:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006a86:	2a30      	cmp	r2, #48	; 0x30
 8006a88:	d0fa      	beq.n	8006a80 <_dtoa_r+0xb68>
 8006a8a:	e6f9      	b.n	8006880 <_dtoa_r+0x968>
 8006a8c:	9a03      	ldr	r2, [sp, #12]
 8006a8e:	429a      	cmp	r2, r3
 8006a90:	d1a5      	bne.n	80069de <_dtoa_r+0xac6>
 8006a92:	2331      	movs	r3, #49	; 0x31
 8006a94:	f10a 0a01 	add.w	sl, sl, #1
 8006a98:	e779      	b.n	800698e <_dtoa_r+0xa76>
 8006a9a:	4b14      	ldr	r3, [pc, #80]	; (8006aec <_dtoa_r+0xbd4>)
 8006a9c:	f7ff baa8 	b.w	8005ff0 <_dtoa_r+0xd8>
 8006aa0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	f47f aa81 	bne.w	8005faa <_dtoa_r+0x92>
 8006aa8:	4b11      	ldr	r3, [pc, #68]	; (8006af0 <_dtoa_r+0xbd8>)
 8006aaa:	f7ff baa1 	b.w	8005ff0 <_dtoa_r+0xd8>
 8006aae:	f1b9 0f00 	cmp.w	r9, #0
 8006ab2:	dc03      	bgt.n	8006abc <_dtoa_r+0xba4>
 8006ab4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006ab6:	2b02      	cmp	r3, #2
 8006ab8:	f73f aecb 	bgt.w	8006852 <_dtoa_r+0x93a>
 8006abc:	9f03      	ldr	r7, [sp, #12]
 8006abe:	4621      	mov	r1, r4
 8006ac0:	4658      	mov	r0, fp
 8006ac2:	f7ff f99d 	bl	8005e00 <quorem>
 8006ac6:	9a03      	ldr	r2, [sp, #12]
 8006ac8:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8006acc:	f807 3b01 	strb.w	r3, [r7], #1
 8006ad0:	1aba      	subs	r2, r7, r2
 8006ad2:	4591      	cmp	r9, r2
 8006ad4:	ddba      	ble.n	8006a4c <_dtoa_r+0xb34>
 8006ad6:	4659      	mov	r1, fp
 8006ad8:	2300      	movs	r3, #0
 8006ada:	220a      	movs	r2, #10
 8006adc:	4628      	mov	r0, r5
 8006ade:	f000 fc0b 	bl	80072f8 <__multadd>
 8006ae2:	4683      	mov	fp, r0
 8006ae4:	e7eb      	b.n	8006abe <_dtoa_r+0xba6>
 8006ae6:	bf00      	nop
 8006ae8:	08009dd0 	.word	0x08009dd0
 8006aec:	08009bd0 	.word	0x08009bd0
 8006af0:	08009d51 	.word	0x08009d51

08006af4 <rshift>:
 8006af4:	6903      	ldr	r3, [r0, #16]
 8006af6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006afa:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8006afe:	f100 0414 	add.w	r4, r0, #20
 8006b02:	ea4f 1261 	mov.w	r2, r1, asr #5
 8006b06:	dd46      	ble.n	8006b96 <rshift+0xa2>
 8006b08:	f011 011f 	ands.w	r1, r1, #31
 8006b0c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8006b10:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8006b14:	d10c      	bne.n	8006b30 <rshift+0x3c>
 8006b16:	4629      	mov	r1, r5
 8006b18:	f100 0710 	add.w	r7, r0, #16
 8006b1c:	42b1      	cmp	r1, r6
 8006b1e:	d335      	bcc.n	8006b8c <rshift+0x98>
 8006b20:	1a9b      	subs	r3, r3, r2
 8006b22:	009b      	lsls	r3, r3, #2
 8006b24:	1eea      	subs	r2, r5, #3
 8006b26:	4296      	cmp	r6, r2
 8006b28:	bf38      	it	cc
 8006b2a:	2300      	movcc	r3, #0
 8006b2c:	4423      	add	r3, r4
 8006b2e:	e015      	b.n	8006b5c <rshift+0x68>
 8006b30:	46a1      	mov	r9, r4
 8006b32:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8006b36:	f1c1 0820 	rsb	r8, r1, #32
 8006b3a:	40cf      	lsrs	r7, r1
 8006b3c:	f105 0e04 	add.w	lr, r5, #4
 8006b40:	4576      	cmp	r6, lr
 8006b42:	46f4      	mov	ip, lr
 8006b44:	d816      	bhi.n	8006b74 <rshift+0x80>
 8006b46:	1a9a      	subs	r2, r3, r2
 8006b48:	0092      	lsls	r2, r2, #2
 8006b4a:	3a04      	subs	r2, #4
 8006b4c:	3501      	adds	r5, #1
 8006b4e:	42ae      	cmp	r6, r5
 8006b50:	bf38      	it	cc
 8006b52:	2200      	movcc	r2, #0
 8006b54:	18a3      	adds	r3, r4, r2
 8006b56:	50a7      	str	r7, [r4, r2]
 8006b58:	b107      	cbz	r7, 8006b5c <rshift+0x68>
 8006b5a:	3304      	adds	r3, #4
 8006b5c:	42a3      	cmp	r3, r4
 8006b5e:	eba3 0204 	sub.w	r2, r3, r4
 8006b62:	bf08      	it	eq
 8006b64:	2300      	moveq	r3, #0
 8006b66:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8006b6a:	6102      	str	r2, [r0, #16]
 8006b6c:	bf08      	it	eq
 8006b6e:	6143      	streq	r3, [r0, #20]
 8006b70:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006b74:	f8dc c000 	ldr.w	ip, [ip]
 8006b78:	fa0c fc08 	lsl.w	ip, ip, r8
 8006b7c:	ea4c 0707 	orr.w	r7, ip, r7
 8006b80:	f849 7b04 	str.w	r7, [r9], #4
 8006b84:	f85e 7b04 	ldr.w	r7, [lr], #4
 8006b88:	40cf      	lsrs	r7, r1
 8006b8a:	e7d9      	b.n	8006b40 <rshift+0x4c>
 8006b8c:	f851 cb04 	ldr.w	ip, [r1], #4
 8006b90:	f847 cf04 	str.w	ip, [r7, #4]!
 8006b94:	e7c2      	b.n	8006b1c <rshift+0x28>
 8006b96:	4623      	mov	r3, r4
 8006b98:	e7e0      	b.n	8006b5c <rshift+0x68>

08006b9a <__hexdig_fun>:
 8006b9a:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8006b9e:	2b09      	cmp	r3, #9
 8006ba0:	d802      	bhi.n	8006ba8 <__hexdig_fun+0xe>
 8006ba2:	3820      	subs	r0, #32
 8006ba4:	b2c0      	uxtb	r0, r0
 8006ba6:	4770      	bx	lr
 8006ba8:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8006bac:	2b05      	cmp	r3, #5
 8006bae:	d801      	bhi.n	8006bb4 <__hexdig_fun+0x1a>
 8006bb0:	3847      	subs	r0, #71	; 0x47
 8006bb2:	e7f7      	b.n	8006ba4 <__hexdig_fun+0xa>
 8006bb4:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8006bb8:	2b05      	cmp	r3, #5
 8006bba:	d801      	bhi.n	8006bc0 <__hexdig_fun+0x26>
 8006bbc:	3827      	subs	r0, #39	; 0x27
 8006bbe:	e7f1      	b.n	8006ba4 <__hexdig_fun+0xa>
 8006bc0:	2000      	movs	r0, #0
 8006bc2:	4770      	bx	lr

08006bc4 <__gethex>:
 8006bc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bc8:	b08b      	sub	sp, #44	; 0x2c
 8006bca:	9305      	str	r3, [sp, #20]
 8006bcc:	4bb2      	ldr	r3, [pc, #712]	; (8006e98 <__gethex+0x2d4>)
 8006bce:	9002      	str	r0, [sp, #8]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	468b      	mov	fp, r1
 8006bd4:	4618      	mov	r0, r3
 8006bd6:	4690      	mov	r8, r2
 8006bd8:	9303      	str	r3, [sp, #12]
 8006bda:	f7f9 fab9 	bl	8000150 <strlen>
 8006bde:	4682      	mov	sl, r0
 8006be0:	9b03      	ldr	r3, [sp, #12]
 8006be2:	f8db 2000 	ldr.w	r2, [fp]
 8006be6:	4403      	add	r3, r0
 8006be8:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8006bec:	9306      	str	r3, [sp, #24]
 8006bee:	1c93      	adds	r3, r2, #2
 8006bf0:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8006bf4:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8006bf8:	32fe      	adds	r2, #254	; 0xfe
 8006bfa:	18d1      	adds	r1, r2, r3
 8006bfc:	461f      	mov	r7, r3
 8006bfe:	f813 0b01 	ldrb.w	r0, [r3], #1
 8006c02:	9101      	str	r1, [sp, #4]
 8006c04:	2830      	cmp	r0, #48	; 0x30
 8006c06:	d0f8      	beq.n	8006bfa <__gethex+0x36>
 8006c08:	f7ff ffc7 	bl	8006b9a <__hexdig_fun>
 8006c0c:	4604      	mov	r4, r0
 8006c0e:	2800      	cmp	r0, #0
 8006c10:	d13a      	bne.n	8006c88 <__gethex+0xc4>
 8006c12:	4652      	mov	r2, sl
 8006c14:	4638      	mov	r0, r7
 8006c16:	9903      	ldr	r1, [sp, #12]
 8006c18:	f001 fa26 	bl	8008068 <strncmp>
 8006c1c:	4605      	mov	r5, r0
 8006c1e:	2800      	cmp	r0, #0
 8006c20:	d166      	bne.n	8006cf0 <__gethex+0x12c>
 8006c22:	f817 000a 	ldrb.w	r0, [r7, sl]
 8006c26:	eb07 060a 	add.w	r6, r7, sl
 8006c2a:	f7ff ffb6 	bl	8006b9a <__hexdig_fun>
 8006c2e:	2800      	cmp	r0, #0
 8006c30:	d060      	beq.n	8006cf4 <__gethex+0x130>
 8006c32:	4633      	mov	r3, r6
 8006c34:	7818      	ldrb	r0, [r3, #0]
 8006c36:	461f      	mov	r7, r3
 8006c38:	2830      	cmp	r0, #48	; 0x30
 8006c3a:	f103 0301 	add.w	r3, r3, #1
 8006c3e:	d0f9      	beq.n	8006c34 <__gethex+0x70>
 8006c40:	f7ff ffab 	bl	8006b9a <__hexdig_fun>
 8006c44:	2301      	movs	r3, #1
 8006c46:	fab0 f480 	clz	r4, r0
 8006c4a:	4635      	mov	r5, r6
 8006c4c:	0964      	lsrs	r4, r4, #5
 8006c4e:	9301      	str	r3, [sp, #4]
 8006c50:	463a      	mov	r2, r7
 8006c52:	4616      	mov	r6, r2
 8006c54:	7830      	ldrb	r0, [r6, #0]
 8006c56:	3201      	adds	r2, #1
 8006c58:	f7ff ff9f 	bl	8006b9a <__hexdig_fun>
 8006c5c:	2800      	cmp	r0, #0
 8006c5e:	d1f8      	bne.n	8006c52 <__gethex+0x8e>
 8006c60:	4652      	mov	r2, sl
 8006c62:	4630      	mov	r0, r6
 8006c64:	9903      	ldr	r1, [sp, #12]
 8006c66:	f001 f9ff 	bl	8008068 <strncmp>
 8006c6a:	b980      	cbnz	r0, 8006c8e <__gethex+0xca>
 8006c6c:	b94d      	cbnz	r5, 8006c82 <__gethex+0xbe>
 8006c6e:	eb06 050a 	add.w	r5, r6, sl
 8006c72:	462a      	mov	r2, r5
 8006c74:	4616      	mov	r6, r2
 8006c76:	7830      	ldrb	r0, [r6, #0]
 8006c78:	3201      	adds	r2, #1
 8006c7a:	f7ff ff8e 	bl	8006b9a <__hexdig_fun>
 8006c7e:	2800      	cmp	r0, #0
 8006c80:	d1f8      	bne.n	8006c74 <__gethex+0xb0>
 8006c82:	1bad      	subs	r5, r5, r6
 8006c84:	00ad      	lsls	r5, r5, #2
 8006c86:	e004      	b.n	8006c92 <__gethex+0xce>
 8006c88:	2400      	movs	r4, #0
 8006c8a:	4625      	mov	r5, r4
 8006c8c:	e7e0      	b.n	8006c50 <__gethex+0x8c>
 8006c8e:	2d00      	cmp	r5, #0
 8006c90:	d1f7      	bne.n	8006c82 <__gethex+0xbe>
 8006c92:	7833      	ldrb	r3, [r6, #0]
 8006c94:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8006c98:	2b50      	cmp	r3, #80	; 0x50
 8006c9a:	d139      	bne.n	8006d10 <__gethex+0x14c>
 8006c9c:	7873      	ldrb	r3, [r6, #1]
 8006c9e:	2b2b      	cmp	r3, #43	; 0x2b
 8006ca0:	d02a      	beq.n	8006cf8 <__gethex+0x134>
 8006ca2:	2b2d      	cmp	r3, #45	; 0x2d
 8006ca4:	d02c      	beq.n	8006d00 <__gethex+0x13c>
 8006ca6:	f04f 0900 	mov.w	r9, #0
 8006caa:	1c71      	adds	r1, r6, #1
 8006cac:	7808      	ldrb	r0, [r1, #0]
 8006cae:	f7ff ff74 	bl	8006b9a <__hexdig_fun>
 8006cb2:	1e43      	subs	r3, r0, #1
 8006cb4:	b2db      	uxtb	r3, r3
 8006cb6:	2b18      	cmp	r3, #24
 8006cb8:	d82a      	bhi.n	8006d10 <__gethex+0x14c>
 8006cba:	f1a0 0210 	sub.w	r2, r0, #16
 8006cbe:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8006cc2:	f7ff ff6a 	bl	8006b9a <__hexdig_fun>
 8006cc6:	1e43      	subs	r3, r0, #1
 8006cc8:	b2db      	uxtb	r3, r3
 8006cca:	2b18      	cmp	r3, #24
 8006ccc:	d91b      	bls.n	8006d06 <__gethex+0x142>
 8006cce:	f1b9 0f00 	cmp.w	r9, #0
 8006cd2:	d000      	beq.n	8006cd6 <__gethex+0x112>
 8006cd4:	4252      	negs	r2, r2
 8006cd6:	4415      	add	r5, r2
 8006cd8:	f8cb 1000 	str.w	r1, [fp]
 8006cdc:	b1d4      	cbz	r4, 8006d14 <__gethex+0x150>
 8006cde:	9b01      	ldr	r3, [sp, #4]
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	bf14      	ite	ne
 8006ce4:	2700      	movne	r7, #0
 8006ce6:	2706      	moveq	r7, #6
 8006ce8:	4638      	mov	r0, r7
 8006cea:	b00b      	add	sp, #44	; 0x2c
 8006cec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006cf0:	463e      	mov	r6, r7
 8006cf2:	4625      	mov	r5, r4
 8006cf4:	2401      	movs	r4, #1
 8006cf6:	e7cc      	b.n	8006c92 <__gethex+0xce>
 8006cf8:	f04f 0900 	mov.w	r9, #0
 8006cfc:	1cb1      	adds	r1, r6, #2
 8006cfe:	e7d5      	b.n	8006cac <__gethex+0xe8>
 8006d00:	f04f 0901 	mov.w	r9, #1
 8006d04:	e7fa      	b.n	8006cfc <__gethex+0x138>
 8006d06:	230a      	movs	r3, #10
 8006d08:	fb03 0202 	mla	r2, r3, r2, r0
 8006d0c:	3a10      	subs	r2, #16
 8006d0e:	e7d6      	b.n	8006cbe <__gethex+0xfa>
 8006d10:	4631      	mov	r1, r6
 8006d12:	e7e1      	b.n	8006cd8 <__gethex+0x114>
 8006d14:	4621      	mov	r1, r4
 8006d16:	1bf3      	subs	r3, r6, r7
 8006d18:	3b01      	subs	r3, #1
 8006d1a:	2b07      	cmp	r3, #7
 8006d1c:	dc0a      	bgt.n	8006d34 <__gethex+0x170>
 8006d1e:	9802      	ldr	r0, [sp, #8]
 8006d20:	f000 fa88 	bl	8007234 <_Balloc>
 8006d24:	4604      	mov	r4, r0
 8006d26:	b940      	cbnz	r0, 8006d3a <__gethex+0x176>
 8006d28:	4602      	mov	r2, r0
 8006d2a:	21de      	movs	r1, #222	; 0xde
 8006d2c:	4b5b      	ldr	r3, [pc, #364]	; (8006e9c <__gethex+0x2d8>)
 8006d2e:	485c      	ldr	r0, [pc, #368]	; (8006ea0 <__gethex+0x2dc>)
 8006d30:	f001 f9bc 	bl	80080ac <__assert_func>
 8006d34:	3101      	adds	r1, #1
 8006d36:	105b      	asrs	r3, r3, #1
 8006d38:	e7ef      	b.n	8006d1a <__gethex+0x156>
 8006d3a:	f04f 0b00 	mov.w	fp, #0
 8006d3e:	f100 0914 	add.w	r9, r0, #20
 8006d42:	f1ca 0301 	rsb	r3, sl, #1
 8006d46:	f8cd 9010 	str.w	r9, [sp, #16]
 8006d4a:	f8cd b004 	str.w	fp, [sp, #4]
 8006d4e:	9308      	str	r3, [sp, #32]
 8006d50:	42b7      	cmp	r7, r6
 8006d52:	d33f      	bcc.n	8006dd4 <__gethex+0x210>
 8006d54:	9f04      	ldr	r7, [sp, #16]
 8006d56:	9b01      	ldr	r3, [sp, #4]
 8006d58:	f847 3b04 	str.w	r3, [r7], #4
 8006d5c:	eba7 0709 	sub.w	r7, r7, r9
 8006d60:	10bf      	asrs	r7, r7, #2
 8006d62:	6127      	str	r7, [r4, #16]
 8006d64:	4618      	mov	r0, r3
 8006d66:	f000 fb57 	bl	8007418 <__hi0bits>
 8006d6a:	017f      	lsls	r7, r7, #5
 8006d6c:	f8d8 6000 	ldr.w	r6, [r8]
 8006d70:	1a3f      	subs	r7, r7, r0
 8006d72:	42b7      	cmp	r7, r6
 8006d74:	dd62      	ble.n	8006e3c <__gethex+0x278>
 8006d76:	1bbf      	subs	r7, r7, r6
 8006d78:	4639      	mov	r1, r7
 8006d7a:	4620      	mov	r0, r4
 8006d7c:	f000 fef1 	bl	8007b62 <__any_on>
 8006d80:	4682      	mov	sl, r0
 8006d82:	b1a8      	cbz	r0, 8006db0 <__gethex+0x1ec>
 8006d84:	f04f 0a01 	mov.w	sl, #1
 8006d88:	1e7b      	subs	r3, r7, #1
 8006d8a:	1159      	asrs	r1, r3, #5
 8006d8c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8006d90:	f003 021f 	and.w	r2, r3, #31
 8006d94:	fa0a f202 	lsl.w	r2, sl, r2
 8006d98:	420a      	tst	r2, r1
 8006d9a:	d009      	beq.n	8006db0 <__gethex+0x1ec>
 8006d9c:	4553      	cmp	r3, sl
 8006d9e:	dd05      	ble.n	8006dac <__gethex+0x1e8>
 8006da0:	4620      	mov	r0, r4
 8006da2:	1eb9      	subs	r1, r7, #2
 8006da4:	f000 fedd 	bl	8007b62 <__any_on>
 8006da8:	2800      	cmp	r0, #0
 8006daa:	d144      	bne.n	8006e36 <__gethex+0x272>
 8006dac:	f04f 0a02 	mov.w	sl, #2
 8006db0:	4639      	mov	r1, r7
 8006db2:	4620      	mov	r0, r4
 8006db4:	f7ff fe9e 	bl	8006af4 <rshift>
 8006db8:	443d      	add	r5, r7
 8006dba:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006dbe:	42ab      	cmp	r3, r5
 8006dc0:	da4a      	bge.n	8006e58 <__gethex+0x294>
 8006dc2:	4621      	mov	r1, r4
 8006dc4:	9802      	ldr	r0, [sp, #8]
 8006dc6:	f000 fa75 	bl	80072b4 <_Bfree>
 8006dca:	2300      	movs	r3, #0
 8006dcc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8006dce:	27a3      	movs	r7, #163	; 0xa3
 8006dd0:	6013      	str	r3, [r2, #0]
 8006dd2:	e789      	b.n	8006ce8 <__gethex+0x124>
 8006dd4:	1e73      	subs	r3, r6, #1
 8006dd6:	9a06      	ldr	r2, [sp, #24]
 8006dd8:	9307      	str	r3, [sp, #28]
 8006dda:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006dde:	4293      	cmp	r3, r2
 8006de0:	d019      	beq.n	8006e16 <__gethex+0x252>
 8006de2:	f1bb 0f20 	cmp.w	fp, #32
 8006de6:	d107      	bne.n	8006df8 <__gethex+0x234>
 8006de8:	9b04      	ldr	r3, [sp, #16]
 8006dea:	9a01      	ldr	r2, [sp, #4]
 8006dec:	f843 2b04 	str.w	r2, [r3], #4
 8006df0:	9304      	str	r3, [sp, #16]
 8006df2:	2300      	movs	r3, #0
 8006df4:	469b      	mov	fp, r3
 8006df6:	9301      	str	r3, [sp, #4]
 8006df8:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8006dfc:	f7ff fecd 	bl	8006b9a <__hexdig_fun>
 8006e00:	9b01      	ldr	r3, [sp, #4]
 8006e02:	f000 000f 	and.w	r0, r0, #15
 8006e06:	fa00 f00b 	lsl.w	r0, r0, fp
 8006e0a:	4303      	orrs	r3, r0
 8006e0c:	9301      	str	r3, [sp, #4]
 8006e0e:	f10b 0b04 	add.w	fp, fp, #4
 8006e12:	9b07      	ldr	r3, [sp, #28]
 8006e14:	e00d      	b.n	8006e32 <__gethex+0x26e>
 8006e16:	9a08      	ldr	r2, [sp, #32]
 8006e18:	1e73      	subs	r3, r6, #1
 8006e1a:	4413      	add	r3, r2
 8006e1c:	42bb      	cmp	r3, r7
 8006e1e:	d3e0      	bcc.n	8006de2 <__gethex+0x21e>
 8006e20:	4618      	mov	r0, r3
 8006e22:	4652      	mov	r2, sl
 8006e24:	9903      	ldr	r1, [sp, #12]
 8006e26:	9309      	str	r3, [sp, #36]	; 0x24
 8006e28:	f001 f91e 	bl	8008068 <strncmp>
 8006e2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e2e:	2800      	cmp	r0, #0
 8006e30:	d1d7      	bne.n	8006de2 <__gethex+0x21e>
 8006e32:	461e      	mov	r6, r3
 8006e34:	e78c      	b.n	8006d50 <__gethex+0x18c>
 8006e36:	f04f 0a03 	mov.w	sl, #3
 8006e3a:	e7b9      	b.n	8006db0 <__gethex+0x1ec>
 8006e3c:	da09      	bge.n	8006e52 <__gethex+0x28e>
 8006e3e:	1bf7      	subs	r7, r6, r7
 8006e40:	4621      	mov	r1, r4
 8006e42:	463a      	mov	r2, r7
 8006e44:	9802      	ldr	r0, [sp, #8]
 8006e46:	f000 fc4d 	bl	80076e4 <__lshift>
 8006e4a:	4604      	mov	r4, r0
 8006e4c:	1bed      	subs	r5, r5, r7
 8006e4e:	f100 0914 	add.w	r9, r0, #20
 8006e52:	f04f 0a00 	mov.w	sl, #0
 8006e56:	e7b0      	b.n	8006dba <__gethex+0x1f6>
 8006e58:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8006e5c:	42a8      	cmp	r0, r5
 8006e5e:	dd72      	ble.n	8006f46 <__gethex+0x382>
 8006e60:	1b45      	subs	r5, r0, r5
 8006e62:	42ae      	cmp	r6, r5
 8006e64:	dc35      	bgt.n	8006ed2 <__gethex+0x30e>
 8006e66:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8006e6a:	2b02      	cmp	r3, #2
 8006e6c:	d029      	beq.n	8006ec2 <__gethex+0x2fe>
 8006e6e:	2b03      	cmp	r3, #3
 8006e70:	d02b      	beq.n	8006eca <__gethex+0x306>
 8006e72:	2b01      	cmp	r3, #1
 8006e74:	d11c      	bne.n	8006eb0 <__gethex+0x2ec>
 8006e76:	42ae      	cmp	r6, r5
 8006e78:	d11a      	bne.n	8006eb0 <__gethex+0x2ec>
 8006e7a:	2e01      	cmp	r6, #1
 8006e7c:	d112      	bne.n	8006ea4 <__gethex+0x2e0>
 8006e7e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8006e82:	9a05      	ldr	r2, [sp, #20]
 8006e84:	2762      	movs	r7, #98	; 0x62
 8006e86:	6013      	str	r3, [r2, #0]
 8006e88:	2301      	movs	r3, #1
 8006e8a:	6123      	str	r3, [r4, #16]
 8006e8c:	f8c9 3000 	str.w	r3, [r9]
 8006e90:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006e92:	601c      	str	r4, [r3, #0]
 8006e94:	e728      	b.n	8006ce8 <__gethex+0x124>
 8006e96:	bf00      	nop
 8006e98:	08009e48 	.word	0x08009e48
 8006e9c:	08009dd0 	.word	0x08009dd0
 8006ea0:	08009de1 	.word	0x08009de1
 8006ea4:	4620      	mov	r0, r4
 8006ea6:	1e71      	subs	r1, r6, #1
 8006ea8:	f000 fe5b 	bl	8007b62 <__any_on>
 8006eac:	2800      	cmp	r0, #0
 8006eae:	d1e6      	bne.n	8006e7e <__gethex+0x2ba>
 8006eb0:	4621      	mov	r1, r4
 8006eb2:	9802      	ldr	r0, [sp, #8]
 8006eb4:	f000 f9fe 	bl	80072b4 <_Bfree>
 8006eb8:	2300      	movs	r3, #0
 8006eba:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8006ebc:	2750      	movs	r7, #80	; 0x50
 8006ebe:	6013      	str	r3, [r2, #0]
 8006ec0:	e712      	b.n	8006ce8 <__gethex+0x124>
 8006ec2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d1f3      	bne.n	8006eb0 <__gethex+0x2ec>
 8006ec8:	e7d9      	b.n	8006e7e <__gethex+0x2ba>
 8006eca:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d1d6      	bne.n	8006e7e <__gethex+0x2ba>
 8006ed0:	e7ee      	b.n	8006eb0 <__gethex+0x2ec>
 8006ed2:	1e6f      	subs	r7, r5, #1
 8006ed4:	f1ba 0f00 	cmp.w	sl, #0
 8006ed8:	d132      	bne.n	8006f40 <__gethex+0x37c>
 8006eda:	b127      	cbz	r7, 8006ee6 <__gethex+0x322>
 8006edc:	4639      	mov	r1, r7
 8006ede:	4620      	mov	r0, r4
 8006ee0:	f000 fe3f 	bl	8007b62 <__any_on>
 8006ee4:	4682      	mov	sl, r0
 8006ee6:	2101      	movs	r1, #1
 8006ee8:	117b      	asrs	r3, r7, #5
 8006eea:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8006eee:	f007 071f 	and.w	r7, r7, #31
 8006ef2:	fa01 f707 	lsl.w	r7, r1, r7
 8006ef6:	421f      	tst	r7, r3
 8006ef8:	f04f 0702 	mov.w	r7, #2
 8006efc:	4629      	mov	r1, r5
 8006efe:	4620      	mov	r0, r4
 8006f00:	bf18      	it	ne
 8006f02:	f04a 0a02 	orrne.w	sl, sl, #2
 8006f06:	1b76      	subs	r6, r6, r5
 8006f08:	f7ff fdf4 	bl	8006af4 <rshift>
 8006f0c:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8006f10:	f1ba 0f00 	cmp.w	sl, #0
 8006f14:	d048      	beq.n	8006fa8 <__gethex+0x3e4>
 8006f16:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8006f1a:	2b02      	cmp	r3, #2
 8006f1c:	d015      	beq.n	8006f4a <__gethex+0x386>
 8006f1e:	2b03      	cmp	r3, #3
 8006f20:	d017      	beq.n	8006f52 <__gethex+0x38e>
 8006f22:	2b01      	cmp	r3, #1
 8006f24:	d109      	bne.n	8006f3a <__gethex+0x376>
 8006f26:	f01a 0f02 	tst.w	sl, #2
 8006f2a:	d006      	beq.n	8006f3a <__gethex+0x376>
 8006f2c:	f8d9 0000 	ldr.w	r0, [r9]
 8006f30:	ea4a 0a00 	orr.w	sl, sl, r0
 8006f34:	f01a 0f01 	tst.w	sl, #1
 8006f38:	d10e      	bne.n	8006f58 <__gethex+0x394>
 8006f3a:	f047 0710 	orr.w	r7, r7, #16
 8006f3e:	e033      	b.n	8006fa8 <__gethex+0x3e4>
 8006f40:	f04f 0a01 	mov.w	sl, #1
 8006f44:	e7cf      	b.n	8006ee6 <__gethex+0x322>
 8006f46:	2701      	movs	r7, #1
 8006f48:	e7e2      	b.n	8006f10 <__gethex+0x34c>
 8006f4a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006f4c:	f1c3 0301 	rsb	r3, r3, #1
 8006f50:	9315      	str	r3, [sp, #84]	; 0x54
 8006f52:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d0f0      	beq.n	8006f3a <__gethex+0x376>
 8006f58:	f04f 0c00 	mov.w	ip, #0
 8006f5c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8006f60:	f104 0314 	add.w	r3, r4, #20
 8006f64:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8006f68:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8006f6c:	4618      	mov	r0, r3
 8006f6e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006f72:	f1b2 3fff 	cmp.w	r2, #4294967295
 8006f76:	d01c      	beq.n	8006fb2 <__gethex+0x3ee>
 8006f78:	3201      	adds	r2, #1
 8006f7a:	6002      	str	r2, [r0, #0]
 8006f7c:	2f02      	cmp	r7, #2
 8006f7e:	f104 0314 	add.w	r3, r4, #20
 8006f82:	d13d      	bne.n	8007000 <__gethex+0x43c>
 8006f84:	f8d8 2000 	ldr.w	r2, [r8]
 8006f88:	3a01      	subs	r2, #1
 8006f8a:	42b2      	cmp	r2, r6
 8006f8c:	d10a      	bne.n	8006fa4 <__gethex+0x3e0>
 8006f8e:	2201      	movs	r2, #1
 8006f90:	1171      	asrs	r1, r6, #5
 8006f92:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006f96:	f006 061f 	and.w	r6, r6, #31
 8006f9a:	fa02 f606 	lsl.w	r6, r2, r6
 8006f9e:	421e      	tst	r6, r3
 8006fa0:	bf18      	it	ne
 8006fa2:	4617      	movne	r7, r2
 8006fa4:	f047 0720 	orr.w	r7, r7, #32
 8006fa8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006faa:	601c      	str	r4, [r3, #0]
 8006fac:	9b05      	ldr	r3, [sp, #20]
 8006fae:	601d      	str	r5, [r3, #0]
 8006fb0:	e69a      	b.n	8006ce8 <__gethex+0x124>
 8006fb2:	4299      	cmp	r1, r3
 8006fb4:	f843 cc04 	str.w	ip, [r3, #-4]
 8006fb8:	d8d8      	bhi.n	8006f6c <__gethex+0x3a8>
 8006fba:	68a3      	ldr	r3, [r4, #8]
 8006fbc:	459b      	cmp	fp, r3
 8006fbe:	db17      	blt.n	8006ff0 <__gethex+0x42c>
 8006fc0:	6861      	ldr	r1, [r4, #4]
 8006fc2:	9802      	ldr	r0, [sp, #8]
 8006fc4:	3101      	adds	r1, #1
 8006fc6:	f000 f935 	bl	8007234 <_Balloc>
 8006fca:	4681      	mov	r9, r0
 8006fcc:	b918      	cbnz	r0, 8006fd6 <__gethex+0x412>
 8006fce:	4602      	mov	r2, r0
 8006fd0:	2184      	movs	r1, #132	; 0x84
 8006fd2:	4b19      	ldr	r3, [pc, #100]	; (8007038 <__gethex+0x474>)
 8006fd4:	e6ab      	b.n	8006d2e <__gethex+0x16a>
 8006fd6:	6922      	ldr	r2, [r4, #16]
 8006fd8:	f104 010c 	add.w	r1, r4, #12
 8006fdc:	3202      	adds	r2, #2
 8006fde:	0092      	lsls	r2, r2, #2
 8006fe0:	300c      	adds	r0, #12
 8006fe2:	f000 f919 	bl	8007218 <memcpy>
 8006fe6:	4621      	mov	r1, r4
 8006fe8:	9802      	ldr	r0, [sp, #8]
 8006fea:	f000 f963 	bl	80072b4 <_Bfree>
 8006fee:	464c      	mov	r4, r9
 8006ff0:	6923      	ldr	r3, [r4, #16]
 8006ff2:	1c5a      	adds	r2, r3, #1
 8006ff4:	6122      	str	r2, [r4, #16]
 8006ff6:	2201      	movs	r2, #1
 8006ff8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006ffc:	615a      	str	r2, [r3, #20]
 8006ffe:	e7bd      	b.n	8006f7c <__gethex+0x3b8>
 8007000:	6922      	ldr	r2, [r4, #16]
 8007002:	455a      	cmp	r2, fp
 8007004:	dd0b      	ble.n	800701e <__gethex+0x45a>
 8007006:	2101      	movs	r1, #1
 8007008:	4620      	mov	r0, r4
 800700a:	f7ff fd73 	bl	8006af4 <rshift>
 800700e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007012:	3501      	adds	r5, #1
 8007014:	42ab      	cmp	r3, r5
 8007016:	f6ff aed4 	blt.w	8006dc2 <__gethex+0x1fe>
 800701a:	2701      	movs	r7, #1
 800701c:	e7c2      	b.n	8006fa4 <__gethex+0x3e0>
 800701e:	f016 061f 	ands.w	r6, r6, #31
 8007022:	d0fa      	beq.n	800701a <__gethex+0x456>
 8007024:	4453      	add	r3, sl
 8007026:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800702a:	f000 f9f5 	bl	8007418 <__hi0bits>
 800702e:	f1c6 0620 	rsb	r6, r6, #32
 8007032:	42b0      	cmp	r0, r6
 8007034:	dbe7      	blt.n	8007006 <__gethex+0x442>
 8007036:	e7f0      	b.n	800701a <__gethex+0x456>
 8007038:	08009dd0 	.word	0x08009dd0

0800703c <L_shift>:
 800703c:	f1c2 0208 	rsb	r2, r2, #8
 8007040:	0092      	lsls	r2, r2, #2
 8007042:	b570      	push	{r4, r5, r6, lr}
 8007044:	f1c2 0620 	rsb	r6, r2, #32
 8007048:	6843      	ldr	r3, [r0, #4]
 800704a:	6804      	ldr	r4, [r0, #0]
 800704c:	fa03 f506 	lsl.w	r5, r3, r6
 8007050:	432c      	orrs	r4, r5
 8007052:	40d3      	lsrs	r3, r2
 8007054:	6004      	str	r4, [r0, #0]
 8007056:	f840 3f04 	str.w	r3, [r0, #4]!
 800705a:	4288      	cmp	r0, r1
 800705c:	d3f4      	bcc.n	8007048 <L_shift+0xc>
 800705e:	bd70      	pop	{r4, r5, r6, pc}

08007060 <__match>:
 8007060:	b530      	push	{r4, r5, lr}
 8007062:	6803      	ldr	r3, [r0, #0]
 8007064:	3301      	adds	r3, #1
 8007066:	f811 4b01 	ldrb.w	r4, [r1], #1
 800706a:	b914      	cbnz	r4, 8007072 <__match+0x12>
 800706c:	6003      	str	r3, [r0, #0]
 800706e:	2001      	movs	r0, #1
 8007070:	bd30      	pop	{r4, r5, pc}
 8007072:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007076:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800707a:	2d19      	cmp	r5, #25
 800707c:	bf98      	it	ls
 800707e:	3220      	addls	r2, #32
 8007080:	42a2      	cmp	r2, r4
 8007082:	d0f0      	beq.n	8007066 <__match+0x6>
 8007084:	2000      	movs	r0, #0
 8007086:	e7f3      	b.n	8007070 <__match+0x10>

08007088 <__hexnan>:
 8007088:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800708c:	2500      	movs	r5, #0
 800708e:	680b      	ldr	r3, [r1, #0]
 8007090:	4682      	mov	sl, r0
 8007092:	115e      	asrs	r6, r3, #5
 8007094:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8007098:	f013 031f 	ands.w	r3, r3, #31
 800709c:	bf18      	it	ne
 800709e:	3604      	addne	r6, #4
 80070a0:	1f37      	subs	r7, r6, #4
 80070a2:	46b9      	mov	r9, r7
 80070a4:	463c      	mov	r4, r7
 80070a6:	46ab      	mov	fp, r5
 80070a8:	b087      	sub	sp, #28
 80070aa:	4690      	mov	r8, r2
 80070ac:	6802      	ldr	r2, [r0, #0]
 80070ae:	9301      	str	r3, [sp, #4]
 80070b0:	f846 5c04 	str.w	r5, [r6, #-4]
 80070b4:	9502      	str	r5, [sp, #8]
 80070b6:	7851      	ldrb	r1, [r2, #1]
 80070b8:	1c53      	adds	r3, r2, #1
 80070ba:	9303      	str	r3, [sp, #12]
 80070bc:	b341      	cbz	r1, 8007110 <__hexnan+0x88>
 80070be:	4608      	mov	r0, r1
 80070c0:	9205      	str	r2, [sp, #20]
 80070c2:	9104      	str	r1, [sp, #16]
 80070c4:	f7ff fd69 	bl	8006b9a <__hexdig_fun>
 80070c8:	2800      	cmp	r0, #0
 80070ca:	d14f      	bne.n	800716c <__hexnan+0xe4>
 80070cc:	9904      	ldr	r1, [sp, #16]
 80070ce:	9a05      	ldr	r2, [sp, #20]
 80070d0:	2920      	cmp	r1, #32
 80070d2:	d818      	bhi.n	8007106 <__hexnan+0x7e>
 80070d4:	9b02      	ldr	r3, [sp, #8]
 80070d6:	459b      	cmp	fp, r3
 80070d8:	dd13      	ble.n	8007102 <__hexnan+0x7a>
 80070da:	454c      	cmp	r4, r9
 80070dc:	d206      	bcs.n	80070ec <__hexnan+0x64>
 80070de:	2d07      	cmp	r5, #7
 80070e0:	dc04      	bgt.n	80070ec <__hexnan+0x64>
 80070e2:	462a      	mov	r2, r5
 80070e4:	4649      	mov	r1, r9
 80070e6:	4620      	mov	r0, r4
 80070e8:	f7ff ffa8 	bl	800703c <L_shift>
 80070ec:	4544      	cmp	r4, r8
 80070ee:	d950      	bls.n	8007192 <__hexnan+0x10a>
 80070f0:	2300      	movs	r3, #0
 80070f2:	f1a4 0904 	sub.w	r9, r4, #4
 80070f6:	f844 3c04 	str.w	r3, [r4, #-4]
 80070fa:	461d      	mov	r5, r3
 80070fc:	464c      	mov	r4, r9
 80070fe:	f8cd b008 	str.w	fp, [sp, #8]
 8007102:	9a03      	ldr	r2, [sp, #12]
 8007104:	e7d7      	b.n	80070b6 <__hexnan+0x2e>
 8007106:	2929      	cmp	r1, #41	; 0x29
 8007108:	d156      	bne.n	80071b8 <__hexnan+0x130>
 800710a:	3202      	adds	r2, #2
 800710c:	f8ca 2000 	str.w	r2, [sl]
 8007110:	f1bb 0f00 	cmp.w	fp, #0
 8007114:	d050      	beq.n	80071b8 <__hexnan+0x130>
 8007116:	454c      	cmp	r4, r9
 8007118:	d206      	bcs.n	8007128 <__hexnan+0xa0>
 800711a:	2d07      	cmp	r5, #7
 800711c:	dc04      	bgt.n	8007128 <__hexnan+0xa0>
 800711e:	462a      	mov	r2, r5
 8007120:	4649      	mov	r1, r9
 8007122:	4620      	mov	r0, r4
 8007124:	f7ff ff8a 	bl	800703c <L_shift>
 8007128:	4544      	cmp	r4, r8
 800712a:	d934      	bls.n	8007196 <__hexnan+0x10e>
 800712c:	4623      	mov	r3, r4
 800712e:	f1a8 0204 	sub.w	r2, r8, #4
 8007132:	f853 1b04 	ldr.w	r1, [r3], #4
 8007136:	429f      	cmp	r7, r3
 8007138:	f842 1f04 	str.w	r1, [r2, #4]!
 800713c:	d2f9      	bcs.n	8007132 <__hexnan+0xaa>
 800713e:	1b3b      	subs	r3, r7, r4
 8007140:	f023 0303 	bic.w	r3, r3, #3
 8007144:	3304      	adds	r3, #4
 8007146:	3401      	adds	r4, #1
 8007148:	3e03      	subs	r6, #3
 800714a:	42b4      	cmp	r4, r6
 800714c:	bf88      	it	hi
 800714e:	2304      	movhi	r3, #4
 8007150:	2200      	movs	r2, #0
 8007152:	4443      	add	r3, r8
 8007154:	f843 2b04 	str.w	r2, [r3], #4
 8007158:	429f      	cmp	r7, r3
 800715a:	d2fb      	bcs.n	8007154 <__hexnan+0xcc>
 800715c:	683b      	ldr	r3, [r7, #0]
 800715e:	b91b      	cbnz	r3, 8007168 <__hexnan+0xe0>
 8007160:	4547      	cmp	r7, r8
 8007162:	d127      	bne.n	80071b4 <__hexnan+0x12c>
 8007164:	2301      	movs	r3, #1
 8007166:	603b      	str	r3, [r7, #0]
 8007168:	2005      	movs	r0, #5
 800716a:	e026      	b.n	80071ba <__hexnan+0x132>
 800716c:	3501      	adds	r5, #1
 800716e:	2d08      	cmp	r5, #8
 8007170:	f10b 0b01 	add.w	fp, fp, #1
 8007174:	dd06      	ble.n	8007184 <__hexnan+0xfc>
 8007176:	4544      	cmp	r4, r8
 8007178:	d9c3      	bls.n	8007102 <__hexnan+0x7a>
 800717a:	2300      	movs	r3, #0
 800717c:	2501      	movs	r5, #1
 800717e:	f844 3c04 	str.w	r3, [r4, #-4]
 8007182:	3c04      	subs	r4, #4
 8007184:	6822      	ldr	r2, [r4, #0]
 8007186:	f000 000f 	and.w	r0, r0, #15
 800718a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800718e:	6022      	str	r2, [r4, #0]
 8007190:	e7b7      	b.n	8007102 <__hexnan+0x7a>
 8007192:	2508      	movs	r5, #8
 8007194:	e7b5      	b.n	8007102 <__hexnan+0x7a>
 8007196:	9b01      	ldr	r3, [sp, #4]
 8007198:	2b00      	cmp	r3, #0
 800719a:	d0df      	beq.n	800715c <__hexnan+0xd4>
 800719c:	f04f 32ff 	mov.w	r2, #4294967295
 80071a0:	f1c3 0320 	rsb	r3, r3, #32
 80071a4:	fa22 f303 	lsr.w	r3, r2, r3
 80071a8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80071ac:	401a      	ands	r2, r3
 80071ae:	f846 2c04 	str.w	r2, [r6, #-4]
 80071b2:	e7d3      	b.n	800715c <__hexnan+0xd4>
 80071b4:	3f04      	subs	r7, #4
 80071b6:	e7d1      	b.n	800715c <__hexnan+0xd4>
 80071b8:	2004      	movs	r0, #4
 80071ba:	b007      	add	sp, #28
 80071bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080071c0 <_localeconv_r>:
 80071c0:	4800      	ldr	r0, [pc, #0]	; (80071c4 <_localeconv_r+0x4>)
 80071c2:	4770      	bx	lr
 80071c4:	2000016c 	.word	0x2000016c

080071c8 <malloc>:
 80071c8:	4b02      	ldr	r3, [pc, #8]	; (80071d4 <malloc+0xc>)
 80071ca:	4601      	mov	r1, r0
 80071cc:	6818      	ldr	r0, [r3, #0]
 80071ce:	f000 bd65 	b.w	8007c9c <_malloc_r>
 80071d2:	bf00      	nop
 80071d4:	20000014 	.word	0x20000014

080071d8 <__ascii_mbtowc>:
 80071d8:	b082      	sub	sp, #8
 80071da:	b901      	cbnz	r1, 80071de <__ascii_mbtowc+0x6>
 80071dc:	a901      	add	r1, sp, #4
 80071de:	b142      	cbz	r2, 80071f2 <__ascii_mbtowc+0x1a>
 80071e0:	b14b      	cbz	r3, 80071f6 <__ascii_mbtowc+0x1e>
 80071e2:	7813      	ldrb	r3, [r2, #0]
 80071e4:	600b      	str	r3, [r1, #0]
 80071e6:	7812      	ldrb	r2, [r2, #0]
 80071e8:	1e10      	subs	r0, r2, #0
 80071ea:	bf18      	it	ne
 80071ec:	2001      	movne	r0, #1
 80071ee:	b002      	add	sp, #8
 80071f0:	4770      	bx	lr
 80071f2:	4610      	mov	r0, r2
 80071f4:	e7fb      	b.n	80071ee <__ascii_mbtowc+0x16>
 80071f6:	f06f 0001 	mvn.w	r0, #1
 80071fa:	e7f8      	b.n	80071ee <__ascii_mbtowc+0x16>

080071fc <memchr>:
 80071fc:	4603      	mov	r3, r0
 80071fe:	b510      	push	{r4, lr}
 8007200:	b2c9      	uxtb	r1, r1
 8007202:	4402      	add	r2, r0
 8007204:	4293      	cmp	r3, r2
 8007206:	4618      	mov	r0, r3
 8007208:	d101      	bne.n	800720e <memchr+0x12>
 800720a:	2000      	movs	r0, #0
 800720c:	e003      	b.n	8007216 <memchr+0x1a>
 800720e:	7804      	ldrb	r4, [r0, #0]
 8007210:	3301      	adds	r3, #1
 8007212:	428c      	cmp	r4, r1
 8007214:	d1f6      	bne.n	8007204 <memchr+0x8>
 8007216:	bd10      	pop	{r4, pc}

08007218 <memcpy>:
 8007218:	440a      	add	r2, r1
 800721a:	4291      	cmp	r1, r2
 800721c:	f100 33ff 	add.w	r3, r0, #4294967295
 8007220:	d100      	bne.n	8007224 <memcpy+0xc>
 8007222:	4770      	bx	lr
 8007224:	b510      	push	{r4, lr}
 8007226:	f811 4b01 	ldrb.w	r4, [r1], #1
 800722a:	4291      	cmp	r1, r2
 800722c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007230:	d1f9      	bne.n	8007226 <memcpy+0xe>
 8007232:	bd10      	pop	{r4, pc}

08007234 <_Balloc>:
 8007234:	b570      	push	{r4, r5, r6, lr}
 8007236:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007238:	4604      	mov	r4, r0
 800723a:	460d      	mov	r5, r1
 800723c:	b976      	cbnz	r6, 800725c <_Balloc+0x28>
 800723e:	2010      	movs	r0, #16
 8007240:	f7ff ffc2 	bl	80071c8 <malloc>
 8007244:	4602      	mov	r2, r0
 8007246:	6260      	str	r0, [r4, #36]	; 0x24
 8007248:	b920      	cbnz	r0, 8007254 <_Balloc+0x20>
 800724a:	2166      	movs	r1, #102	; 0x66
 800724c:	4b17      	ldr	r3, [pc, #92]	; (80072ac <_Balloc+0x78>)
 800724e:	4818      	ldr	r0, [pc, #96]	; (80072b0 <_Balloc+0x7c>)
 8007250:	f000 ff2c 	bl	80080ac <__assert_func>
 8007254:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007258:	6006      	str	r6, [r0, #0]
 800725a:	60c6      	str	r6, [r0, #12]
 800725c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800725e:	68f3      	ldr	r3, [r6, #12]
 8007260:	b183      	cbz	r3, 8007284 <_Balloc+0x50>
 8007262:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007264:	68db      	ldr	r3, [r3, #12]
 8007266:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800726a:	b9b8      	cbnz	r0, 800729c <_Balloc+0x68>
 800726c:	2101      	movs	r1, #1
 800726e:	fa01 f605 	lsl.w	r6, r1, r5
 8007272:	1d72      	adds	r2, r6, #5
 8007274:	4620      	mov	r0, r4
 8007276:	0092      	lsls	r2, r2, #2
 8007278:	f000 fc94 	bl	8007ba4 <_calloc_r>
 800727c:	b160      	cbz	r0, 8007298 <_Balloc+0x64>
 800727e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007282:	e00e      	b.n	80072a2 <_Balloc+0x6e>
 8007284:	2221      	movs	r2, #33	; 0x21
 8007286:	2104      	movs	r1, #4
 8007288:	4620      	mov	r0, r4
 800728a:	f000 fc8b 	bl	8007ba4 <_calloc_r>
 800728e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007290:	60f0      	str	r0, [r6, #12]
 8007292:	68db      	ldr	r3, [r3, #12]
 8007294:	2b00      	cmp	r3, #0
 8007296:	d1e4      	bne.n	8007262 <_Balloc+0x2e>
 8007298:	2000      	movs	r0, #0
 800729a:	bd70      	pop	{r4, r5, r6, pc}
 800729c:	6802      	ldr	r2, [r0, #0]
 800729e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80072a2:	2300      	movs	r3, #0
 80072a4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80072a8:	e7f7      	b.n	800729a <_Balloc+0x66>
 80072aa:	bf00      	nop
 80072ac:	08009d5e 	.word	0x08009d5e
 80072b0:	08009e5c 	.word	0x08009e5c

080072b4 <_Bfree>:
 80072b4:	b570      	push	{r4, r5, r6, lr}
 80072b6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80072b8:	4605      	mov	r5, r0
 80072ba:	460c      	mov	r4, r1
 80072bc:	b976      	cbnz	r6, 80072dc <_Bfree+0x28>
 80072be:	2010      	movs	r0, #16
 80072c0:	f7ff ff82 	bl	80071c8 <malloc>
 80072c4:	4602      	mov	r2, r0
 80072c6:	6268      	str	r0, [r5, #36]	; 0x24
 80072c8:	b920      	cbnz	r0, 80072d4 <_Bfree+0x20>
 80072ca:	218a      	movs	r1, #138	; 0x8a
 80072cc:	4b08      	ldr	r3, [pc, #32]	; (80072f0 <_Bfree+0x3c>)
 80072ce:	4809      	ldr	r0, [pc, #36]	; (80072f4 <_Bfree+0x40>)
 80072d0:	f000 feec 	bl	80080ac <__assert_func>
 80072d4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80072d8:	6006      	str	r6, [r0, #0]
 80072da:	60c6      	str	r6, [r0, #12]
 80072dc:	b13c      	cbz	r4, 80072ee <_Bfree+0x3a>
 80072de:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80072e0:	6862      	ldr	r2, [r4, #4]
 80072e2:	68db      	ldr	r3, [r3, #12]
 80072e4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80072e8:	6021      	str	r1, [r4, #0]
 80072ea:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80072ee:	bd70      	pop	{r4, r5, r6, pc}
 80072f0:	08009d5e 	.word	0x08009d5e
 80072f4:	08009e5c 	.word	0x08009e5c

080072f8 <__multadd>:
 80072f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80072fc:	4607      	mov	r7, r0
 80072fe:	460c      	mov	r4, r1
 8007300:	461e      	mov	r6, r3
 8007302:	2000      	movs	r0, #0
 8007304:	690d      	ldr	r5, [r1, #16]
 8007306:	f101 0c14 	add.w	ip, r1, #20
 800730a:	f8dc 3000 	ldr.w	r3, [ip]
 800730e:	3001      	adds	r0, #1
 8007310:	b299      	uxth	r1, r3
 8007312:	fb02 6101 	mla	r1, r2, r1, r6
 8007316:	0c1e      	lsrs	r6, r3, #16
 8007318:	0c0b      	lsrs	r3, r1, #16
 800731a:	fb02 3306 	mla	r3, r2, r6, r3
 800731e:	b289      	uxth	r1, r1
 8007320:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007324:	4285      	cmp	r5, r0
 8007326:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800732a:	f84c 1b04 	str.w	r1, [ip], #4
 800732e:	dcec      	bgt.n	800730a <__multadd+0x12>
 8007330:	b30e      	cbz	r6, 8007376 <__multadd+0x7e>
 8007332:	68a3      	ldr	r3, [r4, #8]
 8007334:	42ab      	cmp	r3, r5
 8007336:	dc19      	bgt.n	800736c <__multadd+0x74>
 8007338:	6861      	ldr	r1, [r4, #4]
 800733a:	4638      	mov	r0, r7
 800733c:	3101      	adds	r1, #1
 800733e:	f7ff ff79 	bl	8007234 <_Balloc>
 8007342:	4680      	mov	r8, r0
 8007344:	b928      	cbnz	r0, 8007352 <__multadd+0x5a>
 8007346:	4602      	mov	r2, r0
 8007348:	21b5      	movs	r1, #181	; 0xb5
 800734a:	4b0c      	ldr	r3, [pc, #48]	; (800737c <__multadd+0x84>)
 800734c:	480c      	ldr	r0, [pc, #48]	; (8007380 <__multadd+0x88>)
 800734e:	f000 fead 	bl	80080ac <__assert_func>
 8007352:	6922      	ldr	r2, [r4, #16]
 8007354:	f104 010c 	add.w	r1, r4, #12
 8007358:	3202      	adds	r2, #2
 800735a:	0092      	lsls	r2, r2, #2
 800735c:	300c      	adds	r0, #12
 800735e:	f7ff ff5b 	bl	8007218 <memcpy>
 8007362:	4621      	mov	r1, r4
 8007364:	4638      	mov	r0, r7
 8007366:	f7ff ffa5 	bl	80072b4 <_Bfree>
 800736a:	4644      	mov	r4, r8
 800736c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007370:	3501      	adds	r5, #1
 8007372:	615e      	str	r6, [r3, #20]
 8007374:	6125      	str	r5, [r4, #16]
 8007376:	4620      	mov	r0, r4
 8007378:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800737c:	08009dd0 	.word	0x08009dd0
 8007380:	08009e5c 	.word	0x08009e5c

08007384 <__s2b>:
 8007384:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007388:	4615      	mov	r5, r2
 800738a:	2209      	movs	r2, #9
 800738c:	461f      	mov	r7, r3
 800738e:	3308      	adds	r3, #8
 8007390:	460c      	mov	r4, r1
 8007392:	fb93 f3f2 	sdiv	r3, r3, r2
 8007396:	4606      	mov	r6, r0
 8007398:	2201      	movs	r2, #1
 800739a:	2100      	movs	r1, #0
 800739c:	429a      	cmp	r2, r3
 800739e:	db09      	blt.n	80073b4 <__s2b+0x30>
 80073a0:	4630      	mov	r0, r6
 80073a2:	f7ff ff47 	bl	8007234 <_Balloc>
 80073a6:	b940      	cbnz	r0, 80073ba <__s2b+0x36>
 80073a8:	4602      	mov	r2, r0
 80073aa:	21ce      	movs	r1, #206	; 0xce
 80073ac:	4b18      	ldr	r3, [pc, #96]	; (8007410 <__s2b+0x8c>)
 80073ae:	4819      	ldr	r0, [pc, #100]	; (8007414 <__s2b+0x90>)
 80073b0:	f000 fe7c 	bl	80080ac <__assert_func>
 80073b4:	0052      	lsls	r2, r2, #1
 80073b6:	3101      	adds	r1, #1
 80073b8:	e7f0      	b.n	800739c <__s2b+0x18>
 80073ba:	9b08      	ldr	r3, [sp, #32]
 80073bc:	2d09      	cmp	r5, #9
 80073be:	6143      	str	r3, [r0, #20]
 80073c0:	f04f 0301 	mov.w	r3, #1
 80073c4:	6103      	str	r3, [r0, #16]
 80073c6:	dd16      	ble.n	80073f6 <__s2b+0x72>
 80073c8:	f104 0909 	add.w	r9, r4, #9
 80073cc:	46c8      	mov	r8, r9
 80073ce:	442c      	add	r4, r5
 80073d0:	f818 3b01 	ldrb.w	r3, [r8], #1
 80073d4:	4601      	mov	r1, r0
 80073d6:	220a      	movs	r2, #10
 80073d8:	4630      	mov	r0, r6
 80073da:	3b30      	subs	r3, #48	; 0x30
 80073dc:	f7ff ff8c 	bl	80072f8 <__multadd>
 80073e0:	45a0      	cmp	r8, r4
 80073e2:	d1f5      	bne.n	80073d0 <__s2b+0x4c>
 80073e4:	f1a5 0408 	sub.w	r4, r5, #8
 80073e8:	444c      	add	r4, r9
 80073ea:	1b2d      	subs	r5, r5, r4
 80073ec:	1963      	adds	r3, r4, r5
 80073ee:	42bb      	cmp	r3, r7
 80073f0:	db04      	blt.n	80073fc <__s2b+0x78>
 80073f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80073f6:	2509      	movs	r5, #9
 80073f8:	340a      	adds	r4, #10
 80073fa:	e7f6      	b.n	80073ea <__s2b+0x66>
 80073fc:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007400:	4601      	mov	r1, r0
 8007402:	220a      	movs	r2, #10
 8007404:	4630      	mov	r0, r6
 8007406:	3b30      	subs	r3, #48	; 0x30
 8007408:	f7ff ff76 	bl	80072f8 <__multadd>
 800740c:	e7ee      	b.n	80073ec <__s2b+0x68>
 800740e:	bf00      	nop
 8007410:	08009dd0 	.word	0x08009dd0
 8007414:	08009e5c 	.word	0x08009e5c

08007418 <__hi0bits>:
 8007418:	0c02      	lsrs	r2, r0, #16
 800741a:	0412      	lsls	r2, r2, #16
 800741c:	4603      	mov	r3, r0
 800741e:	b9ca      	cbnz	r2, 8007454 <__hi0bits+0x3c>
 8007420:	0403      	lsls	r3, r0, #16
 8007422:	2010      	movs	r0, #16
 8007424:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8007428:	bf04      	itt	eq
 800742a:	021b      	lsleq	r3, r3, #8
 800742c:	3008      	addeq	r0, #8
 800742e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8007432:	bf04      	itt	eq
 8007434:	011b      	lsleq	r3, r3, #4
 8007436:	3004      	addeq	r0, #4
 8007438:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800743c:	bf04      	itt	eq
 800743e:	009b      	lsleq	r3, r3, #2
 8007440:	3002      	addeq	r0, #2
 8007442:	2b00      	cmp	r3, #0
 8007444:	db05      	blt.n	8007452 <__hi0bits+0x3a>
 8007446:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800744a:	f100 0001 	add.w	r0, r0, #1
 800744e:	bf08      	it	eq
 8007450:	2020      	moveq	r0, #32
 8007452:	4770      	bx	lr
 8007454:	2000      	movs	r0, #0
 8007456:	e7e5      	b.n	8007424 <__hi0bits+0xc>

08007458 <__lo0bits>:
 8007458:	6803      	ldr	r3, [r0, #0]
 800745a:	4602      	mov	r2, r0
 800745c:	f013 0007 	ands.w	r0, r3, #7
 8007460:	d00b      	beq.n	800747a <__lo0bits+0x22>
 8007462:	07d9      	lsls	r1, r3, #31
 8007464:	d421      	bmi.n	80074aa <__lo0bits+0x52>
 8007466:	0798      	lsls	r0, r3, #30
 8007468:	bf49      	itett	mi
 800746a:	085b      	lsrmi	r3, r3, #1
 800746c:	089b      	lsrpl	r3, r3, #2
 800746e:	2001      	movmi	r0, #1
 8007470:	6013      	strmi	r3, [r2, #0]
 8007472:	bf5c      	itt	pl
 8007474:	2002      	movpl	r0, #2
 8007476:	6013      	strpl	r3, [r2, #0]
 8007478:	4770      	bx	lr
 800747a:	b299      	uxth	r1, r3
 800747c:	b909      	cbnz	r1, 8007482 <__lo0bits+0x2a>
 800747e:	2010      	movs	r0, #16
 8007480:	0c1b      	lsrs	r3, r3, #16
 8007482:	b2d9      	uxtb	r1, r3
 8007484:	b909      	cbnz	r1, 800748a <__lo0bits+0x32>
 8007486:	3008      	adds	r0, #8
 8007488:	0a1b      	lsrs	r3, r3, #8
 800748a:	0719      	lsls	r1, r3, #28
 800748c:	bf04      	itt	eq
 800748e:	091b      	lsreq	r3, r3, #4
 8007490:	3004      	addeq	r0, #4
 8007492:	0799      	lsls	r1, r3, #30
 8007494:	bf04      	itt	eq
 8007496:	089b      	lsreq	r3, r3, #2
 8007498:	3002      	addeq	r0, #2
 800749a:	07d9      	lsls	r1, r3, #31
 800749c:	d403      	bmi.n	80074a6 <__lo0bits+0x4e>
 800749e:	085b      	lsrs	r3, r3, #1
 80074a0:	f100 0001 	add.w	r0, r0, #1
 80074a4:	d003      	beq.n	80074ae <__lo0bits+0x56>
 80074a6:	6013      	str	r3, [r2, #0]
 80074a8:	4770      	bx	lr
 80074aa:	2000      	movs	r0, #0
 80074ac:	4770      	bx	lr
 80074ae:	2020      	movs	r0, #32
 80074b0:	4770      	bx	lr
	...

080074b4 <__i2b>:
 80074b4:	b510      	push	{r4, lr}
 80074b6:	460c      	mov	r4, r1
 80074b8:	2101      	movs	r1, #1
 80074ba:	f7ff febb 	bl	8007234 <_Balloc>
 80074be:	4602      	mov	r2, r0
 80074c0:	b928      	cbnz	r0, 80074ce <__i2b+0x1a>
 80074c2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80074c6:	4b04      	ldr	r3, [pc, #16]	; (80074d8 <__i2b+0x24>)
 80074c8:	4804      	ldr	r0, [pc, #16]	; (80074dc <__i2b+0x28>)
 80074ca:	f000 fdef 	bl	80080ac <__assert_func>
 80074ce:	2301      	movs	r3, #1
 80074d0:	6144      	str	r4, [r0, #20]
 80074d2:	6103      	str	r3, [r0, #16]
 80074d4:	bd10      	pop	{r4, pc}
 80074d6:	bf00      	nop
 80074d8:	08009dd0 	.word	0x08009dd0
 80074dc:	08009e5c 	.word	0x08009e5c

080074e0 <__multiply>:
 80074e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074e4:	4691      	mov	r9, r2
 80074e6:	690a      	ldr	r2, [r1, #16]
 80074e8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80074ec:	460c      	mov	r4, r1
 80074ee:	429a      	cmp	r2, r3
 80074f0:	bfbe      	ittt	lt
 80074f2:	460b      	movlt	r3, r1
 80074f4:	464c      	movlt	r4, r9
 80074f6:	4699      	movlt	r9, r3
 80074f8:	6927      	ldr	r7, [r4, #16]
 80074fa:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80074fe:	68a3      	ldr	r3, [r4, #8]
 8007500:	6861      	ldr	r1, [r4, #4]
 8007502:	eb07 060a 	add.w	r6, r7, sl
 8007506:	42b3      	cmp	r3, r6
 8007508:	b085      	sub	sp, #20
 800750a:	bfb8      	it	lt
 800750c:	3101      	addlt	r1, #1
 800750e:	f7ff fe91 	bl	8007234 <_Balloc>
 8007512:	b930      	cbnz	r0, 8007522 <__multiply+0x42>
 8007514:	4602      	mov	r2, r0
 8007516:	f240 115d 	movw	r1, #349	; 0x15d
 800751a:	4b43      	ldr	r3, [pc, #268]	; (8007628 <__multiply+0x148>)
 800751c:	4843      	ldr	r0, [pc, #268]	; (800762c <__multiply+0x14c>)
 800751e:	f000 fdc5 	bl	80080ac <__assert_func>
 8007522:	f100 0514 	add.w	r5, r0, #20
 8007526:	462b      	mov	r3, r5
 8007528:	2200      	movs	r2, #0
 800752a:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800752e:	4543      	cmp	r3, r8
 8007530:	d321      	bcc.n	8007576 <__multiply+0x96>
 8007532:	f104 0314 	add.w	r3, r4, #20
 8007536:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800753a:	f109 0314 	add.w	r3, r9, #20
 800753e:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8007542:	9202      	str	r2, [sp, #8]
 8007544:	1b3a      	subs	r2, r7, r4
 8007546:	3a15      	subs	r2, #21
 8007548:	f022 0203 	bic.w	r2, r2, #3
 800754c:	3204      	adds	r2, #4
 800754e:	f104 0115 	add.w	r1, r4, #21
 8007552:	428f      	cmp	r7, r1
 8007554:	bf38      	it	cc
 8007556:	2204      	movcc	r2, #4
 8007558:	9201      	str	r2, [sp, #4]
 800755a:	9a02      	ldr	r2, [sp, #8]
 800755c:	9303      	str	r3, [sp, #12]
 800755e:	429a      	cmp	r2, r3
 8007560:	d80c      	bhi.n	800757c <__multiply+0x9c>
 8007562:	2e00      	cmp	r6, #0
 8007564:	dd03      	ble.n	800756e <__multiply+0x8e>
 8007566:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800756a:	2b00      	cmp	r3, #0
 800756c:	d059      	beq.n	8007622 <__multiply+0x142>
 800756e:	6106      	str	r6, [r0, #16]
 8007570:	b005      	add	sp, #20
 8007572:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007576:	f843 2b04 	str.w	r2, [r3], #4
 800757a:	e7d8      	b.n	800752e <__multiply+0x4e>
 800757c:	f8b3 a000 	ldrh.w	sl, [r3]
 8007580:	f1ba 0f00 	cmp.w	sl, #0
 8007584:	d023      	beq.n	80075ce <__multiply+0xee>
 8007586:	46a9      	mov	r9, r5
 8007588:	f04f 0c00 	mov.w	ip, #0
 800758c:	f104 0e14 	add.w	lr, r4, #20
 8007590:	f85e 2b04 	ldr.w	r2, [lr], #4
 8007594:	f8d9 1000 	ldr.w	r1, [r9]
 8007598:	fa1f fb82 	uxth.w	fp, r2
 800759c:	b289      	uxth	r1, r1
 800759e:	fb0a 110b 	mla	r1, sl, fp, r1
 80075a2:	4461      	add	r1, ip
 80075a4:	f8d9 c000 	ldr.w	ip, [r9]
 80075a8:	0c12      	lsrs	r2, r2, #16
 80075aa:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80075ae:	fb0a c202 	mla	r2, sl, r2, ip
 80075b2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80075b6:	b289      	uxth	r1, r1
 80075b8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80075bc:	4577      	cmp	r7, lr
 80075be:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80075c2:	f849 1b04 	str.w	r1, [r9], #4
 80075c6:	d8e3      	bhi.n	8007590 <__multiply+0xb0>
 80075c8:	9a01      	ldr	r2, [sp, #4]
 80075ca:	f845 c002 	str.w	ip, [r5, r2]
 80075ce:	9a03      	ldr	r2, [sp, #12]
 80075d0:	3304      	adds	r3, #4
 80075d2:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80075d6:	f1b9 0f00 	cmp.w	r9, #0
 80075da:	d020      	beq.n	800761e <__multiply+0x13e>
 80075dc:	46ae      	mov	lr, r5
 80075de:	f04f 0a00 	mov.w	sl, #0
 80075e2:	6829      	ldr	r1, [r5, #0]
 80075e4:	f104 0c14 	add.w	ip, r4, #20
 80075e8:	f8bc b000 	ldrh.w	fp, [ip]
 80075ec:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80075f0:	b289      	uxth	r1, r1
 80075f2:	fb09 220b 	mla	r2, r9, fp, r2
 80075f6:	4492      	add	sl, r2
 80075f8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80075fc:	f84e 1b04 	str.w	r1, [lr], #4
 8007600:	f85c 2b04 	ldr.w	r2, [ip], #4
 8007604:	f8be 1000 	ldrh.w	r1, [lr]
 8007608:	0c12      	lsrs	r2, r2, #16
 800760a:	fb09 1102 	mla	r1, r9, r2, r1
 800760e:	4567      	cmp	r7, ip
 8007610:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8007614:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007618:	d8e6      	bhi.n	80075e8 <__multiply+0x108>
 800761a:	9a01      	ldr	r2, [sp, #4]
 800761c:	50a9      	str	r1, [r5, r2]
 800761e:	3504      	adds	r5, #4
 8007620:	e79b      	b.n	800755a <__multiply+0x7a>
 8007622:	3e01      	subs	r6, #1
 8007624:	e79d      	b.n	8007562 <__multiply+0x82>
 8007626:	bf00      	nop
 8007628:	08009dd0 	.word	0x08009dd0
 800762c:	08009e5c 	.word	0x08009e5c

08007630 <__pow5mult>:
 8007630:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007634:	4615      	mov	r5, r2
 8007636:	f012 0203 	ands.w	r2, r2, #3
 800763a:	4606      	mov	r6, r0
 800763c:	460f      	mov	r7, r1
 800763e:	d007      	beq.n	8007650 <__pow5mult+0x20>
 8007640:	4c25      	ldr	r4, [pc, #148]	; (80076d8 <__pow5mult+0xa8>)
 8007642:	3a01      	subs	r2, #1
 8007644:	2300      	movs	r3, #0
 8007646:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800764a:	f7ff fe55 	bl	80072f8 <__multadd>
 800764e:	4607      	mov	r7, r0
 8007650:	10ad      	asrs	r5, r5, #2
 8007652:	d03d      	beq.n	80076d0 <__pow5mult+0xa0>
 8007654:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007656:	b97c      	cbnz	r4, 8007678 <__pow5mult+0x48>
 8007658:	2010      	movs	r0, #16
 800765a:	f7ff fdb5 	bl	80071c8 <malloc>
 800765e:	4602      	mov	r2, r0
 8007660:	6270      	str	r0, [r6, #36]	; 0x24
 8007662:	b928      	cbnz	r0, 8007670 <__pow5mult+0x40>
 8007664:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8007668:	4b1c      	ldr	r3, [pc, #112]	; (80076dc <__pow5mult+0xac>)
 800766a:	481d      	ldr	r0, [pc, #116]	; (80076e0 <__pow5mult+0xb0>)
 800766c:	f000 fd1e 	bl	80080ac <__assert_func>
 8007670:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007674:	6004      	str	r4, [r0, #0]
 8007676:	60c4      	str	r4, [r0, #12]
 8007678:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800767c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007680:	b94c      	cbnz	r4, 8007696 <__pow5mult+0x66>
 8007682:	f240 2171 	movw	r1, #625	; 0x271
 8007686:	4630      	mov	r0, r6
 8007688:	f7ff ff14 	bl	80074b4 <__i2b>
 800768c:	2300      	movs	r3, #0
 800768e:	4604      	mov	r4, r0
 8007690:	f8c8 0008 	str.w	r0, [r8, #8]
 8007694:	6003      	str	r3, [r0, #0]
 8007696:	f04f 0900 	mov.w	r9, #0
 800769a:	07eb      	lsls	r3, r5, #31
 800769c:	d50a      	bpl.n	80076b4 <__pow5mult+0x84>
 800769e:	4639      	mov	r1, r7
 80076a0:	4622      	mov	r2, r4
 80076a2:	4630      	mov	r0, r6
 80076a4:	f7ff ff1c 	bl	80074e0 <__multiply>
 80076a8:	4680      	mov	r8, r0
 80076aa:	4639      	mov	r1, r7
 80076ac:	4630      	mov	r0, r6
 80076ae:	f7ff fe01 	bl	80072b4 <_Bfree>
 80076b2:	4647      	mov	r7, r8
 80076b4:	106d      	asrs	r5, r5, #1
 80076b6:	d00b      	beq.n	80076d0 <__pow5mult+0xa0>
 80076b8:	6820      	ldr	r0, [r4, #0]
 80076ba:	b938      	cbnz	r0, 80076cc <__pow5mult+0x9c>
 80076bc:	4622      	mov	r2, r4
 80076be:	4621      	mov	r1, r4
 80076c0:	4630      	mov	r0, r6
 80076c2:	f7ff ff0d 	bl	80074e0 <__multiply>
 80076c6:	6020      	str	r0, [r4, #0]
 80076c8:	f8c0 9000 	str.w	r9, [r0]
 80076cc:	4604      	mov	r4, r0
 80076ce:	e7e4      	b.n	800769a <__pow5mult+0x6a>
 80076d0:	4638      	mov	r0, r7
 80076d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80076d6:	bf00      	nop
 80076d8:	08009fa8 	.word	0x08009fa8
 80076dc:	08009d5e 	.word	0x08009d5e
 80076e0:	08009e5c 	.word	0x08009e5c

080076e4 <__lshift>:
 80076e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80076e8:	460c      	mov	r4, r1
 80076ea:	4607      	mov	r7, r0
 80076ec:	4691      	mov	r9, r2
 80076ee:	6923      	ldr	r3, [r4, #16]
 80076f0:	6849      	ldr	r1, [r1, #4]
 80076f2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80076f6:	68a3      	ldr	r3, [r4, #8]
 80076f8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80076fc:	f108 0601 	add.w	r6, r8, #1
 8007700:	42b3      	cmp	r3, r6
 8007702:	db0b      	blt.n	800771c <__lshift+0x38>
 8007704:	4638      	mov	r0, r7
 8007706:	f7ff fd95 	bl	8007234 <_Balloc>
 800770a:	4605      	mov	r5, r0
 800770c:	b948      	cbnz	r0, 8007722 <__lshift+0x3e>
 800770e:	4602      	mov	r2, r0
 8007710:	f240 11d9 	movw	r1, #473	; 0x1d9
 8007714:	4b29      	ldr	r3, [pc, #164]	; (80077bc <__lshift+0xd8>)
 8007716:	482a      	ldr	r0, [pc, #168]	; (80077c0 <__lshift+0xdc>)
 8007718:	f000 fcc8 	bl	80080ac <__assert_func>
 800771c:	3101      	adds	r1, #1
 800771e:	005b      	lsls	r3, r3, #1
 8007720:	e7ee      	b.n	8007700 <__lshift+0x1c>
 8007722:	2300      	movs	r3, #0
 8007724:	f100 0114 	add.w	r1, r0, #20
 8007728:	f100 0210 	add.w	r2, r0, #16
 800772c:	4618      	mov	r0, r3
 800772e:	4553      	cmp	r3, sl
 8007730:	db37      	blt.n	80077a2 <__lshift+0xbe>
 8007732:	6920      	ldr	r0, [r4, #16]
 8007734:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007738:	f104 0314 	add.w	r3, r4, #20
 800773c:	f019 091f 	ands.w	r9, r9, #31
 8007740:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007744:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8007748:	d02f      	beq.n	80077aa <__lshift+0xc6>
 800774a:	468a      	mov	sl, r1
 800774c:	f04f 0c00 	mov.w	ip, #0
 8007750:	f1c9 0e20 	rsb	lr, r9, #32
 8007754:	681a      	ldr	r2, [r3, #0]
 8007756:	fa02 f209 	lsl.w	r2, r2, r9
 800775a:	ea42 020c 	orr.w	r2, r2, ip
 800775e:	f84a 2b04 	str.w	r2, [sl], #4
 8007762:	f853 2b04 	ldr.w	r2, [r3], #4
 8007766:	4298      	cmp	r0, r3
 8007768:	fa22 fc0e 	lsr.w	ip, r2, lr
 800776c:	d8f2      	bhi.n	8007754 <__lshift+0x70>
 800776e:	1b03      	subs	r3, r0, r4
 8007770:	3b15      	subs	r3, #21
 8007772:	f023 0303 	bic.w	r3, r3, #3
 8007776:	3304      	adds	r3, #4
 8007778:	f104 0215 	add.w	r2, r4, #21
 800777c:	4290      	cmp	r0, r2
 800777e:	bf38      	it	cc
 8007780:	2304      	movcc	r3, #4
 8007782:	f841 c003 	str.w	ip, [r1, r3]
 8007786:	f1bc 0f00 	cmp.w	ip, #0
 800778a:	d001      	beq.n	8007790 <__lshift+0xac>
 800778c:	f108 0602 	add.w	r6, r8, #2
 8007790:	3e01      	subs	r6, #1
 8007792:	4638      	mov	r0, r7
 8007794:	4621      	mov	r1, r4
 8007796:	612e      	str	r6, [r5, #16]
 8007798:	f7ff fd8c 	bl	80072b4 <_Bfree>
 800779c:	4628      	mov	r0, r5
 800779e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80077a2:	f842 0f04 	str.w	r0, [r2, #4]!
 80077a6:	3301      	adds	r3, #1
 80077a8:	e7c1      	b.n	800772e <__lshift+0x4a>
 80077aa:	3904      	subs	r1, #4
 80077ac:	f853 2b04 	ldr.w	r2, [r3], #4
 80077b0:	4298      	cmp	r0, r3
 80077b2:	f841 2f04 	str.w	r2, [r1, #4]!
 80077b6:	d8f9      	bhi.n	80077ac <__lshift+0xc8>
 80077b8:	e7ea      	b.n	8007790 <__lshift+0xac>
 80077ba:	bf00      	nop
 80077bc:	08009dd0 	.word	0x08009dd0
 80077c0:	08009e5c 	.word	0x08009e5c

080077c4 <__mcmp>:
 80077c4:	4603      	mov	r3, r0
 80077c6:	690a      	ldr	r2, [r1, #16]
 80077c8:	6900      	ldr	r0, [r0, #16]
 80077ca:	b530      	push	{r4, r5, lr}
 80077cc:	1a80      	subs	r0, r0, r2
 80077ce:	d10d      	bne.n	80077ec <__mcmp+0x28>
 80077d0:	3314      	adds	r3, #20
 80077d2:	3114      	adds	r1, #20
 80077d4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80077d8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80077dc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80077e0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80077e4:	4295      	cmp	r5, r2
 80077e6:	d002      	beq.n	80077ee <__mcmp+0x2a>
 80077e8:	d304      	bcc.n	80077f4 <__mcmp+0x30>
 80077ea:	2001      	movs	r0, #1
 80077ec:	bd30      	pop	{r4, r5, pc}
 80077ee:	42a3      	cmp	r3, r4
 80077f0:	d3f4      	bcc.n	80077dc <__mcmp+0x18>
 80077f2:	e7fb      	b.n	80077ec <__mcmp+0x28>
 80077f4:	f04f 30ff 	mov.w	r0, #4294967295
 80077f8:	e7f8      	b.n	80077ec <__mcmp+0x28>
	...

080077fc <__mdiff>:
 80077fc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007800:	460d      	mov	r5, r1
 8007802:	4607      	mov	r7, r0
 8007804:	4611      	mov	r1, r2
 8007806:	4628      	mov	r0, r5
 8007808:	4614      	mov	r4, r2
 800780a:	f7ff ffdb 	bl	80077c4 <__mcmp>
 800780e:	1e06      	subs	r6, r0, #0
 8007810:	d111      	bne.n	8007836 <__mdiff+0x3a>
 8007812:	4631      	mov	r1, r6
 8007814:	4638      	mov	r0, r7
 8007816:	f7ff fd0d 	bl	8007234 <_Balloc>
 800781a:	4602      	mov	r2, r0
 800781c:	b928      	cbnz	r0, 800782a <__mdiff+0x2e>
 800781e:	f240 2132 	movw	r1, #562	; 0x232
 8007822:	4b3a      	ldr	r3, [pc, #232]	; (800790c <__mdiff+0x110>)
 8007824:	483a      	ldr	r0, [pc, #232]	; (8007910 <__mdiff+0x114>)
 8007826:	f000 fc41 	bl	80080ac <__assert_func>
 800782a:	2301      	movs	r3, #1
 800782c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8007830:	4610      	mov	r0, r2
 8007832:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007836:	bfa4      	itt	ge
 8007838:	4623      	movge	r3, r4
 800783a:	462c      	movge	r4, r5
 800783c:	4638      	mov	r0, r7
 800783e:	6861      	ldr	r1, [r4, #4]
 8007840:	bfa6      	itte	ge
 8007842:	461d      	movge	r5, r3
 8007844:	2600      	movge	r6, #0
 8007846:	2601      	movlt	r6, #1
 8007848:	f7ff fcf4 	bl	8007234 <_Balloc>
 800784c:	4602      	mov	r2, r0
 800784e:	b918      	cbnz	r0, 8007858 <__mdiff+0x5c>
 8007850:	f44f 7110 	mov.w	r1, #576	; 0x240
 8007854:	4b2d      	ldr	r3, [pc, #180]	; (800790c <__mdiff+0x110>)
 8007856:	e7e5      	b.n	8007824 <__mdiff+0x28>
 8007858:	f102 0814 	add.w	r8, r2, #20
 800785c:	46c2      	mov	sl, r8
 800785e:	f04f 0c00 	mov.w	ip, #0
 8007862:	6927      	ldr	r7, [r4, #16]
 8007864:	60c6      	str	r6, [r0, #12]
 8007866:	692e      	ldr	r6, [r5, #16]
 8007868:	f104 0014 	add.w	r0, r4, #20
 800786c:	f105 0914 	add.w	r9, r5, #20
 8007870:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8007874:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007878:	3410      	adds	r4, #16
 800787a:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800787e:	f859 3b04 	ldr.w	r3, [r9], #4
 8007882:	fa1f f18b 	uxth.w	r1, fp
 8007886:	448c      	add	ip, r1
 8007888:	b299      	uxth	r1, r3
 800788a:	0c1b      	lsrs	r3, r3, #16
 800788c:	ebac 0101 	sub.w	r1, ip, r1
 8007890:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007894:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8007898:	b289      	uxth	r1, r1
 800789a:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800789e:	454e      	cmp	r6, r9
 80078a0:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80078a4:	f84a 3b04 	str.w	r3, [sl], #4
 80078a8:	d8e7      	bhi.n	800787a <__mdiff+0x7e>
 80078aa:	1b73      	subs	r3, r6, r5
 80078ac:	3b15      	subs	r3, #21
 80078ae:	f023 0303 	bic.w	r3, r3, #3
 80078b2:	3515      	adds	r5, #21
 80078b4:	3304      	adds	r3, #4
 80078b6:	42ae      	cmp	r6, r5
 80078b8:	bf38      	it	cc
 80078ba:	2304      	movcc	r3, #4
 80078bc:	4418      	add	r0, r3
 80078be:	4443      	add	r3, r8
 80078c0:	461e      	mov	r6, r3
 80078c2:	4605      	mov	r5, r0
 80078c4:	4575      	cmp	r5, lr
 80078c6:	d30e      	bcc.n	80078e6 <__mdiff+0xea>
 80078c8:	f10e 0103 	add.w	r1, lr, #3
 80078cc:	1a09      	subs	r1, r1, r0
 80078ce:	f021 0103 	bic.w	r1, r1, #3
 80078d2:	3803      	subs	r0, #3
 80078d4:	4586      	cmp	lr, r0
 80078d6:	bf38      	it	cc
 80078d8:	2100      	movcc	r1, #0
 80078da:	4419      	add	r1, r3
 80078dc:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 80078e0:	b18b      	cbz	r3, 8007906 <__mdiff+0x10a>
 80078e2:	6117      	str	r7, [r2, #16]
 80078e4:	e7a4      	b.n	8007830 <__mdiff+0x34>
 80078e6:	f855 8b04 	ldr.w	r8, [r5], #4
 80078ea:	fa1f f188 	uxth.w	r1, r8
 80078ee:	4461      	add	r1, ip
 80078f0:	140c      	asrs	r4, r1, #16
 80078f2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80078f6:	b289      	uxth	r1, r1
 80078f8:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80078fc:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8007900:	f846 1b04 	str.w	r1, [r6], #4
 8007904:	e7de      	b.n	80078c4 <__mdiff+0xc8>
 8007906:	3f01      	subs	r7, #1
 8007908:	e7e8      	b.n	80078dc <__mdiff+0xe0>
 800790a:	bf00      	nop
 800790c:	08009dd0 	.word	0x08009dd0
 8007910:	08009e5c 	.word	0x08009e5c

08007914 <__ulp>:
 8007914:	4b11      	ldr	r3, [pc, #68]	; (800795c <__ulp+0x48>)
 8007916:	400b      	ands	r3, r1
 8007918:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800791c:	2b00      	cmp	r3, #0
 800791e:	dd02      	ble.n	8007926 <__ulp+0x12>
 8007920:	2000      	movs	r0, #0
 8007922:	4619      	mov	r1, r3
 8007924:	4770      	bx	lr
 8007926:	425b      	negs	r3, r3
 8007928:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800792c:	f04f 0000 	mov.w	r0, #0
 8007930:	f04f 0100 	mov.w	r1, #0
 8007934:	ea4f 5223 	mov.w	r2, r3, asr #20
 8007938:	da04      	bge.n	8007944 <__ulp+0x30>
 800793a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800793e:	fa43 f102 	asr.w	r1, r3, r2
 8007942:	4770      	bx	lr
 8007944:	f1a2 0314 	sub.w	r3, r2, #20
 8007948:	2b1e      	cmp	r3, #30
 800794a:	bfd6      	itet	le
 800794c:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8007950:	2301      	movgt	r3, #1
 8007952:	fa22 f303 	lsrle.w	r3, r2, r3
 8007956:	4618      	mov	r0, r3
 8007958:	4770      	bx	lr
 800795a:	bf00      	nop
 800795c:	7ff00000 	.word	0x7ff00000

08007960 <__b2d>:
 8007960:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007964:	6907      	ldr	r7, [r0, #16]
 8007966:	f100 0914 	add.w	r9, r0, #20
 800796a:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 800796e:	f857 6c04 	ldr.w	r6, [r7, #-4]
 8007972:	f1a7 0804 	sub.w	r8, r7, #4
 8007976:	4630      	mov	r0, r6
 8007978:	f7ff fd4e 	bl	8007418 <__hi0bits>
 800797c:	f1c0 0320 	rsb	r3, r0, #32
 8007980:	280a      	cmp	r0, #10
 8007982:	600b      	str	r3, [r1, #0]
 8007984:	491f      	ldr	r1, [pc, #124]	; (8007a04 <__b2d+0xa4>)
 8007986:	dc17      	bgt.n	80079b8 <__b2d+0x58>
 8007988:	45c1      	cmp	r9, r8
 800798a:	bf28      	it	cs
 800798c:	2200      	movcs	r2, #0
 800798e:	f1c0 0c0b 	rsb	ip, r0, #11
 8007992:	fa26 f30c 	lsr.w	r3, r6, ip
 8007996:	bf38      	it	cc
 8007998:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800799c:	ea43 0501 	orr.w	r5, r3, r1
 80079a0:	f100 0315 	add.w	r3, r0, #21
 80079a4:	fa06 f303 	lsl.w	r3, r6, r3
 80079a8:	fa22 f20c 	lsr.w	r2, r2, ip
 80079ac:	ea43 0402 	orr.w	r4, r3, r2
 80079b0:	4620      	mov	r0, r4
 80079b2:	4629      	mov	r1, r5
 80079b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80079b8:	45c1      	cmp	r9, r8
 80079ba:	bf2e      	itee	cs
 80079bc:	2200      	movcs	r2, #0
 80079be:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 80079c2:	f1a7 0808 	subcc.w	r8, r7, #8
 80079c6:	f1b0 030b 	subs.w	r3, r0, #11
 80079ca:	d016      	beq.n	80079fa <__b2d+0x9a>
 80079cc:	f1c3 0720 	rsb	r7, r3, #32
 80079d0:	fa22 f107 	lsr.w	r1, r2, r7
 80079d4:	45c8      	cmp	r8, r9
 80079d6:	fa06 f603 	lsl.w	r6, r6, r3
 80079da:	ea46 0601 	orr.w	r6, r6, r1
 80079de:	bf94      	ite	ls
 80079e0:	2100      	movls	r1, #0
 80079e2:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 80079e6:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 80079ea:	fa02 f003 	lsl.w	r0, r2, r3
 80079ee:	40f9      	lsrs	r1, r7
 80079f0:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80079f4:	ea40 0401 	orr.w	r4, r0, r1
 80079f8:	e7da      	b.n	80079b0 <__b2d+0x50>
 80079fa:	4614      	mov	r4, r2
 80079fc:	ea46 0501 	orr.w	r5, r6, r1
 8007a00:	e7d6      	b.n	80079b0 <__b2d+0x50>
 8007a02:	bf00      	nop
 8007a04:	3ff00000 	.word	0x3ff00000

08007a08 <__d2b>:
 8007a08:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8007a0c:	2101      	movs	r1, #1
 8007a0e:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8007a12:	4690      	mov	r8, r2
 8007a14:	461d      	mov	r5, r3
 8007a16:	f7ff fc0d 	bl	8007234 <_Balloc>
 8007a1a:	4604      	mov	r4, r0
 8007a1c:	b930      	cbnz	r0, 8007a2c <__d2b+0x24>
 8007a1e:	4602      	mov	r2, r0
 8007a20:	f240 310a 	movw	r1, #778	; 0x30a
 8007a24:	4b24      	ldr	r3, [pc, #144]	; (8007ab8 <__d2b+0xb0>)
 8007a26:	4825      	ldr	r0, [pc, #148]	; (8007abc <__d2b+0xb4>)
 8007a28:	f000 fb40 	bl	80080ac <__assert_func>
 8007a2c:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8007a30:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8007a34:	bb2d      	cbnz	r5, 8007a82 <__d2b+0x7a>
 8007a36:	9301      	str	r3, [sp, #4]
 8007a38:	f1b8 0300 	subs.w	r3, r8, #0
 8007a3c:	d026      	beq.n	8007a8c <__d2b+0x84>
 8007a3e:	4668      	mov	r0, sp
 8007a40:	9300      	str	r3, [sp, #0]
 8007a42:	f7ff fd09 	bl	8007458 <__lo0bits>
 8007a46:	9900      	ldr	r1, [sp, #0]
 8007a48:	b1f0      	cbz	r0, 8007a88 <__d2b+0x80>
 8007a4a:	9a01      	ldr	r2, [sp, #4]
 8007a4c:	f1c0 0320 	rsb	r3, r0, #32
 8007a50:	fa02 f303 	lsl.w	r3, r2, r3
 8007a54:	430b      	orrs	r3, r1
 8007a56:	40c2      	lsrs	r2, r0
 8007a58:	6163      	str	r3, [r4, #20]
 8007a5a:	9201      	str	r2, [sp, #4]
 8007a5c:	9b01      	ldr	r3, [sp, #4]
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	bf14      	ite	ne
 8007a62:	2102      	movne	r1, #2
 8007a64:	2101      	moveq	r1, #1
 8007a66:	61a3      	str	r3, [r4, #24]
 8007a68:	6121      	str	r1, [r4, #16]
 8007a6a:	b1c5      	cbz	r5, 8007a9e <__d2b+0x96>
 8007a6c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007a70:	4405      	add	r5, r0
 8007a72:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007a76:	603d      	str	r5, [r7, #0]
 8007a78:	6030      	str	r0, [r6, #0]
 8007a7a:	4620      	mov	r0, r4
 8007a7c:	b002      	add	sp, #8
 8007a7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007a82:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007a86:	e7d6      	b.n	8007a36 <__d2b+0x2e>
 8007a88:	6161      	str	r1, [r4, #20]
 8007a8a:	e7e7      	b.n	8007a5c <__d2b+0x54>
 8007a8c:	a801      	add	r0, sp, #4
 8007a8e:	f7ff fce3 	bl	8007458 <__lo0bits>
 8007a92:	2101      	movs	r1, #1
 8007a94:	9b01      	ldr	r3, [sp, #4]
 8007a96:	6121      	str	r1, [r4, #16]
 8007a98:	6163      	str	r3, [r4, #20]
 8007a9a:	3020      	adds	r0, #32
 8007a9c:	e7e5      	b.n	8007a6a <__d2b+0x62>
 8007a9e:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8007aa2:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007aa6:	6038      	str	r0, [r7, #0]
 8007aa8:	6918      	ldr	r0, [r3, #16]
 8007aaa:	f7ff fcb5 	bl	8007418 <__hi0bits>
 8007aae:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8007ab2:	6031      	str	r1, [r6, #0]
 8007ab4:	e7e1      	b.n	8007a7a <__d2b+0x72>
 8007ab6:	bf00      	nop
 8007ab8:	08009dd0 	.word	0x08009dd0
 8007abc:	08009e5c 	.word	0x08009e5c

08007ac0 <__ratio>:
 8007ac0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ac4:	4688      	mov	r8, r1
 8007ac6:	4669      	mov	r1, sp
 8007ac8:	4681      	mov	r9, r0
 8007aca:	f7ff ff49 	bl	8007960 <__b2d>
 8007ace:	460f      	mov	r7, r1
 8007ad0:	4604      	mov	r4, r0
 8007ad2:	460d      	mov	r5, r1
 8007ad4:	4640      	mov	r0, r8
 8007ad6:	a901      	add	r1, sp, #4
 8007ad8:	f7ff ff42 	bl	8007960 <__b2d>
 8007adc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007ae0:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8007ae4:	468b      	mov	fp, r1
 8007ae6:	eba3 0c02 	sub.w	ip, r3, r2
 8007aea:	e9dd 3200 	ldrd	r3, r2, [sp]
 8007aee:	1a9b      	subs	r3, r3, r2
 8007af0:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	bfd5      	itete	le
 8007af8:	460a      	movle	r2, r1
 8007afa:	462a      	movgt	r2, r5
 8007afc:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8007b00:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8007b04:	bfd8      	it	le
 8007b06:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8007b0a:	465b      	mov	r3, fp
 8007b0c:	4602      	mov	r2, r0
 8007b0e:	4639      	mov	r1, r7
 8007b10:	4620      	mov	r0, r4
 8007b12:	f7f8 fe0b 	bl	800072c <__aeabi_ddiv>
 8007b16:	b003      	add	sp, #12
 8007b18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007b1c <__copybits>:
 8007b1c:	3901      	subs	r1, #1
 8007b1e:	b570      	push	{r4, r5, r6, lr}
 8007b20:	1149      	asrs	r1, r1, #5
 8007b22:	6914      	ldr	r4, [r2, #16]
 8007b24:	3101      	adds	r1, #1
 8007b26:	f102 0314 	add.w	r3, r2, #20
 8007b2a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8007b2e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8007b32:	1f05      	subs	r5, r0, #4
 8007b34:	42a3      	cmp	r3, r4
 8007b36:	d30c      	bcc.n	8007b52 <__copybits+0x36>
 8007b38:	1aa3      	subs	r3, r4, r2
 8007b3a:	3b11      	subs	r3, #17
 8007b3c:	f023 0303 	bic.w	r3, r3, #3
 8007b40:	3211      	adds	r2, #17
 8007b42:	42a2      	cmp	r2, r4
 8007b44:	bf88      	it	hi
 8007b46:	2300      	movhi	r3, #0
 8007b48:	4418      	add	r0, r3
 8007b4a:	2300      	movs	r3, #0
 8007b4c:	4288      	cmp	r0, r1
 8007b4e:	d305      	bcc.n	8007b5c <__copybits+0x40>
 8007b50:	bd70      	pop	{r4, r5, r6, pc}
 8007b52:	f853 6b04 	ldr.w	r6, [r3], #4
 8007b56:	f845 6f04 	str.w	r6, [r5, #4]!
 8007b5a:	e7eb      	b.n	8007b34 <__copybits+0x18>
 8007b5c:	f840 3b04 	str.w	r3, [r0], #4
 8007b60:	e7f4      	b.n	8007b4c <__copybits+0x30>

08007b62 <__any_on>:
 8007b62:	f100 0214 	add.w	r2, r0, #20
 8007b66:	6900      	ldr	r0, [r0, #16]
 8007b68:	114b      	asrs	r3, r1, #5
 8007b6a:	4298      	cmp	r0, r3
 8007b6c:	b510      	push	{r4, lr}
 8007b6e:	db11      	blt.n	8007b94 <__any_on+0x32>
 8007b70:	dd0a      	ble.n	8007b88 <__any_on+0x26>
 8007b72:	f011 011f 	ands.w	r1, r1, #31
 8007b76:	d007      	beq.n	8007b88 <__any_on+0x26>
 8007b78:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8007b7c:	fa24 f001 	lsr.w	r0, r4, r1
 8007b80:	fa00 f101 	lsl.w	r1, r0, r1
 8007b84:	428c      	cmp	r4, r1
 8007b86:	d10b      	bne.n	8007ba0 <__any_on+0x3e>
 8007b88:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007b8c:	4293      	cmp	r3, r2
 8007b8e:	d803      	bhi.n	8007b98 <__any_on+0x36>
 8007b90:	2000      	movs	r0, #0
 8007b92:	bd10      	pop	{r4, pc}
 8007b94:	4603      	mov	r3, r0
 8007b96:	e7f7      	b.n	8007b88 <__any_on+0x26>
 8007b98:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007b9c:	2900      	cmp	r1, #0
 8007b9e:	d0f5      	beq.n	8007b8c <__any_on+0x2a>
 8007ba0:	2001      	movs	r0, #1
 8007ba2:	e7f6      	b.n	8007b92 <__any_on+0x30>

08007ba4 <_calloc_r>:
 8007ba4:	b570      	push	{r4, r5, r6, lr}
 8007ba6:	fba1 5402 	umull	r5, r4, r1, r2
 8007baa:	b934      	cbnz	r4, 8007bba <_calloc_r+0x16>
 8007bac:	4629      	mov	r1, r5
 8007bae:	f000 f875 	bl	8007c9c <_malloc_r>
 8007bb2:	4606      	mov	r6, r0
 8007bb4:	b928      	cbnz	r0, 8007bc2 <_calloc_r+0x1e>
 8007bb6:	4630      	mov	r0, r6
 8007bb8:	bd70      	pop	{r4, r5, r6, pc}
 8007bba:	220c      	movs	r2, #12
 8007bbc:	2600      	movs	r6, #0
 8007bbe:	6002      	str	r2, [r0, #0]
 8007bc0:	e7f9      	b.n	8007bb6 <_calloc_r+0x12>
 8007bc2:	462a      	mov	r2, r5
 8007bc4:	4621      	mov	r1, r4
 8007bc6:	f7fc fbe3 	bl	8004390 <memset>
 8007bca:	e7f4      	b.n	8007bb6 <_calloc_r+0x12>

08007bcc <_free_r>:
 8007bcc:	b538      	push	{r3, r4, r5, lr}
 8007bce:	4605      	mov	r5, r0
 8007bd0:	2900      	cmp	r1, #0
 8007bd2:	d040      	beq.n	8007c56 <_free_r+0x8a>
 8007bd4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007bd8:	1f0c      	subs	r4, r1, #4
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	bfb8      	it	lt
 8007bde:	18e4      	addlt	r4, r4, r3
 8007be0:	f000 faae 	bl	8008140 <__malloc_lock>
 8007be4:	4a1c      	ldr	r2, [pc, #112]	; (8007c58 <_free_r+0x8c>)
 8007be6:	6813      	ldr	r3, [r2, #0]
 8007be8:	b933      	cbnz	r3, 8007bf8 <_free_r+0x2c>
 8007bea:	6063      	str	r3, [r4, #4]
 8007bec:	6014      	str	r4, [r2, #0]
 8007bee:	4628      	mov	r0, r5
 8007bf0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007bf4:	f000 baaa 	b.w	800814c <__malloc_unlock>
 8007bf8:	42a3      	cmp	r3, r4
 8007bfa:	d908      	bls.n	8007c0e <_free_r+0x42>
 8007bfc:	6820      	ldr	r0, [r4, #0]
 8007bfe:	1821      	adds	r1, r4, r0
 8007c00:	428b      	cmp	r3, r1
 8007c02:	bf01      	itttt	eq
 8007c04:	6819      	ldreq	r1, [r3, #0]
 8007c06:	685b      	ldreq	r3, [r3, #4]
 8007c08:	1809      	addeq	r1, r1, r0
 8007c0a:	6021      	streq	r1, [r4, #0]
 8007c0c:	e7ed      	b.n	8007bea <_free_r+0x1e>
 8007c0e:	461a      	mov	r2, r3
 8007c10:	685b      	ldr	r3, [r3, #4]
 8007c12:	b10b      	cbz	r3, 8007c18 <_free_r+0x4c>
 8007c14:	42a3      	cmp	r3, r4
 8007c16:	d9fa      	bls.n	8007c0e <_free_r+0x42>
 8007c18:	6811      	ldr	r1, [r2, #0]
 8007c1a:	1850      	adds	r0, r2, r1
 8007c1c:	42a0      	cmp	r0, r4
 8007c1e:	d10b      	bne.n	8007c38 <_free_r+0x6c>
 8007c20:	6820      	ldr	r0, [r4, #0]
 8007c22:	4401      	add	r1, r0
 8007c24:	1850      	adds	r0, r2, r1
 8007c26:	4283      	cmp	r3, r0
 8007c28:	6011      	str	r1, [r2, #0]
 8007c2a:	d1e0      	bne.n	8007bee <_free_r+0x22>
 8007c2c:	6818      	ldr	r0, [r3, #0]
 8007c2e:	685b      	ldr	r3, [r3, #4]
 8007c30:	4401      	add	r1, r0
 8007c32:	6011      	str	r1, [r2, #0]
 8007c34:	6053      	str	r3, [r2, #4]
 8007c36:	e7da      	b.n	8007bee <_free_r+0x22>
 8007c38:	d902      	bls.n	8007c40 <_free_r+0x74>
 8007c3a:	230c      	movs	r3, #12
 8007c3c:	602b      	str	r3, [r5, #0]
 8007c3e:	e7d6      	b.n	8007bee <_free_r+0x22>
 8007c40:	6820      	ldr	r0, [r4, #0]
 8007c42:	1821      	adds	r1, r4, r0
 8007c44:	428b      	cmp	r3, r1
 8007c46:	bf01      	itttt	eq
 8007c48:	6819      	ldreq	r1, [r3, #0]
 8007c4a:	685b      	ldreq	r3, [r3, #4]
 8007c4c:	1809      	addeq	r1, r1, r0
 8007c4e:	6021      	streq	r1, [r4, #0]
 8007c50:	6063      	str	r3, [r4, #4]
 8007c52:	6054      	str	r4, [r2, #4]
 8007c54:	e7cb      	b.n	8007bee <_free_r+0x22>
 8007c56:	bd38      	pop	{r3, r4, r5, pc}
 8007c58:	20000370 	.word	0x20000370

08007c5c <sbrk_aligned>:
 8007c5c:	b570      	push	{r4, r5, r6, lr}
 8007c5e:	4e0e      	ldr	r6, [pc, #56]	; (8007c98 <sbrk_aligned+0x3c>)
 8007c60:	460c      	mov	r4, r1
 8007c62:	6831      	ldr	r1, [r6, #0]
 8007c64:	4605      	mov	r5, r0
 8007c66:	b911      	cbnz	r1, 8007c6e <sbrk_aligned+0x12>
 8007c68:	f000 f9ee 	bl	8008048 <_sbrk_r>
 8007c6c:	6030      	str	r0, [r6, #0]
 8007c6e:	4621      	mov	r1, r4
 8007c70:	4628      	mov	r0, r5
 8007c72:	f000 f9e9 	bl	8008048 <_sbrk_r>
 8007c76:	1c43      	adds	r3, r0, #1
 8007c78:	d00a      	beq.n	8007c90 <sbrk_aligned+0x34>
 8007c7a:	1cc4      	adds	r4, r0, #3
 8007c7c:	f024 0403 	bic.w	r4, r4, #3
 8007c80:	42a0      	cmp	r0, r4
 8007c82:	d007      	beq.n	8007c94 <sbrk_aligned+0x38>
 8007c84:	1a21      	subs	r1, r4, r0
 8007c86:	4628      	mov	r0, r5
 8007c88:	f000 f9de 	bl	8008048 <_sbrk_r>
 8007c8c:	3001      	adds	r0, #1
 8007c8e:	d101      	bne.n	8007c94 <sbrk_aligned+0x38>
 8007c90:	f04f 34ff 	mov.w	r4, #4294967295
 8007c94:	4620      	mov	r0, r4
 8007c96:	bd70      	pop	{r4, r5, r6, pc}
 8007c98:	20000374 	.word	0x20000374

08007c9c <_malloc_r>:
 8007c9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ca0:	1ccd      	adds	r5, r1, #3
 8007ca2:	f025 0503 	bic.w	r5, r5, #3
 8007ca6:	3508      	adds	r5, #8
 8007ca8:	2d0c      	cmp	r5, #12
 8007caa:	bf38      	it	cc
 8007cac:	250c      	movcc	r5, #12
 8007cae:	2d00      	cmp	r5, #0
 8007cb0:	4607      	mov	r7, r0
 8007cb2:	db01      	blt.n	8007cb8 <_malloc_r+0x1c>
 8007cb4:	42a9      	cmp	r1, r5
 8007cb6:	d905      	bls.n	8007cc4 <_malloc_r+0x28>
 8007cb8:	230c      	movs	r3, #12
 8007cba:	2600      	movs	r6, #0
 8007cbc:	603b      	str	r3, [r7, #0]
 8007cbe:	4630      	mov	r0, r6
 8007cc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007cc4:	4e2e      	ldr	r6, [pc, #184]	; (8007d80 <_malloc_r+0xe4>)
 8007cc6:	f000 fa3b 	bl	8008140 <__malloc_lock>
 8007cca:	6833      	ldr	r3, [r6, #0]
 8007ccc:	461c      	mov	r4, r3
 8007cce:	bb34      	cbnz	r4, 8007d1e <_malloc_r+0x82>
 8007cd0:	4629      	mov	r1, r5
 8007cd2:	4638      	mov	r0, r7
 8007cd4:	f7ff ffc2 	bl	8007c5c <sbrk_aligned>
 8007cd8:	1c43      	adds	r3, r0, #1
 8007cda:	4604      	mov	r4, r0
 8007cdc:	d14d      	bne.n	8007d7a <_malloc_r+0xde>
 8007cde:	6834      	ldr	r4, [r6, #0]
 8007ce0:	4626      	mov	r6, r4
 8007ce2:	2e00      	cmp	r6, #0
 8007ce4:	d140      	bne.n	8007d68 <_malloc_r+0xcc>
 8007ce6:	6823      	ldr	r3, [r4, #0]
 8007ce8:	4631      	mov	r1, r6
 8007cea:	4638      	mov	r0, r7
 8007cec:	eb04 0803 	add.w	r8, r4, r3
 8007cf0:	f000 f9aa 	bl	8008048 <_sbrk_r>
 8007cf4:	4580      	cmp	r8, r0
 8007cf6:	d13a      	bne.n	8007d6e <_malloc_r+0xd2>
 8007cf8:	6821      	ldr	r1, [r4, #0]
 8007cfa:	3503      	adds	r5, #3
 8007cfc:	1a6d      	subs	r5, r5, r1
 8007cfe:	f025 0503 	bic.w	r5, r5, #3
 8007d02:	3508      	adds	r5, #8
 8007d04:	2d0c      	cmp	r5, #12
 8007d06:	bf38      	it	cc
 8007d08:	250c      	movcc	r5, #12
 8007d0a:	4638      	mov	r0, r7
 8007d0c:	4629      	mov	r1, r5
 8007d0e:	f7ff ffa5 	bl	8007c5c <sbrk_aligned>
 8007d12:	3001      	adds	r0, #1
 8007d14:	d02b      	beq.n	8007d6e <_malloc_r+0xd2>
 8007d16:	6823      	ldr	r3, [r4, #0]
 8007d18:	442b      	add	r3, r5
 8007d1a:	6023      	str	r3, [r4, #0]
 8007d1c:	e00e      	b.n	8007d3c <_malloc_r+0xa0>
 8007d1e:	6822      	ldr	r2, [r4, #0]
 8007d20:	1b52      	subs	r2, r2, r5
 8007d22:	d41e      	bmi.n	8007d62 <_malloc_r+0xc6>
 8007d24:	2a0b      	cmp	r2, #11
 8007d26:	d916      	bls.n	8007d56 <_malloc_r+0xba>
 8007d28:	1961      	adds	r1, r4, r5
 8007d2a:	42a3      	cmp	r3, r4
 8007d2c:	6025      	str	r5, [r4, #0]
 8007d2e:	bf18      	it	ne
 8007d30:	6059      	strne	r1, [r3, #4]
 8007d32:	6863      	ldr	r3, [r4, #4]
 8007d34:	bf08      	it	eq
 8007d36:	6031      	streq	r1, [r6, #0]
 8007d38:	5162      	str	r2, [r4, r5]
 8007d3a:	604b      	str	r3, [r1, #4]
 8007d3c:	4638      	mov	r0, r7
 8007d3e:	f104 060b 	add.w	r6, r4, #11
 8007d42:	f000 fa03 	bl	800814c <__malloc_unlock>
 8007d46:	f026 0607 	bic.w	r6, r6, #7
 8007d4a:	1d23      	adds	r3, r4, #4
 8007d4c:	1af2      	subs	r2, r6, r3
 8007d4e:	d0b6      	beq.n	8007cbe <_malloc_r+0x22>
 8007d50:	1b9b      	subs	r3, r3, r6
 8007d52:	50a3      	str	r3, [r4, r2]
 8007d54:	e7b3      	b.n	8007cbe <_malloc_r+0x22>
 8007d56:	6862      	ldr	r2, [r4, #4]
 8007d58:	42a3      	cmp	r3, r4
 8007d5a:	bf0c      	ite	eq
 8007d5c:	6032      	streq	r2, [r6, #0]
 8007d5e:	605a      	strne	r2, [r3, #4]
 8007d60:	e7ec      	b.n	8007d3c <_malloc_r+0xa0>
 8007d62:	4623      	mov	r3, r4
 8007d64:	6864      	ldr	r4, [r4, #4]
 8007d66:	e7b2      	b.n	8007cce <_malloc_r+0x32>
 8007d68:	4634      	mov	r4, r6
 8007d6a:	6876      	ldr	r6, [r6, #4]
 8007d6c:	e7b9      	b.n	8007ce2 <_malloc_r+0x46>
 8007d6e:	230c      	movs	r3, #12
 8007d70:	4638      	mov	r0, r7
 8007d72:	603b      	str	r3, [r7, #0]
 8007d74:	f000 f9ea 	bl	800814c <__malloc_unlock>
 8007d78:	e7a1      	b.n	8007cbe <_malloc_r+0x22>
 8007d7a:	6025      	str	r5, [r4, #0]
 8007d7c:	e7de      	b.n	8007d3c <_malloc_r+0xa0>
 8007d7e:	bf00      	nop
 8007d80:	20000370 	.word	0x20000370

08007d84 <__ssputs_r>:
 8007d84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007d88:	688e      	ldr	r6, [r1, #8]
 8007d8a:	4682      	mov	sl, r0
 8007d8c:	429e      	cmp	r6, r3
 8007d8e:	460c      	mov	r4, r1
 8007d90:	4690      	mov	r8, r2
 8007d92:	461f      	mov	r7, r3
 8007d94:	d838      	bhi.n	8007e08 <__ssputs_r+0x84>
 8007d96:	898a      	ldrh	r2, [r1, #12]
 8007d98:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007d9c:	d032      	beq.n	8007e04 <__ssputs_r+0x80>
 8007d9e:	6825      	ldr	r5, [r4, #0]
 8007da0:	6909      	ldr	r1, [r1, #16]
 8007da2:	3301      	adds	r3, #1
 8007da4:	eba5 0901 	sub.w	r9, r5, r1
 8007da8:	6965      	ldr	r5, [r4, #20]
 8007daa:	444b      	add	r3, r9
 8007dac:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007db0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007db4:	106d      	asrs	r5, r5, #1
 8007db6:	429d      	cmp	r5, r3
 8007db8:	bf38      	it	cc
 8007dba:	461d      	movcc	r5, r3
 8007dbc:	0553      	lsls	r3, r2, #21
 8007dbe:	d531      	bpl.n	8007e24 <__ssputs_r+0xa0>
 8007dc0:	4629      	mov	r1, r5
 8007dc2:	f7ff ff6b 	bl	8007c9c <_malloc_r>
 8007dc6:	4606      	mov	r6, r0
 8007dc8:	b950      	cbnz	r0, 8007de0 <__ssputs_r+0x5c>
 8007dca:	230c      	movs	r3, #12
 8007dcc:	f04f 30ff 	mov.w	r0, #4294967295
 8007dd0:	f8ca 3000 	str.w	r3, [sl]
 8007dd4:	89a3      	ldrh	r3, [r4, #12]
 8007dd6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007dda:	81a3      	strh	r3, [r4, #12]
 8007ddc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007de0:	464a      	mov	r2, r9
 8007de2:	6921      	ldr	r1, [r4, #16]
 8007de4:	f7ff fa18 	bl	8007218 <memcpy>
 8007de8:	89a3      	ldrh	r3, [r4, #12]
 8007dea:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007dee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007df2:	81a3      	strh	r3, [r4, #12]
 8007df4:	6126      	str	r6, [r4, #16]
 8007df6:	444e      	add	r6, r9
 8007df8:	6026      	str	r6, [r4, #0]
 8007dfa:	463e      	mov	r6, r7
 8007dfc:	6165      	str	r5, [r4, #20]
 8007dfe:	eba5 0509 	sub.w	r5, r5, r9
 8007e02:	60a5      	str	r5, [r4, #8]
 8007e04:	42be      	cmp	r6, r7
 8007e06:	d900      	bls.n	8007e0a <__ssputs_r+0x86>
 8007e08:	463e      	mov	r6, r7
 8007e0a:	4632      	mov	r2, r6
 8007e0c:	4641      	mov	r1, r8
 8007e0e:	6820      	ldr	r0, [r4, #0]
 8007e10:	f000 f97c 	bl	800810c <memmove>
 8007e14:	68a3      	ldr	r3, [r4, #8]
 8007e16:	2000      	movs	r0, #0
 8007e18:	1b9b      	subs	r3, r3, r6
 8007e1a:	60a3      	str	r3, [r4, #8]
 8007e1c:	6823      	ldr	r3, [r4, #0]
 8007e1e:	4433      	add	r3, r6
 8007e20:	6023      	str	r3, [r4, #0]
 8007e22:	e7db      	b.n	8007ddc <__ssputs_r+0x58>
 8007e24:	462a      	mov	r2, r5
 8007e26:	f000 f997 	bl	8008158 <_realloc_r>
 8007e2a:	4606      	mov	r6, r0
 8007e2c:	2800      	cmp	r0, #0
 8007e2e:	d1e1      	bne.n	8007df4 <__ssputs_r+0x70>
 8007e30:	4650      	mov	r0, sl
 8007e32:	6921      	ldr	r1, [r4, #16]
 8007e34:	f7ff feca 	bl	8007bcc <_free_r>
 8007e38:	e7c7      	b.n	8007dca <__ssputs_r+0x46>
	...

08007e3c <_svfiprintf_r>:
 8007e3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e40:	4698      	mov	r8, r3
 8007e42:	898b      	ldrh	r3, [r1, #12]
 8007e44:	4607      	mov	r7, r0
 8007e46:	061b      	lsls	r3, r3, #24
 8007e48:	460d      	mov	r5, r1
 8007e4a:	4614      	mov	r4, r2
 8007e4c:	b09d      	sub	sp, #116	; 0x74
 8007e4e:	d50e      	bpl.n	8007e6e <_svfiprintf_r+0x32>
 8007e50:	690b      	ldr	r3, [r1, #16]
 8007e52:	b963      	cbnz	r3, 8007e6e <_svfiprintf_r+0x32>
 8007e54:	2140      	movs	r1, #64	; 0x40
 8007e56:	f7ff ff21 	bl	8007c9c <_malloc_r>
 8007e5a:	6028      	str	r0, [r5, #0]
 8007e5c:	6128      	str	r0, [r5, #16]
 8007e5e:	b920      	cbnz	r0, 8007e6a <_svfiprintf_r+0x2e>
 8007e60:	230c      	movs	r3, #12
 8007e62:	603b      	str	r3, [r7, #0]
 8007e64:	f04f 30ff 	mov.w	r0, #4294967295
 8007e68:	e0d1      	b.n	800800e <_svfiprintf_r+0x1d2>
 8007e6a:	2340      	movs	r3, #64	; 0x40
 8007e6c:	616b      	str	r3, [r5, #20]
 8007e6e:	2300      	movs	r3, #0
 8007e70:	9309      	str	r3, [sp, #36]	; 0x24
 8007e72:	2320      	movs	r3, #32
 8007e74:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007e78:	2330      	movs	r3, #48	; 0x30
 8007e7a:	f04f 0901 	mov.w	r9, #1
 8007e7e:	f8cd 800c 	str.w	r8, [sp, #12]
 8007e82:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8008028 <_svfiprintf_r+0x1ec>
 8007e86:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007e8a:	4623      	mov	r3, r4
 8007e8c:	469a      	mov	sl, r3
 8007e8e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007e92:	b10a      	cbz	r2, 8007e98 <_svfiprintf_r+0x5c>
 8007e94:	2a25      	cmp	r2, #37	; 0x25
 8007e96:	d1f9      	bne.n	8007e8c <_svfiprintf_r+0x50>
 8007e98:	ebba 0b04 	subs.w	fp, sl, r4
 8007e9c:	d00b      	beq.n	8007eb6 <_svfiprintf_r+0x7a>
 8007e9e:	465b      	mov	r3, fp
 8007ea0:	4622      	mov	r2, r4
 8007ea2:	4629      	mov	r1, r5
 8007ea4:	4638      	mov	r0, r7
 8007ea6:	f7ff ff6d 	bl	8007d84 <__ssputs_r>
 8007eaa:	3001      	adds	r0, #1
 8007eac:	f000 80aa 	beq.w	8008004 <_svfiprintf_r+0x1c8>
 8007eb0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007eb2:	445a      	add	r2, fp
 8007eb4:	9209      	str	r2, [sp, #36]	; 0x24
 8007eb6:	f89a 3000 	ldrb.w	r3, [sl]
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	f000 80a2 	beq.w	8008004 <_svfiprintf_r+0x1c8>
 8007ec0:	2300      	movs	r3, #0
 8007ec2:	f04f 32ff 	mov.w	r2, #4294967295
 8007ec6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007eca:	f10a 0a01 	add.w	sl, sl, #1
 8007ece:	9304      	str	r3, [sp, #16]
 8007ed0:	9307      	str	r3, [sp, #28]
 8007ed2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007ed6:	931a      	str	r3, [sp, #104]	; 0x68
 8007ed8:	4654      	mov	r4, sl
 8007eda:	2205      	movs	r2, #5
 8007edc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007ee0:	4851      	ldr	r0, [pc, #324]	; (8008028 <_svfiprintf_r+0x1ec>)
 8007ee2:	f7ff f98b 	bl	80071fc <memchr>
 8007ee6:	9a04      	ldr	r2, [sp, #16]
 8007ee8:	b9d8      	cbnz	r0, 8007f22 <_svfiprintf_r+0xe6>
 8007eea:	06d0      	lsls	r0, r2, #27
 8007eec:	bf44      	itt	mi
 8007eee:	2320      	movmi	r3, #32
 8007ef0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007ef4:	0711      	lsls	r1, r2, #28
 8007ef6:	bf44      	itt	mi
 8007ef8:	232b      	movmi	r3, #43	; 0x2b
 8007efa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007efe:	f89a 3000 	ldrb.w	r3, [sl]
 8007f02:	2b2a      	cmp	r3, #42	; 0x2a
 8007f04:	d015      	beq.n	8007f32 <_svfiprintf_r+0xf6>
 8007f06:	4654      	mov	r4, sl
 8007f08:	2000      	movs	r0, #0
 8007f0a:	f04f 0c0a 	mov.w	ip, #10
 8007f0e:	9a07      	ldr	r2, [sp, #28]
 8007f10:	4621      	mov	r1, r4
 8007f12:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007f16:	3b30      	subs	r3, #48	; 0x30
 8007f18:	2b09      	cmp	r3, #9
 8007f1a:	d94e      	bls.n	8007fba <_svfiprintf_r+0x17e>
 8007f1c:	b1b0      	cbz	r0, 8007f4c <_svfiprintf_r+0x110>
 8007f1e:	9207      	str	r2, [sp, #28]
 8007f20:	e014      	b.n	8007f4c <_svfiprintf_r+0x110>
 8007f22:	eba0 0308 	sub.w	r3, r0, r8
 8007f26:	fa09 f303 	lsl.w	r3, r9, r3
 8007f2a:	4313      	orrs	r3, r2
 8007f2c:	46a2      	mov	sl, r4
 8007f2e:	9304      	str	r3, [sp, #16]
 8007f30:	e7d2      	b.n	8007ed8 <_svfiprintf_r+0x9c>
 8007f32:	9b03      	ldr	r3, [sp, #12]
 8007f34:	1d19      	adds	r1, r3, #4
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	9103      	str	r1, [sp, #12]
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	bfbb      	ittet	lt
 8007f3e:	425b      	neglt	r3, r3
 8007f40:	f042 0202 	orrlt.w	r2, r2, #2
 8007f44:	9307      	strge	r3, [sp, #28]
 8007f46:	9307      	strlt	r3, [sp, #28]
 8007f48:	bfb8      	it	lt
 8007f4a:	9204      	strlt	r2, [sp, #16]
 8007f4c:	7823      	ldrb	r3, [r4, #0]
 8007f4e:	2b2e      	cmp	r3, #46	; 0x2e
 8007f50:	d10c      	bne.n	8007f6c <_svfiprintf_r+0x130>
 8007f52:	7863      	ldrb	r3, [r4, #1]
 8007f54:	2b2a      	cmp	r3, #42	; 0x2a
 8007f56:	d135      	bne.n	8007fc4 <_svfiprintf_r+0x188>
 8007f58:	9b03      	ldr	r3, [sp, #12]
 8007f5a:	3402      	adds	r4, #2
 8007f5c:	1d1a      	adds	r2, r3, #4
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	9203      	str	r2, [sp, #12]
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	bfb8      	it	lt
 8007f66:	f04f 33ff 	movlt.w	r3, #4294967295
 8007f6a:	9305      	str	r3, [sp, #20]
 8007f6c:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800802c <_svfiprintf_r+0x1f0>
 8007f70:	2203      	movs	r2, #3
 8007f72:	4650      	mov	r0, sl
 8007f74:	7821      	ldrb	r1, [r4, #0]
 8007f76:	f7ff f941 	bl	80071fc <memchr>
 8007f7a:	b140      	cbz	r0, 8007f8e <_svfiprintf_r+0x152>
 8007f7c:	2340      	movs	r3, #64	; 0x40
 8007f7e:	eba0 000a 	sub.w	r0, r0, sl
 8007f82:	fa03 f000 	lsl.w	r0, r3, r0
 8007f86:	9b04      	ldr	r3, [sp, #16]
 8007f88:	3401      	adds	r4, #1
 8007f8a:	4303      	orrs	r3, r0
 8007f8c:	9304      	str	r3, [sp, #16]
 8007f8e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007f92:	2206      	movs	r2, #6
 8007f94:	4826      	ldr	r0, [pc, #152]	; (8008030 <_svfiprintf_r+0x1f4>)
 8007f96:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007f9a:	f7ff f92f 	bl	80071fc <memchr>
 8007f9e:	2800      	cmp	r0, #0
 8007fa0:	d038      	beq.n	8008014 <_svfiprintf_r+0x1d8>
 8007fa2:	4b24      	ldr	r3, [pc, #144]	; (8008034 <_svfiprintf_r+0x1f8>)
 8007fa4:	bb1b      	cbnz	r3, 8007fee <_svfiprintf_r+0x1b2>
 8007fa6:	9b03      	ldr	r3, [sp, #12]
 8007fa8:	3307      	adds	r3, #7
 8007faa:	f023 0307 	bic.w	r3, r3, #7
 8007fae:	3308      	adds	r3, #8
 8007fb0:	9303      	str	r3, [sp, #12]
 8007fb2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007fb4:	4433      	add	r3, r6
 8007fb6:	9309      	str	r3, [sp, #36]	; 0x24
 8007fb8:	e767      	b.n	8007e8a <_svfiprintf_r+0x4e>
 8007fba:	460c      	mov	r4, r1
 8007fbc:	2001      	movs	r0, #1
 8007fbe:	fb0c 3202 	mla	r2, ip, r2, r3
 8007fc2:	e7a5      	b.n	8007f10 <_svfiprintf_r+0xd4>
 8007fc4:	2300      	movs	r3, #0
 8007fc6:	f04f 0c0a 	mov.w	ip, #10
 8007fca:	4619      	mov	r1, r3
 8007fcc:	3401      	adds	r4, #1
 8007fce:	9305      	str	r3, [sp, #20]
 8007fd0:	4620      	mov	r0, r4
 8007fd2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007fd6:	3a30      	subs	r2, #48	; 0x30
 8007fd8:	2a09      	cmp	r2, #9
 8007fda:	d903      	bls.n	8007fe4 <_svfiprintf_r+0x1a8>
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d0c5      	beq.n	8007f6c <_svfiprintf_r+0x130>
 8007fe0:	9105      	str	r1, [sp, #20]
 8007fe2:	e7c3      	b.n	8007f6c <_svfiprintf_r+0x130>
 8007fe4:	4604      	mov	r4, r0
 8007fe6:	2301      	movs	r3, #1
 8007fe8:	fb0c 2101 	mla	r1, ip, r1, r2
 8007fec:	e7f0      	b.n	8007fd0 <_svfiprintf_r+0x194>
 8007fee:	ab03      	add	r3, sp, #12
 8007ff0:	9300      	str	r3, [sp, #0]
 8007ff2:	462a      	mov	r2, r5
 8007ff4:	4638      	mov	r0, r7
 8007ff6:	4b10      	ldr	r3, [pc, #64]	; (8008038 <_svfiprintf_r+0x1fc>)
 8007ff8:	a904      	add	r1, sp, #16
 8007ffa:	f7fc fa6f 	bl	80044dc <_printf_float>
 8007ffe:	1c42      	adds	r2, r0, #1
 8008000:	4606      	mov	r6, r0
 8008002:	d1d6      	bne.n	8007fb2 <_svfiprintf_r+0x176>
 8008004:	89ab      	ldrh	r3, [r5, #12]
 8008006:	065b      	lsls	r3, r3, #25
 8008008:	f53f af2c 	bmi.w	8007e64 <_svfiprintf_r+0x28>
 800800c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800800e:	b01d      	add	sp, #116	; 0x74
 8008010:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008014:	ab03      	add	r3, sp, #12
 8008016:	9300      	str	r3, [sp, #0]
 8008018:	462a      	mov	r2, r5
 800801a:	4638      	mov	r0, r7
 800801c:	4b06      	ldr	r3, [pc, #24]	; (8008038 <_svfiprintf_r+0x1fc>)
 800801e:	a904      	add	r1, sp, #16
 8008020:	f7fc fcf8 	bl	8004a14 <_printf_i>
 8008024:	e7eb      	b.n	8007ffe <_svfiprintf_r+0x1c2>
 8008026:	bf00      	nop
 8008028:	08009fb4 	.word	0x08009fb4
 800802c:	08009fba 	.word	0x08009fba
 8008030:	08009fbe 	.word	0x08009fbe
 8008034:	080044dd 	.word	0x080044dd
 8008038:	08007d85 	.word	0x08007d85

0800803c <nan>:
 800803c:	2000      	movs	r0, #0
 800803e:	4901      	ldr	r1, [pc, #4]	; (8008044 <nan+0x8>)
 8008040:	4770      	bx	lr
 8008042:	bf00      	nop
 8008044:	7ff80000 	.word	0x7ff80000

08008048 <_sbrk_r>:
 8008048:	b538      	push	{r3, r4, r5, lr}
 800804a:	2300      	movs	r3, #0
 800804c:	4d05      	ldr	r5, [pc, #20]	; (8008064 <_sbrk_r+0x1c>)
 800804e:	4604      	mov	r4, r0
 8008050:	4608      	mov	r0, r1
 8008052:	602b      	str	r3, [r5, #0]
 8008054:	f7f9 fc2e 	bl	80018b4 <_sbrk>
 8008058:	1c43      	adds	r3, r0, #1
 800805a:	d102      	bne.n	8008062 <_sbrk_r+0x1a>
 800805c:	682b      	ldr	r3, [r5, #0]
 800805e:	b103      	cbz	r3, 8008062 <_sbrk_r+0x1a>
 8008060:	6023      	str	r3, [r4, #0]
 8008062:	bd38      	pop	{r3, r4, r5, pc}
 8008064:	20000378 	.word	0x20000378

08008068 <strncmp>:
 8008068:	4603      	mov	r3, r0
 800806a:	b510      	push	{r4, lr}
 800806c:	b172      	cbz	r2, 800808c <strncmp+0x24>
 800806e:	3901      	subs	r1, #1
 8008070:	1884      	adds	r4, r0, r2
 8008072:	f813 0b01 	ldrb.w	r0, [r3], #1
 8008076:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800807a:	4290      	cmp	r0, r2
 800807c:	d101      	bne.n	8008082 <strncmp+0x1a>
 800807e:	42a3      	cmp	r3, r4
 8008080:	d101      	bne.n	8008086 <strncmp+0x1e>
 8008082:	1a80      	subs	r0, r0, r2
 8008084:	bd10      	pop	{r4, pc}
 8008086:	2800      	cmp	r0, #0
 8008088:	d1f3      	bne.n	8008072 <strncmp+0xa>
 800808a:	e7fa      	b.n	8008082 <strncmp+0x1a>
 800808c:	4610      	mov	r0, r2
 800808e:	e7f9      	b.n	8008084 <strncmp+0x1c>

08008090 <__ascii_wctomb>:
 8008090:	4603      	mov	r3, r0
 8008092:	4608      	mov	r0, r1
 8008094:	b141      	cbz	r1, 80080a8 <__ascii_wctomb+0x18>
 8008096:	2aff      	cmp	r2, #255	; 0xff
 8008098:	d904      	bls.n	80080a4 <__ascii_wctomb+0x14>
 800809a:	228a      	movs	r2, #138	; 0x8a
 800809c:	f04f 30ff 	mov.w	r0, #4294967295
 80080a0:	601a      	str	r2, [r3, #0]
 80080a2:	4770      	bx	lr
 80080a4:	2001      	movs	r0, #1
 80080a6:	700a      	strb	r2, [r1, #0]
 80080a8:	4770      	bx	lr
	...

080080ac <__assert_func>:
 80080ac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80080ae:	4614      	mov	r4, r2
 80080b0:	461a      	mov	r2, r3
 80080b2:	4b09      	ldr	r3, [pc, #36]	; (80080d8 <__assert_func+0x2c>)
 80080b4:	4605      	mov	r5, r0
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	68d8      	ldr	r0, [r3, #12]
 80080ba:	b14c      	cbz	r4, 80080d0 <__assert_func+0x24>
 80080bc:	4b07      	ldr	r3, [pc, #28]	; (80080dc <__assert_func+0x30>)
 80080be:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80080c2:	9100      	str	r1, [sp, #0]
 80080c4:	462b      	mov	r3, r5
 80080c6:	4906      	ldr	r1, [pc, #24]	; (80080e0 <__assert_func+0x34>)
 80080c8:	f000 f80e 	bl	80080e8 <fiprintf>
 80080cc:	f000 fa8a 	bl	80085e4 <abort>
 80080d0:	4b04      	ldr	r3, [pc, #16]	; (80080e4 <__assert_func+0x38>)
 80080d2:	461c      	mov	r4, r3
 80080d4:	e7f3      	b.n	80080be <__assert_func+0x12>
 80080d6:	bf00      	nop
 80080d8:	20000014 	.word	0x20000014
 80080dc:	08009fc5 	.word	0x08009fc5
 80080e0:	08009fd2 	.word	0x08009fd2
 80080e4:	0800a000 	.word	0x0800a000

080080e8 <fiprintf>:
 80080e8:	b40e      	push	{r1, r2, r3}
 80080ea:	b503      	push	{r0, r1, lr}
 80080ec:	4601      	mov	r1, r0
 80080ee:	ab03      	add	r3, sp, #12
 80080f0:	4805      	ldr	r0, [pc, #20]	; (8008108 <fiprintf+0x20>)
 80080f2:	f853 2b04 	ldr.w	r2, [r3], #4
 80080f6:	6800      	ldr	r0, [r0, #0]
 80080f8:	9301      	str	r3, [sp, #4]
 80080fa:	f000 f883 	bl	8008204 <_vfiprintf_r>
 80080fe:	b002      	add	sp, #8
 8008100:	f85d eb04 	ldr.w	lr, [sp], #4
 8008104:	b003      	add	sp, #12
 8008106:	4770      	bx	lr
 8008108:	20000014 	.word	0x20000014

0800810c <memmove>:
 800810c:	4288      	cmp	r0, r1
 800810e:	b510      	push	{r4, lr}
 8008110:	eb01 0402 	add.w	r4, r1, r2
 8008114:	d902      	bls.n	800811c <memmove+0x10>
 8008116:	4284      	cmp	r4, r0
 8008118:	4623      	mov	r3, r4
 800811a:	d807      	bhi.n	800812c <memmove+0x20>
 800811c:	1e43      	subs	r3, r0, #1
 800811e:	42a1      	cmp	r1, r4
 8008120:	d008      	beq.n	8008134 <memmove+0x28>
 8008122:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008126:	f803 2f01 	strb.w	r2, [r3, #1]!
 800812a:	e7f8      	b.n	800811e <memmove+0x12>
 800812c:	4601      	mov	r1, r0
 800812e:	4402      	add	r2, r0
 8008130:	428a      	cmp	r2, r1
 8008132:	d100      	bne.n	8008136 <memmove+0x2a>
 8008134:	bd10      	pop	{r4, pc}
 8008136:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800813a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800813e:	e7f7      	b.n	8008130 <memmove+0x24>

08008140 <__malloc_lock>:
 8008140:	4801      	ldr	r0, [pc, #4]	; (8008148 <__malloc_lock+0x8>)
 8008142:	f000 bc0b 	b.w	800895c <__retarget_lock_acquire_recursive>
 8008146:	bf00      	nop
 8008148:	2000037c 	.word	0x2000037c

0800814c <__malloc_unlock>:
 800814c:	4801      	ldr	r0, [pc, #4]	; (8008154 <__malloc_unlock+0x8>)
 800814e:	f000 bc06 	b.w	800895e <__retarget_lock_release_recursive>
 8008152:	bf00      	nop
 8008154:	2000037c 	.word	0x2000037c

08008158 <_realloc_r>:
 8008158:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800815c:	4680      	mov	r8, r0
 800815e:	4614      	mov	r4, r2
 8008160:	460e      	mov	r6, r1
 8008162:	b921      	cbnz	r1, 800816e <_realloc_r+0x16>
 8008164:	4611      	mov	r1, r2
 8008166:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800816a:	f7ff bd97 	b.w	8007c9c <_malloc_r>
 800816e:	b92a      	cbnz	r2, 800817c <_realloc_r+0x24>
 8008170:	f7ff fd2c 	bl	8007bcc <_free_r>
 8008174:	4625      	mov	r5, r4
 8008176:	4628      	mov	r0, r5
 8008178:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800817c:	f000 fc56 	bl	8008a2c <_malloc_usable_size_r>
 8008180:	4284      	cmp	r4, r0
 8008182:	4607      	mov	r7, r0
 8008184:	d802      	bhi.n	800818c <_realloc_r+0x34>
 8008186:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800818a:	d812      	bhi.n	80081b2 <_realloc_r+0x5a>
 800818c:	4621      	mov	r1, r4
 800818e:	4640      	mov	r0, r8
 8008190:	f7ff fd84 	bl	8007c9c <_malloc_r>
 8008194:	4605      	mov	r5, r0
 8008196:	2800      	cmp	r0, #0
 8008198:	d0ed      	beq.n	8008176 <_realloc_r+0x1e>
 800819a:	42bc      	cmp	r4, r7
 800819c:	4622      	mov	r2, r4
 800819e:	4631      	mov	r1, r6
 80081a0:	bf28      	it	cs
 80081a2:	463a      	movcs	r2, r7
 80081a4:	f7ff f838 	bl	8007218 <memcpy>
 80081a8:	4631      	mov	r1, r6
 80081aa:	4640      	mov	r0, r8
 80081ac:	f7ff fd0e 	bl	8007bcc <_free_r>
 80081b0:	e7e1      	b.n	8008176 <_realloc_r+0x1e>
 80081b2:	4635      	mov	r5, r6
 80081b4:	e7df      	b.n	8008176 <_realloc_r+0x1e>

080081b6 <__sfputc_r>:
 80081b6:	6893      	ldr	r3, [r2, #8]
 80081b8:	b410      	push	{r4}
 80081ba:	3b01      	subs	r3, #1
 80081bc:	2b00      	cmp	r3, #0
 80081be:	6093      	str	r3, [r2, #8]
 80081c0:	da07      	bge.n	80081d2 <__sfputc_r+0x1c>
 80081c2:	6994      	ldr	r4, [r2, #24]
 80081c4:	42a3      	cmp	r3, r4
 80081c6:	db01      	blt.n	80081cc <__sfputc_r+0x16>
 80081c8:	290a      	cmp	r1, #10
 80081ca:	d102      	bne.n	80081d2 <__sfputc_r+0x1c>
 80081cc:	bc10      	pop	{r4}
 80081ce:	f000 b949 	b.w	8008464 <__swbuf_r>
 80081d2:	6813      	ldr	r3, [r2, #0]
 80081d4:	1c58      	adds	r0, r3, #1
 80081d6:	6010      	str	r0, [r2, #0]
 80081d8:	7019      	strb	r1, [r3, #0]
 80081da:	4608      	mov	r0, r1
 80081dc:	bc10      	pop	{r4}
 80081de:	4770      	bx	lr

080081e0 <__sfputs_r>:
 80081e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081e2:	4606      	mov	r6, r0
 80081e4:	460f      	mov	r7, r1
 80081e6:	4614      	mov	r4, r2
 80081e8:	18d5      	adds	r5, r2, r3
 80081ea:	42ac      	cmp	r4, r5
 80081ec:	d101      	bne.n	80081f2 <__sfputs_r+0x12>
 80081ee:	2000      	movs	r0, #0
 80081f0:	e007      	b.n	8008202 <__sfputs_r+0x22>
 80081f2:	463a      	mov	r2, r7
 80081f4:	4630      	mov	r0, r6
 80081f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80081fa:	f7ff ffdc 	bl	80081b6 <__sfputc_r>
 80081fe:	1c43      	adds	r3, r0, #1
 8008200:	d1f3      	bne.n	80081ea <__sfputs_r+0xa>
 8008202:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008204 <_vfiprintf_r>:
 8008204:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008208:	460d      	mov	r5, r1
 800820a:	4614      	mov	r4, r2
 800820c:	4698      	mov	r8, r3
 800820e:	4606      	mov	r6, r0
 8008210:	b09d      	sub	sp, #116	; 0x74
 8008212:	b118      	cbz	r0, 800821c <_vfiprintf_r+0x18>
 8008214:	6983      	ldr	r3, [r0, #24]
 8008216:	b90b      	cbnz	r3, 800821c <_vfiprintf_r+0x18>
 8008218:	f000 fb02 	bl	8008820 <__sinit>
 800821c:	4b89      	ldr	r3, [pc, #548]	; (8008444 <_vfiprintf_r+0x240>)
 800821e:	429d      	cmp	r5, r3
 8008220:	d11b      	bne.n	800825a <_vfiprintf_r+0x56>
 8008222:	6875      	ldr	r5, [r6, #4]
 8008224:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008226:	07d9      	lsls	r1, r3, #31
 8008228:	d405      	bmi.n	8008236 <_vfiprintf_r+0x32>
 800822a:	89ab      	ldrh	r3, [r5, #12]
 800822c:	059a      	lsls	r2, r3, #22
 800822e:	d402      	bmi.n	8008236 <_vfiprintf_r+0x32>
 8008230:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008232:	f000 fb93 	bl	800895c <__retarget_lock_acquire_recursive>
 8008236:	89ab      	ldrh	r3, [r5, #12]
 8008238:	071b      	lsls	r3, r3, #28
 800823a:	d501      	bpl.n	8008240 <_vfiprintf_r+0x3c>
 800823c:	692b      	ldr	r3, [r5, #16]
 800823e:	b9eb      	cbnz	r3, 800827c <_vfiprintf_r+0x78>
 8008240:	4629      	mov	r1, r5
 8008242:	4630      	mov	r0, r6
 8008244:	f000 f960 	bl	8008508 <__swsetup_r>
 8008248:	b1c0      	cbz	r0, 800827c <_vfiprintf_r+0x78>
 800824a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800824c:	07dc      	lsls	r4, r3, #31
 800824e:	d50e      	bpl.n	800826e <_vfiprintf_r+0x6a>
 8008250:	f04f 30ff 	mov.w	r0, #4294967295
 8008254:	b01d      	add	sp, #116	; 0x74
 8008256:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800825a:	4b7b      	ldr	r3, [pc, #492]	; (8008448 <_vfiprintf_r+0x244>)
 800825c:	429d      	cmp	r5, r3
 800825e:	d101      	bne.n	8008264 <_vfiprintf_r+0x60>
 8008260:	68b5      	ldr	r5, [r6, #8]
 8008262:	e7df      	b.n	8008224 <_vfiprintf_r+0x20>
 8008264:	4b79      	ldr	r3, [pc, #484]	; (800844c <_vfiprintf_r+0x248>)
 8008266:	429d      	cmp	r5, r3
 8008268:	bf08      	it	eq
 800826a:	68f5      	ldreq	r5, [r6, #12]
 800826c:	e7da      	b.n	8008224 <_vfiprintf_r+0x20>
 800826e:	89ab      	ldrh	r3, [r5, #12]
 8008270:	0598      	lsls	r0, r3, #22
 8008272:	d4ed      	bmi.n	8008250 <_vfiprintf_r+0x4c>
 8008274:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008276:	f000 fb72 	bl	800895e <__retarget_lock_release_recursive>
 800827a:	e7e9      	b.n	8008250 <_vfiprintf_r+0x4c>
 800827c:	2300      	movs	r3, #0
 800827e:	9309      	str	r3, [sp, #36]	; 0x24
 8008280:	2320      	movs	r3, #32
 8008282:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008286:	2330      	movs	r3, #48	; 0x30
 8008288:	f04f 0901 	mov.w	r9, #1
 800828c:	f8cd 800c 	str.w	r8, [sp, #12]
 8008290:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8008450 <_vfiprintf_r+0x24c>
 8008294:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008298:	4623      	mov	r3, r4
 800829a:	469a      	mov	sl, r3
 800829c:	f813 2b01 	ldrb.w	r2, [r3], #1
 80082a0:	b10a      	cbz	r2, 80082a6 <_vfiprintf_r+0xa2>
 80082a2:	2a25      	cmp	r2, #37	; 0x25
 80082a4:	d1f9      	bne.n	800829a <_vfiprintf_r+0x96>
 80082a6:	ebba 0b04 	subs.w	fp, sl, r4
 80082aa:	d00b      	beq.n	80082c4 <_vfiprintf_r+0xc0>
 80082ac:	465b      	mov	r3, fp
 80082ae:	4622      	mov	r2, r4
 80082b0:	4629      	mov	r1, r5
 80082b2:	4630      	mov	r0, r6
 80082b4:	f7ff ff94 	bl	80081e0 <__sfputs_r>
 80082b8:	3001      	adds	r0, #1
 80082ba:	f000 80aa 	beq.w	8008412 <_vfiprintf_r+0x20e>
 80082be:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80082c0:	445a      	add	r2, fp
 80082c2:	9209      	str	r2, [sp, #36]	; 0x24
 80082c4:	f89a 3000 	ldrb.w	r3, [sl]
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	f000 80a2 	beq.w	8008412 <_vfiprintf_r+0x20e>
 80082ce:	2300      	movs	r3, #0
 80082d0:	f04f 32ff 	mov.w	r2, #4294967295
 80082d4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80082d8:	f10a 0a01 	add.w	sl, sl, #1
 80082dc:	9304      	str	r3, [sp, #16]
 80082de:	9307      	str	r3, [sp, #28]
 80082e0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80082e4:	931a      	str	r3, [sp, #104]	; 0x68
 80082e6:	4654      	mov	r4, sl
 80082e8:	2205      	movs	r2, #5
 80082ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 80082ee:	4858      	ldr	r0, [pc, #352]	; (8008450 <_vfiprintf_r+0x24c>)
 80082f0:	f7fe ff84 	bl	80071fc <memchr>
 80082f4:	9a04      	ldr	r2, [sp, #16]
 80082f6:	b9d8      	cbnz	r0, 8008330 <_vfiprintf_r+0x12c>
 80082f8:	06d1      	lsls	r1, r2, #27
 80082fa:	bf44      	itt	mi
 80082fc:	2320      	movmi	r3, #32
 80082fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008302:	0713      	lsls	r3, r2, #28
 8008304:	bf44      	itt	mi
 8008306:	232b      	movmi	r3, #43	; 0x2b
 8008308:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800830c:	f89a 3000 	ldrb.w	r3, [sl]
 8008310:	2b2a      	cmp	r3, #42	; 0x2a
 8008312:	d015      	beq.n	8008340 <_vfiprintf_r+0x13c>
 8008314:	4654      	mov	r4, sl
 8008316:	2000      	movs	r0, #0
 8008318:	f04f 0c0a 	mov.w	ip, #10
 800831c:	9a07      	ldr	r2, [sp, #28]
 800831e:	4621      	mov	r1, r4
 8008320:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008324:	3b30      	subs	r3, #48	; 0x30
 8008326:	2b09      	cmp	r3, #9
 8008328:	d94e      	bls.n	80083c8 <_vfiprintf_r+0x1c4>
 800832a:	b1b0      	cbz	r0, 800835a <_vfiprintf_r+0x156>
 800832c:	9207      	str	r2, [sp, #28]
 800832e:	e014      	b.n	800835a <_vfiprintf_r+0x156>
 8008330:	eba0 0308 	sub.w	r3, r0, r8
 8008334:	fa09 f303 	lsl.w	r3, r9, r3
 8008338:	4313      	orrs	r3, r2
 800833a:	46a2      	mov	sl, r4
 800833c:	9304      	str	r3, [sp, #16]
 800833e:	e7d2      	b.n	80082e6 <_vfiprintf_r+0xe2>
 8008340:	9b03      	ldr	r3, [sp, #12]
 8008342:	1d19      	adds	r1, r3, #4
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	9103      	str	r1, [sp, #12]
 8008348:	2b00      	cmp	r3, #0
 800834a:	bfbb      	ittet	lt
 800834c:	425b      	neglt	r3, r3
 800834e:	f042 0202 	orrlt.w	r2, r2, #2
 8008352:	9307      	strge	r3, [sp, #28]
 8008354:	9307      	strlt	r3, [sp, #28]
 8008356:	bfb8      	it	lt
 8008358:	9204      	strlt	r2, [sp, #16]
 800835a:	7823      	ldrb	r3, [r4, #0]
 800835c:	2b2e      	cmp	r3, #46	; 0x2e
 800835e:	d10c      	bne.n	800837a <_vfiprintf_r+0x176>
 8008360:	7863      	ldrb	r3, [r4, #1]
 8008362:	2b2a      	cmp	r3, #42	; 0x2a
 8008364:	d135      	bne.n	80083d2 <_vfiprintf_r+0x1ce>
 8008366:	9b03      	ldr	r3, [sp, #12]
 8008368:	3402      	adds	r4, #2
 800836a:	1d1a      	adds	r2, r3, #4
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	9203      	str	r2, [sp, #12]
 8008370:	2b00      	cmp	r3, #0
 8008372:	bfb8      	it	lt
 8008374:	f04f 33ff 	movlt.w	r3, #4294967295
 8008378:	9305      	str	r3, [sp, #20]
 800837a:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8008454 <_vfiprintf_r+0x250>
 800837e:	2203      	movs	r2, #3
 8008380:	4650      	mov	r0, sl
 8008382:	7821      	ldrb	r1, [r4, #0]
 8008384:	f7fe ff3a 	bl	80071fc <memchr>
 8008388:	b140      	cbz	r0, 800839c <_vfiprintf_r+0x198>
 800838a:	2340      	movs	r3, #64	; 0x40
 800838c:	eba0 000a 	sub.w	r0, r0, sl
 8008390:	fa03 f000 	lsl.w	r0, r3, r0
 8008394:	9b04      	ldr	r3, [sp, #16]
 8008396:	3401      	adds	r4, #1
 8008398:	4303      	orrs	r3, r0
 800839a:	9304      	str	r3, [sp, #16]
 800839c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80083a0:	2206      	movs	r2, #6
 80083a2:	482d      	ldr	r0, [pc, #180]	; (8008458 <_vfiprintf_r+0x254>)
 80083a4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80083a8:	f7fe ff28 	bl	80071fc <memchr>
 80083ac:	2800      	cmp	r0, #0
 80083ae:	d03f      	beq.n	8008430 <_vfiprintf_r+0x22c>
 80083b0:	4b2a      	ldr	r3, [pc, #168]	; (800845c <_vfiprintf_r+0x258>)
 80083b2:	bb1b      	cbnz	r3, 80083fc <_vfiprintf_r+0x1f8>
 80083b4:	9b03      	ldr	r3, [sp, #12]
 80083b6:	3307      	adds	r3, #7
 80083b8:	f023 0307 	bic.w	r3, r3, #7
 80083bc:	3308      	adds	r3, #8
 80083be:	9303      	str	r3, [sp, #12]
 80083c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80083c2:	443b      	add	r3, r7
 80083c4:	9309      	str	r3, [sp, #36]	; 0x24
 80083c6:	e767      	b.n	8008298 <_vfiprintf_r+0x94>
 80083c8:	460c      	mov	r4, r1
 80083ca:	2001      	movs	r0, #1
 80083cc:	fb0c 3202 	mla	r2, ip, r2, r3
 80083d0:	e7a5      	b.n	800831e <_vfiprintf_r+0x11a>
 80083d2:	2300      	movs	r3, #0
 80083d4:	f04f 0c0a 	mov.w	ip, #10
 80083d8:	4619      	mov	r1, r3
 80083da:	3401      	adds	r4, #1
 80083dc:	9305      	str	r3, [sp, #20]
 80083de:	4620      	mov	r0, r4
 80083e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80083e4:	3a30      	subs	r2, #48	; 0x30
 80083e6:	2a09      	cmp	r2, #9
 80083e8:	d903      	bls.n	80083f2 <_vfiprintf_r+0x1ee>
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d0c5      	beq.n	800837a <_vfiprintf_r+0x176>
 80083ee:	9105      	str	r1, [sp, #20]
 80083f0:	e7c3      	b.n	800837a <_vfiprintf_r+0x176>
 80083f2:	4604      	mov	r4, r0
 80083f4:	2301      	movs	r3, #1
 80083f6:	fb0c 2101 	mla	r1, ip, r1, r2
 80083fa:	e7f0      	b.n	80083de <_vfiprintf_r+0x1da>
 80083fc:	ab03      	add	r3, sp, #12
 80083fe:	9300      	str	r3, [sp, #0]
 8008400:	462a      	mov	r2, r5
 8008402:	4630      	mov	r0, r6
 8008404:	4b16      	ldr	r3, [pc, #88]	; (8008460 <_vfiprintf_r+0x25c>)
 8008406:	a904      	add	r1, sp, #16
 8008408:	f7fc f868 	bl	80044dc <_printf_float>
 800840c:	4607      	mov	r7, r0
 800840e:	1c78      	adds	r0, r7, #1
 8008410:	d1d6      	bne.n	80083c0 <_vfiprintf_r+0x1bc>
 8008412:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008414:	07d9      	lsls	r1, r3, #31
 8008416:	d405      	bmi.n	8008424 <_vfiprintf_r+0x220>
 8008418:	89ab      	ldrh	r3, [r5, #12]
 800841a:	059a      	lsls	r2, r3, #22
 800841c:	d402      	bmi.n	8008424 <_vfiprintf_r+0x220>
 800841e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008420:	f000 fa9d 	bl	800895e <__retarget_lock_release_recursive>
 8008424:	89ab      	ldrh	r3, [r5, #12]
 8008426:	065b      	lsls	r3, r3, #25
 8008428:	f53f af12 	bmi.w	8008250 <_vfiprintf_r+0x4c>
 800842c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800842e:	e711      	b.n	8008254 <_vfiprintf_r+0x50>
 8008430:	ab03      	add	r3, sp, #12
 8008432:	9300      	str	r3, [sp, #0]
 8008434:	462a      	mov	r2, r5
 8008436:	4630      	mov	r0, r6
 8008438:	4b09      	ldr	r3, [pc, #36]	; (8008460 <_vfiprintf_r+0x25c>)
 800843a:	a904      	add	r1, sp, #16
 800843c:	f7fc faea 	bl	8004a14 <_printf_i>
 8008440:	e7e4      	b.n	800840c <_vfiprintf_r+0x208>
 8008442:	bf00      	nop
 8008444:	0800a024 	.word	0x0800a024
 8008448:	0800a044 	.word	0x0800a044
 800844c:	0800a004 	.word	0x0800a004
 8008450:	08009fb4 	.word	0x08009fb4
 8008454:	08009fba 	.word	0x08009fba
 8008458:	08009fbe 	.word	0x08009fbe
 800845c:	080044dd 	.word	0x080044dd
 8008460:	080081e1 	.word	0x080081e1

08008464 <__swbuf_r>:
 8008464:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008466:	460e      	mov	r6, r1
 8008468:	4614      	mov	r4, r2
 800846a:	4605      	mov	r5, r0
 800846c:	b118      	cbz	r0, 8008476 <__swbuf_r+0x12>
 800846e:	6983      	ldr	r3, [r0, #24]
 8008470:	b90b      	cbnz	r3, 8008476 <__swbuf_r+0x12>
 8008472:	f000 f9d5 	bl	8008820 <__sinit>
 8008476:	4b21      	ldr	r3, [pc, #132]	; (80084fc <__swbuf_r+0x98>)
 8008478:	429c      	cmp	r4, r3
 800847a:	d12b      	bne.n	80084d4 <__swbuf_r+0x70>
 800847c:	686c      	ldr	r4, [r5, #4]
 800847e:	69a3      	ldr	r3, [r4, #24]
 8008480:	60a3      	str	r3, [r4, #8]
 8008482:	89a3      	ldrh	r3, [r4, #12]
 8008484:	071a      	lsls	r2, r3, #28
 8008486:	d52f      	bpl.n	80084e8 <__swbuf_r+0x84>
 8008488:	6923      	ldr	r3, [r4, #16]
 800848a:	b36b      	cbz	r3, 80084e8 <__swbuf_r+0x84>
 800848c:	6923      	ldr	r3, [r4, #16]
 800848e:	6820      	ldr	r0, [r4, #0]
 8008490:	b2f6      	uxtb	r6, r6
 8008492:	1ac0      	subs	r0, r0, r3
 8008494:	6963      	ldr	r3, [r4, #20]
 8008496:	4637      	mov	r7, r6
 8008498:	4283      	cmp	r3, r0
 800849a:	dc04      	bgt.n	80084a6 <__swbuf_r+0x42>
 800849c:	4621      	mov	r1, r4
 800849e:	4628      	mov	r0, r5
 80084a0:	f000 f92a 	bl	80086f8 <_fflush_r>
 80084a4:	bb30      	cbnz	r0, 80084f4 <__swbuf_r+0x90>
 80084a6:	68a3      	ldr	r3, [r4, #8]
 80084a8:	3001      	adds	r0, #1
 80084aa:	3b01      	subs	r3, #1
 80084ac:	60a3      	str	r3, [r4, #8]
 80084ae:	6823      	ldr	r3, [r4, #0]
 80084b0:	1c5a      	adds	r2, r3, #1
 80084b2:	6022      	str	r2, [r4, #0]
 80084b4:	701e      	strb	r6, [r3, #0]
 80084b6:	6963      	ldr	r3, [r4, #20]
 80084b8:	4283      	cmp	r3, r0
 80084ba:	d004      	beq.n	80084c6 <__swbuf_r+0x62>
 80084bc:	89a3      	ldrh	r3, [r4, #12]
 80084be:	07db      	lsls	r3, r3, #31
 80084c0:	d506      	bpl.n	80084d0 <__swbuf_r+0x6c>
 80084c2:	2e0a      	cmp	r6, #10
 80084c4:	d104      	bne.n	80084d0 <__swbuf_r+0x6c>
 80084c6:	4621      	mov	r1, r4
 80084c8:	4628      	mov	r0, r5
 80084ca:	f000 f915 	bl	80086f8 <_fflush_r>
 80084ce:	b988      	cbnz	r0, 80084f4 <__swbuf_r+0x90>
 80084d0:	4638      	mov	r0, r7
 80084d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80084d4:	4b0a      	ldr	r3, [pc, #40]	; (8008500 <__swbuf_r+0x9c>)
 80084d6:	429c      	cmp	r4, r3
 80084d8:	d101      	bne.n	80084de <__swbuf_r+0x7a>
 80084da:	68ac      	ldr	r4, [r5, #8]
 80084dc:	e7cf      	b.n	800847e <__swbuf_r+0x1a>
 80084de:	4b09      	ldr	r3, [pc, #36]	; (8008504 <__swbuf_r+0xa0>)
 80084e0:	429c      	cmp	r4, r3
 80084e2:	bf08      	it	eq
 80084e4:	68ec      	ldreq	r4, [r5, #12]
 80084e6:	e7ca      	b.n	800847e <__swbuf_r+0x1a>
 80084e8:	4621      	mov	r1, r4
 80084ea:	4628      	mov	r0, r5
 80084ec:	f000 f80c 	bl	8008508 <__swsetup_r>
 80084f0:	2800      	cmp	r0, #0
 80084f2:	d0cb      	beq.n	800848c <__swbuf_r+0x28>
 80084f4:	f04f 37ff 	mov.w	r7, #4294967295
 80084f8:	e7ea      	b.n	80084d0 <__swbuf_r+0x6c>
 80084fa:	bf00      	nop
 80084fc:	0800a024 	.word	0x0800a024
 8008500:	0800a044 	.word	0x0800a044
 8008504:	0800a004 	.word	0x0800a004

08008508 <__swsetup_r>:
 8008508:	4b32      	ldr	r3, [pc, #200]	; (80085d4 <__swsetup_r+0xcc>)
 800850a:	b570      	push	{r4, r5, r6, lr}
 800850c:	681d      	ldr	r5, [r3, #0]
 800850e:	4606      	mov	r6, r0
 8008510:	460c      	mov	r4, r1
 8008512:	b125      	cbz	r5, 800851e <__swsetup_r+0x16>
 8008514:	69ab      	ldr	r3, [r5, #24]
 8008516:	b913      	cbnz	r3, 800851e <__swsetup_r+0x16>
 8008518:	4628      	mov	r0, r5
 800851a:	f000 f981 	bl	8008820 <__sinit>
 800851e:	4b2e      	ldr	r3, [pc, #184]	; (80085d8 <__swsetup_r+0xd0>)
 8008520:	429c      	cmp	r4, r3
 8008522:	d10f      	bne.n	8008544 <__swsetup_r+0x3c>
 8008524:	686c      	ldr	r4, [r5, #4]
 8008526:	89a3      	ldrh	r3, [r4, #12]
 8008528:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800852c:	0719      	lsls	r1, r3, #28
 800852e:	d42c      	bmi.n	800858a <__swsetup_r+0x82>
 8008530:	06dd      	lsls	r5, r3, #27
 8008532:	d411      	bmi.n	8008558 <__swsetup_r+0x50>
 8008534:	2309      	movs	r3, #9
 8008536:	6033      	str	r3, [r6, #0]
 8008538:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800853c:	f04f 30ff 	mov.w	r0, #4294967295
 8008540:	81a3      	strh	r3, [r4, #12]
 8008542:	e03e      	b.n	80085c2 <__swsetup_r+0xba>
 8008544:	4b25      	ldr	r3, [pc, #148]	; (80085dc <__swsetup_r+0xd4>)
 8008546:	429c      	cmp	r4, r3
 8008548:	d101      	bne.n	800854e <__swsetup_r+0x46>
 800854a:	68ac      	ldr	r4, [r5, #8]
 800854c:	e7eb      	b.n	8008526 <__swsetup_r+0x1e>
 800854e:	4b24      	ldr	r3, [pc, #144]	; (80085e0 <__swsetup_r+0xd8>)
 8008550:	429c      	cmp	r4, r3
 8008552:	bf08      	it	eq
 8008554:	68ec      	ldreq	r4, [r5, #12]
 8008556:	e7e6      	b.n	8008526 <__swsetup_r+0x1e>
 8008558:	0758      	lsls	r0, r3, #29
 800855a:	d512      	bpl.n	8008582 <__swsetup_r+0x7a>
 800855c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800855e:	b141      	cbz	r1, 8008572 <__swsetup_r+0x6a>
 8008560:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008564:	4299      	cmp	r1, r3
 8008566:	d002      	beq.n	800856e <__swsetup_r+0x66>
 8008568:	4630      	mov	r0, r6
 800856a:	f7ff fb2f 	bl	8007bcc <_free_r>
 800856e:	2300      	movs	r3, #0
 8008570:	6363      	str	r3, [r4, #52]	; 0x34
 8008572:	89a3      	ldrh	r3, [r4, #12]
 8008574:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008578:	81a3      	strh	r3, [r4, #12]
 800857a:	2300      	movs	r3, #0
 800857c:	6063      	str	r3, [r4, #4]
 800857e:	6923      	ldr	r3, [r4, #16]
 8008580:	6023      	str	r3, [r4, #0]
 8008582:	89a3      	ldrh	r3, [r4, #12]
 8008584:	f043 0308 	orr.w	r3, r3, #8
 8008588:	81a3      	strh	r3, [r4, #12]
 800858a:	6923      	ldr	r3, [r4, #16]
 800858c:	b94b      	cbnz	r3, 80085a2 <__swsetup_r+0x9a>
 800858e:	89a3      	ldrh	r3, [r4, #12]
 8008590:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008594:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008598:	d003      	beq.n	80085a2 <__swsetup_r+0x9a>
 800859a:	4621      	mov	r1, r4
 800859c:	4630      	mov	r0, r6
 800859e:	f000 fa05 	bl	80089ac <__smakebuf_r>
 80085a2:	89a0      	ldrh	r0, [r4, #12]
 80085a4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80085a8:	f010 0301 	ands.w	r3, r0, #1
 80085ac:	d00a      	beq.n	80085c4 <__swsetup_r+0xbc>
 80085ae:	2300      	movs	r3, #0
 80085b0:	60a3      	str	r3, [r4, #8]
 80085b2:	6963      	ldr	r3, [r4, #20]
 80085b4:	425b      	negs	r3, r3
 80085b6:	61a3      	str	r3, [r4, #24]
 80085b8:	6923      	ldr	r3, [r4, #16]
 80085ba:	b943      	cbnz	r3, 80085ce <__swsetup_r+0xc6>
 80085bc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80085c0:	d1ba      	bne.n	8008538 <__swsetup_r+0x30>
 80085c2:	bd70      	pop	{r4, r5, r6, pc}
 80085c4:	0781      	lsls	r1, r0, #30
 80085c6:	bf58      	it	pl
 80085c8:	6963      	ldrpl	r3, [r4, #20]
 80085ca:	60a3      	str	r3, [r4, #8]
 80085cc:	e7f4      	b.n	80085b8 <__swsetup_r+0xb0>
 80085ce:	2000      	movs	r0, #0
 80085d0:	e7f7      	b.n	80085c2 <__swsetup_r+0xba>
 80085d2:	bf00      	nop
 80085d4:	20000014 	.word	0x20000014
 80085d8:	0800a024 	.word	0x0800a024
 80085dc:	0800a044 	.word	0x0800a044
 80085e0:	0800a004 	.word	0x0800a004

080085e4 <abort>:
 80085e4:	2006      	movs	r0, #6
 80085e6:	b508      	push	{r3, lr}
 80085e8:	f000 fa50 	bl	8008a8c <raise>
 80085ec:	2001      	movs	r0, #1
 80085ee:	f7f9 f8ed 	bl	80017cc <_exit>
	...

080085f4 <__sflush_r>:
 80085f4:	898a      	ldrh	r2, [r1, #12]
 80085f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085f8:	4605      	mov	r5, r0
 80085fa:	0710      	lsls	r0, r2, #28
 80085fc:	460c      	mov	r4, r1
 80085fe:	d457      	bmi.n	80086b0 <__sflush_r+0xbc>
 8008600:	684b      	ldr	r3, [r1, #4]
 8008602:	2b00      	cmp	r3, #0
 8008604:	dc04      	bgt.n	8008610 <__sflush_r+0x1c>
 8008606:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008608:	2b00      	cmp	r3, #0
 800860a:	dc01      	bgt.n	8008610 <__sflush_r+0x1c>
 800860c:	2000      	movs	r0, #0
 800860e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008610:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008612:	2e00      	cmp	r6, #0
 8008614:	d0fa      	beq.n	800860c <__sflush_r+0x18>
 8008616:	2300      	movs	r3, #0
 8008618:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800861c:	682f      	ldr	r7, [r5, #0]
 800861e:	602b      	str	r3, [r5, #0]
 8008620:	d032      	beq.n	8008688 <__sflush_r+0x94>
 8008622:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008624:	89a3      	ldrh	r3, [r4, #12]
 8008626:	075a      	lsls	r2, r3, #29
 8008628:	d505      	bpl.n	8008636 <__sflush_r+0x42>
 800862a:	6863      	ldr	r3, [r4, #4]
 800862c:	1ac0      	subs	r0, r0, r3
 800862e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008630:	b10b      	cbz	r3, 8008636 <__sflush_r+0x42>
 8008632:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008634:	1ac0      	subs	r0, r0, r3
 8008636:	2300      	movs	r3, #0
 8008638:	4602      	mov	r2, r0
 800863a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800863c:	4628      	mov	r0, r5
 800863e:	6a21      	ldr	r1, [r4, #32]
 8008640:	47b0      	blx	r6
 8008642:	1c43      	adds	r3, r0, #1
 8008644:	89a3      	ldrh	r3, [r4, #12]
 8008646:	d106      	bne.n	8008656 <__sflush_r+0x62>
 8008648:	6829      	ldr	r1, [r5, #0]
 800864a:	291d      	cmp	r1, #29
 800864c:	d82c      	bhi.n	80086a8 <__sflush_r+0xb4>
 800864e:	4a29      	ldr	r2, [pc, #164]	; (80086f4 <__sflush_r+0x100>)
 8008650:	40ca      	lsrs	r2, r1
 8008652:	07d6      	lsls	r6, r2, #31
 8008654:	d528      	bpl.n	80086a8 <__sflush_r+0xb4>
 8008656:	2200      	movs	r2, #0
 8008658:	6062      	str	r2, [r4, #4]
 800865a:	6922      	ldr	r2, [r4, #16]
 800865c:	04d9      	lsls	r1, r3, #19
 800865e:	6022      	str	r2, [r4, #0]
 8008660:	d504      	bpl.n	800866c <__sflush_r+0x78>
 8008662:	1c42      	adds	r2, r0, #1
 8008664:	d101      	bne.n	800866a <__sflush_r+0x76>
 8008666:	682b      	ldr	r3, [r5, #0]
 8008668:	b903      	cbnz	r3, 800866c <__sflush_r+0x78>
 800866a:	6560      	str	r0, [r4, #84]	; 0x54
 800866c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800866e:	602f      	str	r7, [r5, #0]
 8008670:	2900      	cmp	r1, #0
 8008672:	d0cb      	beq.n	800860c <__sflush_r+0x18>
 8008674:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008678:	4299      	cmp	r1, r3
 800867a:	d002      	beq.n	8008682 <__sflush_r+0x8e>
 800867c:	4628      	mov	r0, r5
 800867e:	f7ff faa5 	bl	8007bcc <_free_r>
 8008682:	2000      	movs	r0, #0
 8008684:	6360      	str	r0, [r4, #52]	; 0x34
 8008686:	e7c2      	b.n	800860e <__sflush_r+0x1a>
 8008688:	6a21      	ldr	r1, [r4, #32]
 800868a:	2301      	movs	r3, #1
 800868c:	4628      	mov	r0, r5
 800868e:	47b0      	blx	r6
 8008690:	1c41      	adds	r1, r0, #1
 8008692:	d1c7      	bne.n	8008624 <__sflush_r+0x30>
 8008694:	682b      	ldr	r3, [r5, #0]
 8008696:	2b00      	cmp	r3, #0
 8008698:	d0c4      	beq.n	8008624 <__sflush_r+0x30>
 800869a:	2b1d      	cmp	r3, #29
 800869c:	d001      	beq.n	80086a2 <__sflush_r+0xae>
 800869e:	2b16      	cmp	r3, #22
 80086a0:	d101      	bne.n	80086a6 <__sflush_r+0xb2>
 80086a2:	602f      	str	r7, [r5, #0]
 80086a4:	e7b2      	b.n	800860c <__sflush_r+0x18>
 80086a6:	89a3      	ldrh	r3, [r4, #12]
 80086a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80086ac:	81a3      	strh	r3, [r4, #12]
 80086ae:	e7ae      	b.n	800860e <__sflush_r+0x1a>
 80086b0:	690f      	ldr	r7, [r1, #16]
 80086b2:	2f00      	cmp	r7, #0
 80086b4:	d0aa      	beq.n	800860c <__sflush_r+0x18>
 80086b6:	0793      	lsls	r3, r2, #30
 80086b8:	bf18      	it	ne
 80086ba:	2300      	movne	r3, #0
 80086bc:	680e      	ldr	r6, [r1, #0]
 80086be:	bf08      	it	eq
 80086c0:	694b      	ldreq	r3, [r1, #20]
 80086c2:	1bf6      	subs	r6, r6, r7
 80086c4:	600f      	str	r7, [r1, #0]
 80086c6:	608b      	str	r3, [r1, #8]
 80086c8:	2e00      	cmp	r6, #0
 80086ca:	dd9f      	ble.n	800860c <__sflush_r+0x18>
 80086cc:	4633      	mov	r3, r6
 80086ce:	463a      	mov	r2, r7
 80086d0:	4628      	mov	r0, r5
 80086d2:	6a21      	ldr	r1, [r4, #32]
 80086d4:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 80086d8:	47e0      	blx	ip
 80086da:	2800      	cmp	r0, #0
 80086dc:	dc06      	bgt.n	80086ec <__sflush_r+0xf8>
 80086de:	89a3      	ldrh	r3, [r4, #12]
 80086e0:	f04f 30ff 	mov.w	r0, #4294967295
 80086e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80086e8:	81a3      	strh	r3, [r4, #12]
 80086ea:	e790      	b.n	800860e <__sflush_r+0x1a>
 80086ec:	4407      	add	r7, r0
 80086ee:	1a36      	subs	r6, r6, r0
 80086f0:	e7ea      	b.n	80086c8 <__sflush_r+0xd4>
 80086f2:	bf00      	nop
 80086f4:	20400001 	.word	0x20400001

080086f8 <_fflush_r>:
 80086f8:	b538      	push	{r3, r4, r5, lr}
 80086fa:	690b      	ldr	r3, [r1, #16]
 80086fc:	4605      	mov	r5, r0
 80086fe:	460c      	mov	r4, r1
 8008700:	b913      	cbnz	r3, 8008708 <_fflush_r+0x10>
 8008702:	2500      	movs	r5, #0
 8008704:	4628      	mov	r0, r5
 8008706:	bd38      	pop	{r3, r4, r5, pc}
 8008708:	b118      	cbz	r0, 8008712 <_fflush_r+0x1a>
 800870a:	6983      	ldr	r3, [r0, #24]
 800870c:	b90b      	cbnz	r3, 8008712 <_fflush_r+0x1a>
 800870e:	f000 f887 	bl	8008820 <__sinit>
 8008712:	4b14      	ldr	r3, [pc, #80]	; (8008764 <_fflush_r+0x6c>)
 8008714:	429c      	cmp	r4, r3
 8008716:	d11b      	bne.n	8008750 <_fflush_r+0x58>
 8008718:	686c      	ldr	r4, [r5, #4]
 800871a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800871e:	2b00      	cmp	r3, #0
 8008720:	d0ef      	beq.n	8008702 <_fflush_r+0xa>
 8008722:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008724:	07d0      	lsls	r0, r2, #31
 8008726:	d404      	bmi.n	8008732 <_fflush_r+0x3a>
 8008728:	0599      	lsls	r1, r3, #22
 800872a:	d402      	bmi.n	8008732 <_fflush_r+0x3a>
 800872c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800872e:	f000 f915 	bl	800895c <__retarget_lock_acquire_recursive>
 8008732:	4628      	mov	r0, r5
 8008734:	4621      	mov	r1, r4
 8008736:	f7ff ff5d 	bl	80085f4 <__sflush_r>
 800873a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800873c:	4605      	mov	r5, r0
 800873e:	07da      	lsls	r2, r3, #31
 8008740:	d4e0      	bmi.n	8008704 <_fflush_r+0xc>
 8008742:	89a3      	ldrh	r3, [r4, #12]
 8008744:	059b      	lsls	r3, r3, #22
 8008746:	d4dd      	bmi.n	8008704 <_fflush_r+0xc>
 8008748:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800874a:	f000 f908 	bl	800895e <__retarget_lock_release_recursive>
 800874e:	e7d9      	b.n	8008704 <_fflush_r+0xc>
 8008750:	4b05      	ldr	r3, [pc, #20]	; (8008768 <_fflush_r+0x70>)
 8008752:	429c      	cmp	r4, r3
 8008754:	d101      	bne.n	800875a <_fflush_r+0x62>
 8008756:	68ac      	ldr	r4, [r5, #8]
 8008758:	e7df      	b.n	800871a <_fflush_r+0x22>
 800875a:	4b04      	ldr	r3, [pc, #16]	; (800876c <_fflush_r+0x74>)
 800875c:	429c      	cmp	r4, r3
 800875e:	bf08      	it	eq
 8008760:	68ec      	ldreq	r4, [r5, #12]
 8008762:	e7da      	b.n	800871a <_fflush_r+0x22>
 8008764:	0800a024 	.word	0x0800a024
 8008768:	0800a044 	.word	0x0800a044
 800876c:	0800a004 	.word	0x0800a004

08008770 <std>:
 8008770:	2300      	movs	r3, #0
 8008772:	b510      	push	{r4, lr}
 8008774:	4604      	mov	r4, r0
 8008776:	e9c0 3300 	strd	r3, r3, [r0]
 800877a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800877e:	6083      	str	r3, [r0, #8]
 8008780:	8181      	strh	r1, [r0, #12]
 8008782:	6643      	str	r3, [r0, #100]	; 0x64
 8008784:	81c2      	strh	r2, [r0, #14]
 8008786:	6183      	str	r3, [r0, #24]
 8008788:	4619      	mov	r1, r3
 800878a:	2208      	movs	r2, #8
 800878c:	305c      	adds	r0, #92	; 0x5c
 800878e:	f7fb fdff 	bl	8004390 <memset>
 8008792:	4b05      	ldr	r3, [pc, #20]	; (80087a8 <std+0x38>)
 8008794:	6224      	str	r4, [r4, #32]
 8008796:	6263      	str	r3, [r4, #36]	; 0x24
 8008798:	4b04      	ldr	r3, [pc, #16]	; (80087ac <std+0x3c>)
 800879a:	62a3      	str	r3, [r4, #40]	; 0x28
 800879c:	4b04      	ldr	r3, [pc, #16]	; (80087b0 <std+0x40>)
 800879e:	62e3      	str	r3, [r4, #44]	; 0x2c
 80087a0:	4b04      	ldr	r3, [pc, #16]	; (80087b4 <std+0x44>)
 80087a2:	6323      	str	r3, [r4, #48]	; 0x30
 80087a4:	bd10      	pop	{r4, pc}
 80087a6:	bf00      	nop
 80087a8:	08008ac5 	.word	0x08008ac5
 80087ac:	08008ae7 	.word	0x08008ae7
 80087b0:	08008b1f 	.word	0x08008b1f
 80087b4:	08008b43 	.word	0x08008b43

080087b8 <_cleanup_r>:
 80087b8:	4901      	ldr	r1, [pc, #4]	; (80087c0 <_cleanup_r+0x8>)
 80087ba:	f000 b8af 	b.w	800891c <_fwalk_reent>
 80087be:	bf00      	nop
 80087c0:	080086f9 	.word	0x080086f9

080087c4 <__sfmoreglue>:
 80087c4:	2268      	movs	r2, #104	; 0x68
 80087c6:	b570      	push	{r4, r5, r6, lr}
 80087c8:	1e4d      	subs	r5, r1, #1
 80087ca:	4355      	muls	r5, r2
 80087cc:	460e      	mov	r6, r1
 80087ce:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80087d2:	f7ff fa63 	bl	8007c9c <_malloc_r>
 80087d6:	4604      	mov	r4, r0
 80087d8:	b140      	cbz	r0, 80087ec <__sfmoreglue+0x28>
 80087da:	2100      	movs	r1, #0
 80087dc:	e9c0 1600 	strd	r1, r6, [r0]
 80087e0:	300c      	adds	r0, #12
 80087e2:	60a0      	str	r0, [r4, #8]
 80087e4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80087e8:	f7fb fdd2 	bl	8004390 <memset>
 80087ec:	4620      	mov	r0, r4
 80087ee:	bd70      	pop	{r4, r5, r6, pc}

080087f0 <__sfp_lock_acquire>:
 80087f0:	4801      	ldr	r0, [pc, #4]	; (80087f8 <__sfp_lock_acquire+0x8>)
 80087f2:	f000 b8b3 	b.w	800895c <__retarget_lock_acquire_recursive>
 80087f6:	bf00      	nop
 80087f8:	2000037d 	.word	0x2000037d

080087fc <__sfp_lock_release>:
 80087fc:	4801      	ldr	r0, [pc, #4]	; (8008804 <__sfp_lock_release+0x8>)
 80087fe:	f000 b8ae 	b.w	800895e <__retarget_lock_release_recursive>
 8008802:	bf00      	nop
 8008804:	2000037d 	.word	0x2000037d

08008808 <__sinit_lock_acquire>:
 8008808:	4801      	ldr	r0, [pc, #4]	; (8008810 <__sinit_lock_acquire+0x8>)
 800880a:	f000 b8a7 	b.w	800895c <__retarget_lock_acquire_recursive>
 800880e:	bf00      	nop
 8008810:	2000037e 	.word	0x2000037e

08008814 <__sinit_lock_release>:
 8008814:	4801      	ldr	r0, [pc, #4]	; (800881c <__sinit_lock_release+0x8>)
 8008816:	f000 b8a2 	b.w	800895e <__retarget_lock_release_recursive>
 800881a:	bf00      	nop
 800881c:	2000037e 	.word	0x2000037e

08008820 <__sinit>:
 8008820:	b510      	push	{r4, lr}
 8008822:	4604      	mov	r4, r0
 8008824:	f7ff fff0 	bl	8008808 <__sinit_lock_acquire>
 8008828:	69a3      	ldr	r3, [r4, #24]
 800882a:	b11b      	cbz	r3, 8008834 <__sinit+0x14>
 800882c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008830:	f7ff bff0 	b.w	8008814 <__sinit_lock_release>
 8008834:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008838:	6523      	str	r3, [r4, #80]	; 0x50
 800883a:	4b13      	ldr	r3, [pc, #76]	; (8008888 <__sinit+0x68>)
 800883c:	4a13      	ldr	r2, [pc, #76]	; (800888c <__sinit+0x6c>)
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	62a2      	str	r2, [r4, #40]	; 0x28
 8008842:	42a3      	cmp	r3, r4
 8008844:	bf08      	it	eq
 8008846:	2301      	moveq	r3, #1
 8008848:	4620      	mov	r0, r4
 800884a:	bf08      	it	eq
 800884c:	61a3      	streq	r3, [r4, #24]
 800884e:	f000 f81f 	bl	8008890 <__sfp>
 8008852:	6060      	str	r0, [r4, #4]
 8008854:	4620      	mov	r0, r4
 8008856:	f000 f81b 	bl	8008890 <__sfp>
 800885a:	60a0      	str	r0, [r4, #8]
 800885c:	4620      	mov	r0, r4
 800885e:	f000 f817 	bl	8008890 <__sfp>
 8008862:	2200      	movs	r2, #0
 8008864:	2104      	movs	r1, #4
 8008866:	60e0      	str	r0, [r4, #12]
 8008868:	6860      	ldr	r0, [r4, #4]
 800886a:	f7ff ff81 	bl	8008770 <std>
 800886e:	2201      	movs	r2, #1
 8008870:	2109      	movs	r1, #9
 8008872:	68a0      	ldr	r0, [r4, #8]
 8008874:	f7ff ff7c 	bl	8008770 <std>
 8008878:	2202      	movs	r2, #2
 800887a:	2112      	movs	r1, #18
 800887c:	68e0      	ldr	r0, [r4, #12]
 800887e:	f7ff ff77 	bl	8008770 <std>
 8008882:	2301      	movs	r3, #1
 8008884:	61a3      	str	r3, [r4, #24]
 8008886:	e7d1      	b.n	800882c <__sinit+0xc>
 8008888:	08009bbc 	.word	0x08009bbc
 800888c:	080087b9 	.word	0x080087b9

08008890 <__sfp>:
 8008890:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008892:	4607      	mov	r7, r0
 8008894:	f7ff ffac 	bl	80087f0 <__sfp_lock_acquire>
 8008898:	4b1e      	ldr	r3, [pc, #120]	; (8008914 <__sfp+0x84>)
 800889a:	681e      	ldr	r6, [r3, #0]
 800889c:	69b3      	ldr	r3, [r6, #24]
 800889e:	b913      	cbnz	r3, 80088a6 <__sfp+0x16>
 80088a0:	4630      	mov	r0, r6
 80088a2:	f7ff ffbd 	bl	8008820 <__sinit>
 80088a6:	3648      	adds	r6, #72	; 0x48
 80088a8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80088ac:	3b01      	subs	r3, #1
 80088ae:	d503      	bpl.n	80088b8 <__sfp+0x28>
 80088b0:	6833      	ldr	r3, [r6, #0]
 80088b2:	b30b      	cbz	r3, 80088f8 <__sfp+0x68>
 80088b4:	6836      	ldr	r6, [r6, #0]
 80088b6:	e7f7      	b.n	80088a8 <__sfp+0x18>
 80088b8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80088bc:	b9d5      	cbnz	r5, 80088f4 <__sfp+0x64>
 80088be:	4b16      	ldr	r3, [pc, #88]	; (8008918 <__sfp+0x88>)
 80088c0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80088c4:	60e3      	str	r3, [r4, #12]
 80088c6:	6665      	str	r5, [r4, #100]	; 0x64
 80088c8:	f000 f847 	bl	800895a <__retarget_lock_init_recursive>
 80088cc:	f7ff ff96 	bl	80087fc <__sfp_lock_release>
 80088d0:	2208      	movs	r2, #8
 80088d2:	4629      	mov	r1, r5
 80088d4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80088d8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80088dc:	6025      	str	r5, [r4, #0]
 80088de:	61a5      	str	r5, [r4, #24]
 80088e0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80088e4:	f7fb fd54 	bl	8004390 <memset>
 80088e8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80088ec:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80088f0:	4620      	mov	r0, r4
 80088f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80088f4:	3468      	adds	r4, #104	; 0x68
 80088f6:	e7d9      	b.n	80088ac <__sfp+0x1c>
 80088f8:	2104      	movs	r1, #4
 80088fa:	4638      	mov	r0, r7
 80088fc:	f7ff ff62 	bl	80087c4 <__sfmoreglue>
 8008900:	4604      	mov	r4, r0
 8008902:	6030      	str	r0, [r6, #0]
 8008904:	2800      	cmp	r0, #0
 8008906:	d1d5      	bne.n	80088b4 <__sfp+0x24>
 8008908:	f7ff ff78 	bl	80087fc <__sfp_lock_release>
 800890c:	230c      	movs	r3, #12
 800890e:	603b      	str	r3, [r7, #0]
 8008910:	e7ee      	b.n	80088f0 <__sfp+0x60>
 8008912:	bf00      	nop
 8008914:	08009bbc 	.word	0x08009bbc
 8008918:	ffff0001 	.word	0xffff0001

0800891c <_fwalk_reent>:
 800891c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008920:	4606      	mov	r6, r0
 8008922:	4688      	mov	r8, r1
 8008924:	2700      	movs	r7, #0
 8008926:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800892a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800892e:	f1b9 0901 	subs.w	r9, r9, #1
 8008932:	d505      	bpl.n	8008940 <_fwalk_reent+0x24>
 8008934:	6824      	ldr	r4, [r4, #0]
 8008936:	2c00      	cmp	r4, #0
 8008938:	d1f7      	bne.n	800892a <_fwalk_reent+0xe>
 800893a:	4638      	mov	r0, r7
 800893c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008940:	89ab      	ldrh	r3, [r5, #12]
 8008942:	2b01      	cmp	r3, #1
 8008944:	d907      	bls.n	8008956 <_fwalk_reent+0x3a>
 8008946:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800894a:	3301      	adds	r3, #1
 800894c:	d003      	beq.n	8008956 <_fwalk_reent+0x3a>
 800894e:	4629      	mov	r1, r5
 8008950:	4630      	mov	r0, r6
 8008952:	47c0      	blx	r8
 8008954:	4307      	orrs	r7, r0
 8008956:	3568      	adds	r5, #104	; 0x68
 8008958:	e7e9      	b.n	800892e <_fwalk_reent+0x12>

0800895a <__retarget_lock_init_recursive>:
 800895a:	4770      	bx	lr

0800895c <__retarget_lock_acquire_recursive>:
 800895c:	4770      	bx	lr

0800895e <__retarget_lock_release_recursive>:
 800895e:	4770      	bx	lr

08008960 <__swhatbuf_r>:
 8008960:	b570      	push	{r4, r5, r6, lr}
 8008962:	460e      	mov	r6, r1
 8008964:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008968:	4614      	mov	r4, r2
 800896a:	2900      	cmp	r1, #0
 800896c:	461d      	mov	r5, r3
 800896e:	b096      	sub	sp, #88	; 0x58
 8008970:	da08      	bge.n	8008984 <__swhatbuf_r+0x24>
 8008972:	2200      	movs	r2, #0
 8008974:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8008978:	602a      	str	r2, [r5, #0]
 800897a:	061a      	lsls	r2, r3, #24
 800897c:	d410      	bmi.n	80089a0 <__swhatbuf_r+0x40>
 800897e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008982:	e00e      	b.n	80089a2 <__swhatbuf_r+0x42>
 8008984:	466a      	mov	r2, sp
 8008986:	f000 f903 	bl	8008b90 <_fstat_r>
 800898a:	2800      	cmp	r0, #0
 800898c:	dbf1      	blt.n	8008972 <__swhatbuf_r+0x12>
 800898e:	9a01      	ldr	r2, [sp, #4]
 8008990:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008994:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008998:	425a      	negs	r2, r3
 800899a:	415a      	adcs	r2, r3
 800899c:	602a      	str	r2, [r5, #0]
 800899e:	e7ee      	b.n	800897e <__swhatbuf_r+0x1e>
 80089a0:	2340      	movs	r3, #64	; 0x40
 80089a2:	2000      	movs	r0, #0
 80089a4:	6023      	str	r3, [r4, #0]
 80089a6:	b016      	add	sp, #88	; 0x58
 80089a8:	bd70      	pop	{r4, r5, r6, pc}
	...

080089ac <__smakebuf_r>:
 80089ac:	898b      	ldrh	r3, [r1, #12]
 80089ae:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80089b0:	079d      	lsls	r5, r3, #30
 80089b2:	4606      	mov	r6, r0
 80089b4:	460c      	mov	r4, r1
 80089b6:	d507      	bpl.n	80089c8 <__smakebuf_r+0x1c>
 80089b8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80089bc:	6023      	str	r3, [r4, #0]
 80089be:	6123      	str	r3, [r4, #16]
 80089c0:	2301      	movs	r3, #1
 80089c2:	6163      	str	r3, [r4, #20]
 80089c4:	b002      	add	sp, #8
 80089c6:	bd70      	pop	{r4, r5, r6, pc}
 80089c8:	466a      	mov	r2, sp
 80089ca:	ab01      	add	r3, sp, #4
 80089cc:	f7ff ffc8 	bl	8008960 <__swhatbuf_r>
 80089d0:	9900      	ldr	r1, [sp, #0]
 80089d2:	4605      	mov	r5, r0
 80089d4:	4630      	mov	r0, r6
 80089d6:	f7ff f961 	bl	8007c9c <_malloc_r>
 80089da:	b948      	cbnz	r0, 80089f0 <__smakebuf_r+0x44>
 80089dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80089e0:	059a      	lsls	r2, r3, #22
 80089e2:	d4ef      	bmi.n	80089c4 <__smakebuf_r+0x18>
 80089e4:	f023 0303 	bic.w	r3, r3, #3
 80089e8:	f043 0302 	orr.w	r3, r3, #2
 80089ec:	81a3      	strh	r3, [r4, #12]
 80089ee:	e7e3      	b.n	80089b8 <__smakebuf_r+0xc>
 80089f0:	4b0d      	ldr	r3, [pc, #52]	; (8008a28 <__smakebuf_r+0x7c>)
 80089f2:	62b3      	str	r3, [r6, #40]	; 0x28
 80089f4:	89a3      	ldrh	r3, [r4, #12]
 80089f6:	6020      	str	r0, [r4, #0]
 80089f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80089fc:	81a3      	strh	r3, [r4, #12]
 80089fe:	9b00      	ldr	r3, [sp, #0]
 8008a00:	6120      	str	r0, [r4, #16]
 8008a02:	6163      	str	r3, [r4, #20]
 8008a04:	9b01      	ldr	r3, [sp, #4]
 8008a06:	b15b      	cbz	r3, 8008a20 <__smakebuf_r+0x74>
 8008a08:	4630      	mov	r0, r6
 8008a0a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008a0e:	f000 f8d1 	bl	8008bb4 <_isatty_r>
 8008a12:	b128      	cbz	r0, 8008a20 <__smakebuf_r+0x74>
 8008a14:	89a3      	ldrh	r3, [r4, #12]
 8008a16:	f023 0303 	bic.w	r3, r3, #3
 8008a1a:	f043 0301 	orr.w	r3, r3, #1
 8008a1e:	81a3      	strh	r3, [r4, #12]
 8008a20:	89a0      	ldrh	r0, [r4, #12]
 8008a22:	4305      	orrs	r5, r0
 8008a24:	81a5      	strh	r5, [r4, #12]
 8008a26:	e7cd      	b.n	80089c4 <__smakebuf_r+0x18>
 8008a28:	080087b9 	.word	0x080087b9

08008a2c <_malloc_usable_size_r>:
 8008a2c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008a30:	1f18      	subs	r0, r3, #4
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	bfbc      	itt	lt
 8008a36:	580b      	ldrlt	r3, [r1, r0]
 8008a38:	18c0      	addlt	r0, r0, r3
 8008a3a:	4770      	bx	lr

08008a3c <_raise_r>:
 8008a3c:	291f      	cmp	r1, #31
 8008a3e:	b538      	push	{r3, r4, r5, lr}
 8008a40:	4604      	mov	r4, r0
 8008a42:	460d      	mov	r5, r1
 8008a44:	d904      	bls.n	8008a50 <_raise_r+0x14>
 8008a46:	2316      	movs	r3, #22
 8008a48:	6003      	str	r3, [r0, #0]
 8008a4a:	f04f 30ff 	mov.w	r0, #4294967295
 8008a4e:	bd38      	pop	{r3, r4, r5, pc}
 8008a50:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008a52:	b112      	cbz	r2, 8008a5a <_raise_r+0x1e>
 8008a54:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008a58:	b94b      	cbnz	r3, 8008a6e <_raise_r+0x32>
 8008a5a:	4620      	mov	r0, r4
 8008a5c:	f000 f830 	bl	8008ac0 <_getpid_r>
 8008a60:	462a      	mov	r2, r5
 8008a62:	4601      	mov	r1, r0
 8008a64:	4620      	mov	r0, r4
 8008a66:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008a6a:	f000 b817 	b.w	8008a9c <_kill_r>
 8008a6e:	2b01      	cmp	r3, #1
 8008a70:	d00a      	beq.n	8008a88 <_raise_r+0x4c>
 8008a72:	1c59      	adds	r1, r3, #1
 8008a74:	d103      	bne.n	8008a7e <_raise_r+0x42>
 8008a76:	2316      	movs	r3, #22
 8008a78:	6003      	str	r3, [r0, #0]
 8008a7a:	2001      	movs	r0, #1
 8008a7c:	e7e7      	b.n	8008a4e <_raise_r+0x12>
 8008a7e:	2400      	movs	r4, #0
 8008a80:	4628      	mov	r0, r5
 8008a82:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008a86:	4798      	blx	r3
 8008a88:	2000      	movs	r0, #0
 8008a8a:	e7e0      	b.n	8008a4e <_raise_r+0x12>

08008a8c <raise>:
 8008a8c:	4b02      	ldr	r3, [pc, #8]	; (8008a98 <raise+0xc>)
 8008a8e:	4601      	mov	r1, r0
 8008a90:	6818      	ldr	r0, [r3, #0]
 8008a92:	f7ff bfd3 	b.w	8008a3c <_raise_r>
 8008a96:	bf00      	nop
 8008a98:	20000014 	.word	0x20000014

08008a9c <_kill_r>:
 8008a9c:	b538      	push	{r3, r4, r5, lr}
 8008a9e:	2300      	movs	r3, #0
 8008aa0:	4d06      	ldr	r5, [pc, #24]	; (8008abc <_kill_r+0x20>)
 8008aa2:	4604      	mov	r4, r0
 8008aa4:	4608      	mov	r0, r1
 8008aa6:	4611      	mov	r1, r2
 8008aa8:	602b      	str	r3, [r5, #0]
 8008aaa:	f7f8 fe7f 	bl	80017ac <_kill>
 8008aae:	1c43      	adds	r3, r0, #1
 8008ab0:	d102      	bne.n	8008ab8 <_kill_r+0x1c>
 8008ab2:	682b      	ldr	r3, [r5, #0]
 8008ab4:	b103      	cbz	r3, 8008ab8 <_kill_r+0x1c>
 8008ab6:	6023      	str	r3, [r4, #0]
 8008ab8:	bd38      	pop	{r3, r4, r5, pc}
 8008aba:	bf00      	nop
 8008abc:	20000378 	.word	0x20000378

08008ac0 <_getpid_r>:
 8008ac0:	f7f8 be6d 	b.w	800179e <_getpid>

08008ac4 <__sread>:
 8008ac4:	b510      	push	{r4, lr}
 8008ac6:	460c      	mov	r4, r1
 8008ac8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008acc:	f000 f894 	bl	8008bf8 <_read_r>
 8008ad0:	2800      	cmp	r0, #0
 8008ad2:	bfab      	itete	ge
 8008ad4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008ad6:	89a3      	ldrhlt	r3, [r4, #12]
 8008ad8:	181b      	addge	r3, r3, r0
 8008ada:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008ade:	bfac      	ite	ge
 8008ae0:	6563      	strge	r3, [r4, #84]	; 0x54
 8008ae2:	81a3      	strhlt	r3, [r4, #12]
 8008ae4:	bd10      	pop	{r4, pc}

08008ae6 <__swrite>:
 8008ae6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008aea:	461f      	mov	r7, r3
 8008aec:	898b      	ldrh	r3, [r1, #12]
 8008aee:	4605      	mov	r5, r0
 8008af0:	05db      	lsls	r3, r3, #23
 8008af2:	460c      	mov	r4, r1
 8008af4:	4616      	mov	r6, r2
 8008af6:	d505      	bpl.n	8008b04 <__swrite+0x1e>
 8008af8:	2302      	movs	r3, #2
 8008afa:	2200      	movs	r2, #0
 8008afc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b00:	f000 f868 	bl	8008bd4 <_lseek_r>
 8008b04:	89a3      	ldrh	r3, [r4, #12]
 8008b06:	4632      	mov	r2, r6
 8008b08:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008b0c:	81a3      	strh	r3, [r4, #12]
 8008b0e:	4628      	mov	r0, r5
 8008b10:	463b      	mov	r3, r7
 8008b12:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008b16:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008b1a:	f000 b817 	b.w	8008b4c <_write_r>

08008b1e <__sseek>:
 8008b1e:	b510      	push	{r4, lr}
 8008b20:	460c      	mov	r4, r1
 8008b22:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b26:	f000 f855 	bl	8008bd4 <_lseek_r>
 8008b2a:	1c43      	adds	r3, r0, #1
 8008b2c:	89a3      	ldrh	r3, [r4, #12]
 8008b2e:	bf15      	itete	ne
 8008b30:	6560      	strne	r0, [r4, #84]	; 0x54
 8008b32:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008b36:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008b3a:	81a3      	strheq	r3, [r4, #12]
 8008b3c:	bf18      	it	ne
 8008b3e:	81a3      	strhne	r3, [r4, #12]
 8008b40:	bd10      	pop	{r4, pc}

08008b42 <__sclose>:
 8008b42:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b46:	f000 b813 	b.w	8008b70 <_close_r>
	...

08008b4c <_write_r>:
 8008b4c:	b538      	push	{r3, r4, r5, lr}
 8008b4e:	4604      	mov	r4, r0
 8008b50:	4608      	mov	r0, r1
 8008b52:	4611      	mov	r1, r2
 8008b54:	2200      	movs	r2, #0
 8008b56:	4d05      	ldr	r5, [pc, #20]	; (8008b6c <_write_r+0x20>)
 8008b58:	602a      	str	r2, [r5, #0]
 8008b5a:	461a      	mov	r2, r3
 8008b5c:	f7f8 fe5d 	bl	800181a <_write>
 8008b60:	1c43      	adds	r3, r0, #1
 8008b62:	d102      	bne.n	8008b6a <_write_r+0x1e>
 8008b64:	682b      	ldr	r3, [r5, #0]
 8008b66:	b103      	cbz	r3, 8008b6a <_write_r+0x1e>
 8008b68:	6023      	str	r3, [r4, #0]
 8008b6a:	bd38      	pop	{r3, r4, r5, pc}
 8008b6c:	20000378 	.word	0x20000378

08008b70 <_close_r>:
 8008b70:	b538      	push	{r3, r4, r5, lr}
 8008b72:	2300      	movs	r3, #0
 8008b74:	4d05      	ldr	r5, [pc, #20]	; (8008b8c <_close_r+0x1c>)
 8008b76:	4604      	mov	r4, r0
 8008b78:	4608      	mov	r0, r1
 8008b7a:	602b      	str	r3, [r5, #0]
 8008b7c:	f7f8 fe69 	bl	8001852 <_close>
 8008b80:	1c43      	adds	r3, r0, #1
 8008b82:	d102      	bne.n	8008b8a <_close_r+0x1a>
 8008b84:	682b      	ldr	r3, [r5, #0]
 8008b86:	b103      	cbz	r3, 8008b8a <_close_r+0x1a>
 8008b88:	6023      	str	r3, [r4, #0]
 8008b8a:	bd38      	pop	{r3, r4, r5, pc}
 8008b8c:	20000378 	.word	0x20000378

08008b90 <_fstat_r>:
 8008b90:	b538      	push	{r3, r4, r5, lr}
 8008b92:	2300      	movs	r3, #0
 8008b94:	4d06      	ldr	r5, [pc, #24]	; (8008bb0 <_fstat_r+0x20>)
 8008b96:	4604      	mov	r4, r0
 8008b98:	4608      	mov	r0, r1
 8008b9a:	4611      	mov	r1, r2
 8008b9c:	602b      	str	r3, [r5, #0]
 8008b9e:	f7f8 fe63 	bl	8001868 <_fstat>
 8008ba2:	1c43      	adds	r3, r0, #1
 8008ba4:	d102      	bne.n	8008bac <_fstat_r+0x1c>
 8008ba6:	682b      	ldr	r3, [r5, #0]
 8008ba8:	b103      	cbz	r3, 8008bac <_fstat_r+0x1c>
 8008baa:	6023      	str	r3, [r4, #0]
 8008bac:	bd38      	pop	{r3, r4, r5, pc}
 8008bae:	bf00      	nop
 8008bb0:	20000378 	.word	0x20000378

08008bb4 <_isatty_r>:
 8008bb4:	b538      	push	{r3, r4, r5, lr}
 8008bb6:	2300      	movs	r3, #0
 8008bb8:	4d05      	ldr	r5, [pc, #20]	; (8008bd0 <_isatty_r+0x1c>)
 8008bba:	4604      	mov	r4, r0
 8008bbc:	4608      	mov	r0, r1
 8008bbe:	602b      	str	r3, [r5, #0]
 8008bc0:	f7f8 fe61 	bl	8001886 <_isatty>
 8008bc4:	1c43      	adds	r3, r0, #1
 8008bc6:	d102      	bne.n	8008bce <_isatty_r+0x1a>
 8008bc8:	682b      	ldr	r3, [r5, #0]
 8008bca:	b103      	cbz	r3, 8008bce <_isatty_r+0x1a>
 8008bcc:	6023      	str	r3, [r4, #0]
 8008bce:	bd38      	pop	{r3, r4, r5, pc}
 8008bd0:	20000378 	.word	0x20000378

08008bd4 <_lseek_r>:
 8008bd4:	b538      	push	{r3, r4, r5, lr}
 8008bd6:	4604      	mov	r4, r0
 8008bd8:	4608      	mov	r0, r1
 8008bda:	4611      	mov	r1, r2
 8008bdc:	2200      	movs	r2, #0
 8008bde:	4d05      	ldr	r5, [pc, #20]	; (8008bf4 <_lseek_r+0x20>)
 8008be0:	602a      	str	r2, [r5, #0]
 8008be2:	461a      	mov	r2, r3
 8008be4:	f7f8 fe59 	bl	800189a <_lseek>
 8008be8:	1c43      	adds	r3, r0, #1
 8008bea:	d102      	bne.n	8008bf2 <_lseek_r+0x1e>
 8008bec:	682b      	ldr	r3, [r5, #0]
 8008bee:	b103      	cbz	r3, 8008bf2 <_lseek_r+0x1e>
 8008bf0:	6023      	str	r3, [r4, #0]
 8008bf2:	bd38      	pop	{r3, r4, r5, pc}
 8008bf4:	20000378 	.word	0x20000378

08008bf8 <_read_r>:
 8008bf8:	b538      	push	{r3, r4, r5, lr}
 8008bfa:	4604      	mov	r4, r0
 8008bfc:	4608      	mov	r0, r1
 8008bfe:	4611      	mov	r1, r2
 8008c00:	2200      	movs	r2, #0
 8008c02:	4d05      	ldr	r5, [pc, #20]	; (8008c18 <_read_r+0x20>)
 8008c04:	602a      	str	r2, [r5, #0]
 8008c06:	461a      	mov	r2, r3
 8008c08:	f7f8 fdea 	bl	80017e0 <_read>
 8008c0c:	1c43      	adds	r3, r0, #1
 8008c0e:	d102      	bne.n	8008c16 <_read_r+0x1e>
 8008c10:	682b      	ldr	r3, [r5, #0]
 8008c12:	b103      	cbz	r3, 8008c16 <_read_r+0x1e>
 8008c14:	6023      	str	r3, [r4, #0]
 8008c16:	bd38      	pop	{r3, r4, r5, pc}
 8008c18:	20000378 	.word	0x20000378

08008c1c <_init>:
 8008c1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c1e:	bf00      	nop
 8008c20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c22:	bc08      	pop	{r3}
 8008c24:	469e      	mov	lr, r3
 8008c26:	4770      	bx	lr

08008c28 <_fini>:
 8008c28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c2a:	bf00      	nop
 8008c2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c2e:	bc08      	pop	{r3}
 8008c30:	469e      	mov	lr, r3
 8008c32:	4770      	bx	lr
